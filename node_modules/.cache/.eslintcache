[{"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js":"1","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js":"2","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js":"3","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\annotation.js":"4","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\guidedAnnotation.js":"5","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js":"6","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js":"7","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js":"8","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js":"9","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js":"10","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js":"11","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js":"12","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Header.js":"13","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ProgressButton.js":"14","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js":"15","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js":"16"},{"size":644,"mtime":1646340418421,"results":"17","hashOfConfig":"18"},{"size":11880,"mtime":1646762258419,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1645787016766,"results":"20","hashOfConfig":"18"},{"size":321,"mtime":1645793856078,"results":"21","hashOfConfig":"18"},{"size":384,"mtime":1645793793456,"results":"22","hashOfConfig":"18"},{"size":6052,"mtime":1646762521583,"results":"23","hashOfConfig":"18"},{"size":357,"mtime":1646318356436,"results":"24","hashOfConfig":"18"},{"size":439,"mtime":1646496707735,"results":"25","hashOfConfig":"18"},{"size":4343,"mtime":1646496781128,"results":"26","hashOfConfig":"18"},{"size":3538,"mtime":1646841689290,"results":"27","hashOfConfig":"18"},{"size":502,"mtime":1646670962401,"results":"28","hashOfConfig":"18"},{"size":563,"mtime":1646661565664,"results":"29","hashOfConfig":"18"},{"size":770,"mtime":1646492626118,"results":"30","hashOfConfig":"18"},{"size":480,"mtime":1646492608894,"results":"31","hashOfConfig":"18"},{"size":3106,"mtime":1646822430449,"results":"32","hashOfConfig":"18"},{"size":6531,"mtime":1646761174321,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"iqi5he",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"37"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"37"},"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js",[],[],["90","91"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js",["92","93","94","95","96"],[],"import { useState, useEffect, useRef } from 'react'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\n\r\nimport StartPage from './components/StartPage'\r\nimport Instructions from './components/Instructions'\r\nimport GuidedAnnotation from './components/GuidedAnnotation'\r\nimport Annotation from './components/Annotation'\r\nimport json_file from './data/data_for_mturk.json'\r\nimport { MachineStateHandler } from './components/Annotation_event_handlers';\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [task_id, setTaskID] = useState(\"-1\"); // default for task_id is -1\r\n  const [doc_json, setDocJson] = useState([]);\r\n  const [summary_json, setSummaryJson] = useState([]); \r\n  const [all_lemma_match_mtx, setAllLemmaMtx] = useState([]);\r\n  const [important_lemma_match_mtx, setImportantLemmaMtx] = useState([]);\r\n  const [boldState, setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [StateMachineState, SetStateMachineState] = useState(\"Start\");\r\n  const [error_message, setErrorMessage] = React.useState(\"\");\r\n  const [CurrSentInd, SetCurrSentInd] = useState(-1);\r\n  const [InfoMessage, SetInfoMessage] = useState(\"\");\r\n\r\n  const [prevSummaryUnderlines, setPrevSummaryUnderlines] = useState([])\r\n\r\n  /*************************************** error handling *************************************************/\r\n  const Alert = React.forwardRef(function Alert(props, ref) {return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;});\r\n  const handleErrorOpen = ({ msg }) => { \r\n    setErrorMessage(msg); \r\n  };\r\n\r\n  const handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(\"\");\r\n  };\r\n/************************************************************************************************************* */\r\n\r\n  const isPunct = (tkn_txt) => {\r\n    const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n    const result = tkn_txt.replace(regex, '').replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    return (result === '');\r\n  }\r\n  \r\n  function addDocWordComponents(doc) {\r\n    let updated_doc_json = [];\r\n    doc.forEach((word) => {\r\n      let underlined=false;\r\n      let boldfaced=false;\r\n      let doc_highlighted=false; // all the doc's highlights so far\r\n      let sent_highlighted=false; // all the sentence's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      const newWord = {...word, underlined, boldfaced, span_highlighted, sent_highlighted, doc_highlighted}; \r\n      updated_doc_json = [...updated_doc_json, newWord];\r\n    })\r\n    setDocJson(updated_doc_json);\r\n  }\r\n\r\n\r\n  function addSummaryWordComponents(summary) {\r\n    let updated_summary_json = [];\r\n    summary.forEach((word) => {\r\n      let underlined=false;\r\n      let boldfaced=false;\r\n      let highlighted=false;\r\n      let shadowed=false;\r\n      const newWord = {...word, underlined, boldfaced, highlighted, shadowed}; \r\n      updated_summary_json = [...updated_summary_json, newWord];\r\n    })\r\n    setSummaryJson(updated_summary_json);\r\n  }\r\n\r\n  const toggleDocHighlight = (tkn_ids) => {\r\n    console.log(`true/false: ${isPunct(doc_json[tkn_ids[0]].word)}`);\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, doc_highlighted: !word.doc_highlighted } : word))\r\n  }\r\n\r\n  const toggleSummaryHighlight = (tkn_ids) => {\r\n    setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, highlighted: !word.highlighted } : word));\r\n  }\r\n\r\n\r\n  const SetSummaryShadow = (sent_id) => {\r\n    setSummaryJson(summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const SetSummaryUnderline = (tkn_ids) => {\r\n    if (tkn_ids === \"reset\"){\r\n      setSummaryJson(summary_json.map((word) => {return { ...word, underlined: false };}));\r\n    } else {\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, underlined: !word.underlined } : word));\r\n    }\r\n  }\r\n\r\n  const SetDocBoldface = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n  const checkIfLemmasMatch = ({doc_id, summary_ids, isSpan}) => {\r\n    // const which_match_mtx = (isSpan) ? all_lemma_match_mtx : important_lemma_match_mtx;\r\n    const which_match_mtx = important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const boldStateHandler = (event, newValue) => {\r\n    console.log(newValue)\r\n    if (newValue=='1'){\r\n      setBoldState(\"none\");\r\n      SetDocBoldface([]);\r\n    } else if (newValue=='2'){\r\n      setBoldState(\"span\");\r\n      const summary_ids = summary_json.filter((word) => {return word.underlined}).map((word) => {return word.tkn_id});\r\n      const isSpan = true;\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id, summary_ids, isSpan})});\r\n      SetDocBoldface(tkn_ids);\r\n    } else {\r\n      setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id, summary_ids, isSpan})});\r\n      SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n  const MachineStateHandlerWrapper = ({forceState}) => {\r\n    if (typeof forceState === 'string') {\r\n      console.log(`forceState situation with: state ${forceState}`);\r\n    }\r\n    else{\r\n      console.log(\"not a forceState situation...\");\r\n    }\r\n    MachineStateHandler(summary_json,\r\n                          StateMachineState, SetStateMachineState,\r\n                          SetInfoMessage, handleErrorOpen, isPunct,\r\n                          CurrSentInd, SetCurrSentInd, SetSummaryShadow, SetSummaryUnderline,\r\n                          boldStateHandler,\r\n                          forceState\r\n                         );\r\n  }\r\n\r\n  MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n  }\r\n\r\n\r\n\r\n  const finishedSent = useRef(false);\r\n  const prevState = useRef(\"\")\r\n  \r\n  // prevent entering the else if in the next useEffect \r\n  useEffect(() => {\r\n    finishedSent.current = false;\r\n    console.log(`new CurrSentInd is ${CurrSentInd}`)\r\n  }, [CurrSentInd]);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (StateMachineState !== \"Start\");\r\n    const isAllSentHighlighted = (summary_json.filter((word) => { return word.sent_id===CurrSentInd && !word.highlighted && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"Start\" state isAllSentHighlighted=true because no sentence is underlined \r\n    if(isAllSentHighlighted && isNotStart && !finishedSent.current){\r\n      finishedSent.current = true;\r\n      setPrevSummaryUnderlines(summary_json.map((word) => {return word.underlined}))\r\n      MachineStateHandlerWrapper({forceState:\"Highlight\"});   \r\n    } \r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && finishedSent.current) { \r\n      setSummaryJson(summary_json.map((word) => {return {...word, underlined: prevSummaryUnderlines[word.tkn_id]}}));\r\n      finishedSent.current = false;\r\n      setPrevSummaryUnderlines([]);\r\n      MachineStateHandlerWrapper({forceState:\"Choose Span\"});\r\n    }\r\n  }, [summary_json]);\r\n\r\n  // bolding controlling\r\n  useEffect(() => {\r\n    // making full sentence bolding when starting sentence\r\n    if ([\"Start\", \"Revise Sentence\"].includes(prevState.current)) {\r\n      boldStateHandler(undefined, '3');\r\n    }\r\n    // when choosing a span - if nothing underlined then all sent matches are in bold, otherwise only underlined matches (when highlighting - something must be underlined so automatically is '2')\r\n    else if ([\"Choose Span\", \"Highlight\"].includes(StateMachineState)) {\r\n      const bold_state = (summary_json.filter((word) => {return word.underlined}).length === 0) ? '3' : '2'; // if nothing is underlined - bold everything, otherwise bold only underlined\r\n      boldStateHandler(undefined, bold_state);\r\n    }\r\n  // ignoring bolding when revising\r\n    else if ([\"Revise All\", \"Revise Sentence\".includes(StateMachineState)]) {\r\n      boldStateHandler(undefined, '1');\r\n    }\r\n    prevState.current = StateMachineState;\r\n  }, [StateMachineState, summary_json]);\r\n\r\n\r\n    useEffect(() => {\r\n      const getTasks = () => {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n\r\n        const curr_id = urlParams.get('id');\r\n        setTaskID(curr_id);\r\n\r\n        addDocWordComponents(json_file[curr_id][\"doc\"])\r\n        addSummaryWordComponents(json_file[curr_id][\"summary\"])\r\n        setAllLemmaMtx(json_file[curr_id][\"all_lemma_match_mtx\"]);\r\n        setImportantLemmaMtx(json_file[curr_id][\"important_lemma_match_mtx\"]);\r\n\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n          \r\n        }\r\n\r\n      getTasks();\r\n    }, [])\r\n\r\n\r\n    const SubmitHandler = (event) => {\r\n      console.log(event);\r\n      alert(\"Submitted!\");\r\n    }\r\n  return (\r\n    <Router>\r\n      <div className='container'>\r\n        <Routes>\r\n          <Route path='/' element={<StartPage />} />\r\n          <Route path='/homepage' element={<StartPage />} />\r\n          <Route path='/instructions' element={<Instructions />} />\r\n          <Route path='/guidedAnnotation' element={<GuidedAnnotation />} />\r\n          <Route path='/annotation' element={<Annotation \r\n                                              task_id={task_id} \r\n                                              doc_json = {doc_json}\r\n                                              summary_json = {summary_json}\r\n                                              all_lemma_match_mtx = {all_lemma_match_mtx}\r\n                                              important_lemma_match_mtx = {important_lemma_match_mtx}\r\n                                              StateMachineState = {StateMachineState}\r\n                                              SetStateMachineState = {SetStateMachineState}\r\n                                              handleErrorOpen = {handleErrorOpen}\r\n                                              isPunct = {isPunct}\r\n                                              toggleSummaryHighlight = {toggleSummaryHighlight}\r\n                                              toggleDocHighlight = {toggleDocHighlight}\r\n                                              SetSummaryShadow = {SetSummaryShadow}\r\n                                              SetSummaryUnderline = {SetSummaryUnderline}\r\n                                              boldState = {boldState}\r\n                                              boldStateHandler = {boldStateHandler}\r\n                                              SubmitHandler = {SubmitHandler}\r\n                                              CurrSentInd = {CurrSentInd}\r\n                                              InfoMessage = {InfoMessage}\r\n                                              MachineStateHandlerWrapper = {MachineStateHandlerWrapper}\r\n                                              />} \r\n          />\r\n\r\n        </Routes>\r\n      </div>\r\n      <Snackbar open={error_message !== \"\"} autoHideDuration={6000} onClose={handleErrorClose}>\r\n        <Alert onClose={handleErrorClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {error_message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\annotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\guidedAnnotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js",["97","98","99","100"],[],"import { useState, useEffect } from 'react';\r\nimport DocWord from './DocWord';\r\nimport SummaryWord from './SummaryWord';\r\nimport ResponsiveAppBar from './ResponsiveAppBar';\r\nimport { MachineStateHandler, DocMouseClickHandler, SummaryHighlightHandler, SummaryUnderlineHandler } from './Annotation_event_handlers';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\nimport { ArrowForwardIosTwoTone } from '@mui/icons-material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\n\r\nimport Fab from '@mui/material/Fab';\r\n\r\n\r\n\r\n\r\nconst Annotation = ({task_id, \r\n                    doc_json, summary_json, \r\n                    all_lemma_match_mtx, important_lemma_match_mtx,\r\n                    StateMachineState, SetStateMachineState,\r\n                    handleErrorOpen, isPunct,\r\n                    toggleSummaryHighlight, toggleDocHighlight, \r\n                    SetSummaryShadow, SetSummaryUnderline, \r\n                    boldState, boldStateHandler,\r\n                    SubmitHandler,\r\n                    CurrSentInd,\r\n                    InfoMessage,\r\n                    MachineStateHandlerWrapper\r\n                   }) => {\r\n\r\n\r\n\r\n  const [DocMouseclickStartID, SetDocMouseDownStartID] = useState(\"-1\");\r\n  const [DocMouseclicked, SetDocMouseclicked] = useState(false);\r\n  const [SummaryMouseclickStartID, SetSummaryMouseDownStartID] = useState(\"-1\");\r\n  const [SummaryMouseclicked, SetSummaryMouseclicked] = useState(false);\r\n\r\n\r\n\r\n\r\n\r\n  const nextButtonText = () => {\r\n    if(StateMachineState===\"Start\"){return \"Start\";}\r\n    if(StateMachineState===\"Choose Span\"){return \"Highlight\";}\r\n    if(StateMachineState===\"Highlight\"){return \"Next Span\";}\r\n    if(StateMachineState===\"Revise Sentence\"){return \"Next Sentence\";}\r\n    if(StateMachineState===\"Revise All\"){return \"Submit\";}\r\n  }\r\n\r\n  const nextButtonID = () => {\r\n    if(StateMachineState===\"Start\"){return \"state-Start\";}\r\n    if(StateMachineState===\"Choose Span\"){return \"state-ChooseSpan\";}\r\n    if(StateMachineState===\"Highlight\"){return \"state-Highlight\";}\r\n    if(StateMachineState===\"Revise Sentence\"){return \"state-ReviseSentence\";}\r\n    if(StateMachineState===\"Revise All\"){return \"state-ReviseAll\";}\r\n  };\r\n\r\n\r\n  const Alert = React.forwardRef(function Alert(props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n  });\r\n\r\n  const DocMouseClickHandlerWrapper = (tkn_id) => {\r\n    if (StateMachineState == \"Start\"){ // during start state no clicking is needed\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    } else if (StateMachineState == \"Choose Span\"){ // during start state no clicking is needed\r\n      handleErrorOpen({ msg : \"Please choose a summary span first. Then press \\\"HIGHLIGHT\\\" to continue.\"});\r\n    } else {\r\n      DocMouseClickHandler({ tkn_id, toggleDocHighlight, DocMouseclickStartID, DocMouseclicked, SetDocMouseDownStartID, SetDocMouseclicked });\r\n    }\r\n  }\r\n\r\n  const SummaryMouseClickHandlerWrapper = (tkn_id) => {\r\n    if (StateMachineState == \"Start\"){ // during start state no clicking is needed\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    } else if (summary_json.filter((word) => {return word.tkn_id === tkn_id && word.sent_id !== CurrSentInd}).length !== 0){ // check if span chosen is from the correct sentence first.\r\n      SetSummaryMouseDownStartID(\"-1\");\r\n      SetSummaryMouseclicked(false);\r\n      handleErrorOpen({ msg : \"Span chosen is not from the correct sentence.\" });\r\n    } else if (StateMachineState === \"Choose Span\"){\r\n      SummaryUnderlineHandler({ tkn_id, CurrSentInd, SetSummaryUnderline, SummaryMouseclickStartID, SummaryMouseclicked, SetSummaryMouseDownStartID, SetSummaryMouseclicked });\r\n    } else if ([\"Highlight\", \"Revise Sentence\", \"Revise All\"].includes(StateMachineState)){\r\n      SummaryHighlightHandler({ summary_json, tkn_id, toggleSummaryHighlight, SummaryMouseclickStartID, SummaryMouseclicked, SetSummaryMouseDownStartID, SetSummaryMouseclicked });\r\n    } else {\r\n      console.log(`AVIVSL: state is ${StateMachineState}`);\r\n      alert(\"state not defined yet!\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // reset clickings between states\r\n  useEffect(() => {\r\n    SetDocMouseDownStartID(\"-1\");\r\n    SetDocMouseclicked(false);\r\n    SetSummaryMouseDownStartID(\"-1\");\r\n    SetSummaryMouseclicked(false);\r\n  }, [StateMachineState]);\r\n\r\n  return (\r\n      <>\r\n        <ResponsiveAppBar\r\n           title={\"Annotation\"} \r\n           StateMachineState = {StateMachineState} \r\n           MachineStateHandler={MachineStateHandlerWrapper}\r\n           boldState={boldState}\r\n           boldStateHandler={boldStateHandler}\r\n        />\r\n        {InfoMessage !== \"\" && (<Alert severity=\"info\" color=\"secondary\">{InfoMessage}</Alert>)}\r\n        <div id=\"doc-text\">\r\n            <h3>Document</h3>\r\n            <body>\r\n            {doc_json.map((word_json, index) => (\r\n              <DocWord key={index} word_json={word_json} DocMouseClickHandler={DocMouseClickHandlerWrapper} />\r\n            ))};\r\n            </body>\r\n        </div>\r\n        <div id=\"summary-text\">\r\n            <h3>Summary</h3>\r\n            <p>\r\n            {summary_json.map((word_json, index) => (\r\n              <SummaryWord key={index} word_json={word_json} SummaryMouseClickHandler={SummaryMouseClickHandlerWrapper} />\r\n            ))};\r\n            </p>\r\n        </div>\r\n        {StateMachineState !== \"Revise All\" && (\r\n          <Fab className='NextStateButton' id={nextButtonID()} color=\"success\" variant=\"extended\" onClick={MachineStateHandlerWrapper}>\r\n            {nextButtonText()}\r\n            {StateMachineState !== \"Start\" && (<ArrowForwardIosTwoTone />) }\r\n          </Fab>\r\n        )}\r\n        {StateMachineState === \"Revise All\" && (\r\n          <Fab id=\"SubmitButton\" color=\"success\" variant=\"extended\" onClick={SubmitHandler}>\r\n              {nextButtonText()}\r\n              <SendIcon sx={{ margin: '10%' }}  />\r\n          </Fab>\r\n        )}\r\n      </>\r\n  )\r\n}\r\n\r\nexport default Annotation","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js",["101"],[],"import { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\n\r\nconst BackButton = ({ back_path }) => {\r\n    return (\r\n        <Button component={Link} to={back_path} startIcon={<ArrowBackIosNewIcon />}>\r\n              back\r\n        </Button>\r\n\r\n    )\r\n  }\r\n  \r\n  export default BackButton","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js",["102"],[],"import BackButton from './BackButton'\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <>\r\n        <ResponsiveAppBar\r\n           title={\"Instructions\"}\r\n        />\r\n      <div>\r\n        <section  className=\"InstructionsBody\">\r\n          <h4>\r\n            In this task, you are presented with a document and its summary and your goal is to find all the relevant spans from the document that contibuted to the summary.\r\n            <br></br>\r\n            You will first be presented with the summary and document without any extra markings.\r\n            <br></br>\r\n            We encourage you to read the summary in full and skim through the document so you are familiar with the topics discussed in them.\r\n            <br></br>\r\n            After that you will work sentence by sentence, where you will not be able to continue to the next sentence before \"highlighting\" all of the current sentence's words.\r\n            <br></br>\r\n            When starting to work on a sentence, all the words in the doc who have identical or relating words in that sentence will be <text className=\"boldWords\">boldfaced</text>. This should help you understand the regions in the document with potential aligning information.\r\n            <br></br>\r\n            Once you start working on the sentence, the blodfaced words in the document will return to normal.\r\n            <br></br>\r\n            After that, you will work in iterations:\r\n            <ol>\r\n              <li>\r\n                Start by choosing a subspan of the summary sentence which contains at least one event (by highlighting it).\r\n                <br></br>\r\n                This will boldface all the words in the document identical or similar to those in the span.\r\n              </li>\r\n\r\n              <li>Then, highlight spans in the document aligning to the information in the span, while simultaneously highlighting the relevant part of the summary span to make sure you missed nothing.</li>\r\n              <li>Before heading on to the next span, please make sure you covered all the span's information and only it. If needed, make adjustments to the highlighting.</li>\r\n            </ol>\r\n            You would be able to continue to the next sentence only after covering all the summary sentence.\r\n            You may follow these questions to help you decide what span to choose:\r\n            <ul>\r\n              <li>Is the information presented in the span missing something? Or is it self-informative?</li>\r\n              <li>Is the information presented in the span specific? Or is it too general?</li>\r\n            </ul>\r\n            For long sentences, we strongly advice against highlighting the full sentence all at once, as doing so could lead to missing small details.\r\n            <br></br>\r\n            Alternatively, if a sentence is short enough, aligning it all at once is acceptable.\r\n            <br></br>\r\n            When choosing a span, a general rule of thumb should be a span that when reading it, you manage to remember all the details in it.\r\n            <br></br>\r\n            For example, the sentence:\r\n          </h4>\r\n          \r\n          <h3>\r\n            Sixty Forest Service firefighters brought Michigan's four-day Hiawatha\r\n            <br></br> \r\n            National Forest fire under control after it burned 1100 acres of woodlands.\r\n          </h3>\r\n\r\n          <h4>\r\n            can be seperated into the following span groups:\r\n            <ul>\r\n              <li>Sixty Forest Service firefighters brought Michigan's four-day Hiawatha National Forest fire under control \\ fire under control after it burned 1100 acres of woodlands.</li>\r\n              <li>Sixty Forest Service firefighters brought ... fire under control \\ Michigan's four-day Hiawatha National Forest fire \\ fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ul>\r\n            and shouldn't be handled all at once.\r\n            <br></br>\r\n            <b> Notice! Make sure that what you highlight in the document covers all the information in the summary and only it.</b>\r\n          </h4>\r\n        </section>\r\n        \r\n        \r\n        {/* <footer>\r\n        <BackButton back_path={\"/homepage\"} /> */}\r\n        {/* </footer> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Instructions\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js",["103","104","105","106"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Header.js",[],[],["107","108"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ProgressButton.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js",["109"],[],"import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport { Link } from 'react-router-dom'\r\nimport { ArrowForwardIosTwoTone } from '@mui/icons-material';\r\nimport Slider from '@mui/material/Slider';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\n\r\nconst pages = {'Home Page': 'homepage', 'Instructions': 'instructions', 'Guided Annotation': 'guidedAnnotation', 'Annotation': 'annotation'}; \r\n\r\nconst ResponsiveAppBar = ({ title, StateMachineState, MachineStateHandler, boldState, boldStateHandler }) => {\r\n  const BlackTextTypography = withStyles({\r\n    root: {\r\n      color: \"black\",\r\n      fontSize: \"15pt\",\r\n      fontWeight: \"14\"\r\n    }\r\n  })(Typography);\r\n\r\n\r\n\r\n\r\n\r\n  const sliderTags = (value) =>{\r\n    if (value===1) {\r\n      return \"None\";\r\n    } else if (value===2) {\r\n      return \"Span\";\r\n    } else {\r\n      return \"Sentence\";\r\n    }\r\n  }\r\n\r\n  const sliderDefaultValue = () =>{\r\n    if (boldState === \"none\") {\r\n      return 1;\r\n    } else if (boldState === \"span\") {\r\n      return 2;\r\n    } else {\r\n      return 3;\r\n    }\r\n  }\r\n  \r\n\r\n\r\n  return (\r\n    <AppBar position=\"static\" color=\"primary\">\r\n      <Container maxWidth=\"xl\">\r\n        <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            {title}\r\n          </Typography>\r\n\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ flexGrow: 1, display: {xs: 'flex', md: 'none' } }}\r\n          >\r\n            {title}\r\n          </Typography>\r\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n            {Object.keys(pages).filter(key => key !== title).map((ttl) => (\r\n              <Button\r\n                key={ttl}\r\n                component={Link} to={`/${pages[ttl]}`}\r\n                sx={{ my: 2, color: 'white', display: 'block' }}\r\n              >\r\n                {ttl}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n          \r\n          <Box sx={{ width: 190, alignItems: 'center' }}>\r\n            <BlackTextTypography  id=\"bolding-options\" color=\"secondary\">\r\n              BOLDING OPTIONS\r\n            </BlackTextTypography>\r\n            <Slider\r\n              aria-label=\"Bolding-option\"\r\n              defaultValue={3}\r\n              getAriaValueText={sliderTags}\r\n              valueLabelFormat={sliderTags}\r\n              valueLabelDisplay=\"auto\"\r\n              value={sliderDefaultValue()}\r\n              color=\"error\"\r\n              step={1}\r\n              marks\r\n              min={1}\r\n              max={3}\r\n              onChangeCommitted={boldStateHandler}\r\n            />\r\n          </Box>\r\n        </Toolbar>\r\n      </Container>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default ResponsiveAppBar;\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js",["110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],[],"import { useState, useEffect } from 'react'\r\n\r\nconst DocMouseClickHandler = ({tkn_id, toggleDocHighlight, DocMouseclickStartID, DocMouseclicked, SetDocMouseDownStartID, SetDocMouseclicked}) => {\r\n    const update_mouse_tkn = DocMouseclicked ? \"-1\" : tkn_id;\r\n    if (DocMouseclicked){\r\n      const min_ID =  (DocMouseclickStartID > tkn_id) ? tkn_id : DocMouseclickStartID;\r\n      const max_ID =  (DocMouseclickStartID > tkn_id) ? DocMouseclickStartID : tkn_id;\r\n      let chosen_IDs = [];\r\n      for(let i=min_ID; i<=max_ID; i++){\r\n        chosen_IDs.push(i);\r\n      }\r\n      toggleDocHighlight(chosen_IDs);     \r\n    }\r\n    SetDocMouseDownStartID(update_mouse_tkn);\r\n    SetDocMouseclicked(!DocMouseclicked);\r\n  }\r\n\r\n\r\n  const SummaryHighlightHandler = ({summary_json, tkn_id, toggleSummaryHighlight, SummaryMouseclickStartID, SummaryMouseclicked, SetSummaryMouseDownStartID, SetSummaryMouseclicked}) => {  \r\n    const update_mouse_tkn = SummaryMouseclicked ? \"-1\" : tkn_id;\r\n    if (SummaryMouseclicked){\r\n      const min_ID =  (SummaryMouseclickStartID > tkn_id) ? tkn_id : SummaryMouseclickStartID;\r\n      const max_ID =  (SummaryMouseclickStartID > tkn_id) ? SummaryMouseclickStartID : tkn_id;\r\n      let chosen_IDs = [];\r\n      for(let i=min_ID; i<=max_ID; i++){\r\n        chosen_IDs.push(i);\r\n      }\r\n      toggleSummaryHighlight(chosen_IDs);\r\n    }\r\n    SetSummaryMouseDownStartID(update_mouse_tkn);\r\n    SetSummaryMouseclicked(!SummaryMouseclicked);\r\n  }\r\n\r\n  const SummaryUnderlineHandler = ({ tkn_id, CurrSentInd, SetSummaryUnderline, SummaryMouseclickStartID, SummaryMouseclicked, SetSummaryMouseDownStartID, SetSummaryMouseclicked }) => {  \r\n    const update_mouse_tkn = SummaryMouseclicked ? \"-1\" : tkn_id;\r\n    if (SummaryMouseclicked){\r\n      const min_ID =  (SummaryMouseclickStartID > tkn_id) ? tkn_id : SummaryMouseclickStartID;\r\n      const max_ID =  (SummaryMouseclickStartID > tkn_id) ? SummaryMouseclickStartID : tkn_id;\r\n      let chosen_IDs = [];\r\n      for(let i=min_ID; i<=max_ID; i++){\r\n        chosen_IDs.push(i);\r\n      }\r\n      SetSummaryUnderline(chosen_IDs);  \r\n    }\r\n    SetSummaryMouseDownStartID(update_mouse_tkn);\r\n    SetSummaryMouseclicked(!SummaryMouseclicked);\r\n  }\r\n\r\n\r\n  const allSentHighlighted = (summary_json, CurrSentInd, isPunct) => {\r\n    console.log(summary_json.filter((word) => { return (word.sent_id === CurrSentInd) && (!word.highlighted) && (!isPunct(word.word))}));\r\n    return (summary_json.filter((word) => { return (word.sent_id === CurrSentInd) && (!word.highlighted) && (!isPunct(word.word))}).length === 0);\r\n  }\r\n\r\n  const allSummaryHighlighted = (summary_json, CurrSentInd, isPunct) => {\r\n    const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n    return (allSentHighlighted(summary_json, CurrSentInd, isPunct) && isLastSent)\r\n  }\r\n\r\n\r\n\r\n  const MachineStateHandler = (summary_json,\r\n                                 StateMachineState, SetStateMachineState,\r\n                                 SetInfoMessage, handleErrorOpen, isPunct,\r\n                                 CurrSentInd, SetCurrSentInd, SetSummaryShadow, SetSummaryUnderline,\r\n                                 boldStateHandler,\r\n                                 forceState) => {\r\n    // \"Start\" state --> \"Choose Span\" state\r\n    if (StateMachineState === \"Start\"){\r\n        console.log(`Old state: \\\"Start\\\"; New state: \\\"Choose Span\\\" with SentInd=${CurrSentInd+1}.`);\r\n        SetStateMachineState(\"Choose Span\");\r\n        SetSummaryShadow(CurrSentInd+1);\r\n        SetCurrSentInd(CurrSentInd+1);\r\n        SetInfoMessage(\"Choose a span and then press \\\"HIGHLIGHT\\\".\");\r\n    }\r\n    // \"Choose Span\" state --> \"Highlight\" state\r\n    else if (forceState === \"Choose Span\" || StateMachineState === \"Choose Span\"){\r\n        if((summary_json.filter((word) => {return word.underlined && word.sent_id === CurrSentInd}).length === 0) && (forceState !== \"Choose Span\")){\r\n            handleErrorOpen({ msg : \"No span was chosen.\" });\r\n        } else{\r\n            console.log(`Old state: \\\"Choose Span\\\"; New state: \\\"Highlight\\\".`);\r\n            SetStateMachineState(\"Highlight\");\r\n            boldStateHandler(undefined, 2); // set the boldstate to boldfacing matches of span.\r\n            SetInfoMessage(\"\");\r\n        }\r\n    }\r\n    // \"Highlight\" state --> \"Revise All\"/\"Revise Sentence\"/\"Choose Span\" state \r\n    else if (forceState === \"Highlight\" || StateMachineState === \"Highlight\"){\r\n        if(summary_json.filter((word) => {return word.underlined && !word.highlighted && !isPunct(word.word)}).length > 0){\r\n            handleErrorOpen({ msg : \"Not all summary span was highlighted.\" });\r\n            return;\r\n        } \r\n        SetSummaryUnderline(\"reset\");\r\n        if (allSummaryHighlighted(summary_json, CurrSentInd, isPunct)){\r\n            console.log(`Old state: \\\"Highlight\\\"; New state: \\\"Revise All\\\".`);\r\n            SetStateMachineState(\"Revise All\"); \r\n            SetInfoMessage(\"Finished all summary. If needed, please adjust doc spans. In the end, press  \\\"SUBMIT\\\".\");\r\n        } else if (allSentHighlighted(summary_json, CurrSentInd, isPunct)){\r\n            console.log(`Old state: \\\"Highlight\\\"; New state: \\\"Revise Sentence\\\".`);\r\n            SetStateMachineState(\"Revise Sentence\"); \r\n            SetInfoMessage(\"Finished summary sentence. If needed, please adjust doc spans. In the end, press  \\\"NEXT SENTENCE\\\".\");\r\n        } else {\r\n            console.log(`Old state: \\\"Highlight\\\"; New state: \\\"Choose Span\\\".`);\r\n            SetStateMachineState(\"Choose Span\"); \r\n            SetInfoMessage(\"Choose a span and then press \\\"HIGHLIGHT\\\".\");\r\n        }\r\n    }\r\n    // \"Revise Sentence\" state --> \"Choose Span\" state\r\n    else if (StateMachineState === \"Revise Sentence\"){\r\n      console.log(`Old state: \\\"Revise Sentence\\\"; New state: \\\"Choose Span\\\" with SentInd=${CurrSentInd+1}.`);\r\n      SetStateMachineState(\"Choose Span\");\r\n      SetSummaryShadow(CurrSentInd+1);\r\n      SetCurrSentInd(CurrSentInd+1);\r\n      SetInfoMessage(\"Choose a span and then press \\\"HIGHLIGHT\\\".\");\r\n    }\r\n    // \"Revise All\" state --> \"Submit\" state \r\n    else if (StateMachineState === \"Revise All\"){\r\n      console.log(`Old state: \\\"Revise Sentence\\\"; New state: \\\"Submit\\\"`);\r\n      SetStateMachineState(\"Submit\");\r\n      SetInfoMessage(\"\");\r\n    }\r\n  }\r\n\r\n  MachineStateHandler.defaultProps = {\r\n    forceState: '',\r\n  }\r\n  \r\n\r\n\r\n  export { MachineStateHandler, DocMouseClickHandler, SummaryHighlightHandler, SummaryUnderlineHandler }\r\n",{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","severity":1,"message":"145","line":110,"column":11,"nodeType":"146","messageId":"147","endLine":110,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":117,"column":17,"nodeType":"150","messageId":"151","endLine":117,"endColumn":19},{"ruleId":"148","severity":1,"message":"149","line":120,"column":24,"nodeType":"150","messageId":"151","endLine":120,"endColumn":26},{"ruleId":"152","severity":1,"message":"153","line":181,"column":6,"nodeType":"154","endLine":181,"endColumn":20,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":199,"column":6,"nodeType":"154","endLine":199,"endColumn":39,"suggestions":"157"},{"ruleId":"144","severity":1,"message":"158","line":5,"column":10,"nodeType":"146","messageId":"147","endLine":5,"endColumn":29},{"ruleId":"148","severity":1,"message":"149","line":63,"column":27,"nodeType":"150","messageId":"151","endLine":63,"endColumn":29},{"ruleId":"148","severity":1,"message":"149","line":65,"column":34,"nodeType":"150","messageId":"151","endLine":65,"endColumn":36},{"ruleId":"148","severity":1,"message":"149","line":73,"column":27,"nodeType":"150","messageId":"151","endLine":73,"endColumn":29},{"ruleId":"144","severity":1,"message":"159","line":4,"column":8,"nodeType":"146","messageId":"147","endLine":4,"endColumn":24},{"ruleId":"144","severity":1,"message":"160","line":1,"column":8,"nodeType":"146","messageId":"147","endLine":1,"endColumn":18},{"ruleId":"144","severity":1,"message":"161","line":7,"column":8,"nodeType":"146","messageId":"147","endLine":7,"endColumn":11},{"ruleId":"144","severity":1,"message":"162","line":9,"column":8,"nodeType":"146","messageId":"147","endLine":9,"endColumn":19},{"ruleId":"144","severity":1,"message":"163","line":10,"column":10,"nodeType":"146","messageId":"147","endLine":10,"endColumn":17},{"ruleId":"144","severity":1,"message":"164","line":14,"column":7,"nodeType":"146","messageId":"147","endLine":14,"endColumn":12},{"ruleId":"140","replacedBy":"165"},{"ruleId":"142","replacedBy":"166"},{"ruleId":"144","severity":1,"message":"167","line":9,"column":10,"nodeType":"146","messageId":"147","endLine":9,"endColumn":32},{"ruleId":"144","severity":1,"message":"168","line":1,"column":10,"nodeType":"146","messageId":"147","endLine":1,"endColumn":18},{"ruleId":"144","severity":1,"message":"169","line":1,"column":20,"nodeType":"146","messageId":"147","endLine":1,"endColumn":29},{"ruleId":"170","severity":1,"message":"171","line":70,"column":33,"nodeType":"172","messageId":"173","endLine":70,"endColumn":34,"suggestions":"174"},{"ruleId":"170","severity":1,"message":"171","line":70,"column":40,"nodeType":"172","messageId":"173","endLine":70,"endColumn":41,"suggestions":"175"},{"ruleId":"170","severity":1,"message":"171","line":70,"column":55,"nodeType":"172","messageId":"173","endLine":70,"endColumn":56,"suggestions":"176"},{"ruleId":"170","severity":1,"message":"171","line":70,"column":68,"nodeType":"172","messageId":"173","endLine":70,"endColumn":69,"suggestions":"177"},{"ruleId":"170","severity":1,"message":"171","line":81,"column":37,"nodeType":"172","messageId":"173","endLine":81,"endColumn":38,"suggestions":"178"},{"ruleId":"170","severity":1,"message":"171","line":81,"column":50,"nodeType":"172","messageId":"173","endLine":81,"endColumn":51,"suggestions":"179"},{"ruleId":"170","severity":1,"message":"171","line":81,"column":65,"nodeType":"172","messageId":"173","endLine":81,"endColumn":66,"suggestions":"180"},{"ruleId":"170","severity":1,"message":"171","line":81,"column":76,"nodeType":"172","messageId":"173","endLine":81,"endColumn":77,"suggestions":"181"},{"ruleId":"170","severity":1,"message":"171","line":95,"column":37,"nodeType":"172","messageId":"173","endLine":95,"endColumn":38,"suggestions":"182"},{"ruleId":"170","severity":1,"message":"171","line":95,"column":48,"nodeType":"172","messageId":"173","endLine":95,"endColumn":49,"suggestions":"183"},{"ruleId":"170","severity":1,"message":"171","line":95,"column":63,"nodeType":"172","messageId":"173","endLine":95,"endColumn":64,"suggestions":"184"},{"ruleId":"170","severity":1,"message":"171","line":95,"column":75,"nodeType":"172","messageId":"173","endLine":95,"endColumn":76,"suggestions":"185"},{"ruleId":"170","severity":1,"message":"171","line":99,"column":37,"nodeType":"172","messageId":"173","endLine":99,"endColumn":38,"suggestions":"186"},{"ruleId":"170","severity":1,"message":"171","line":99,"column":48,"nodeType":"172","messageId":"173","endLine":99,"endColumn":49,"suggestions":"187"},{"ruleId":"170","severity":1,"message":"171","line":99,"column":63,"nodeType":"172","messageId":"173","endLine":99,"endColumn":64,"suggestions":"188"},{"ruleId":"170","severity":1,"message":"171","line":99,"column":80,"nodeType":"172","messageId":"173","endLine":99,"endColumn":81,"suggestions":"189"},{"ruleId":"170","severity":1,"message":"171","line":103,"column":37,"nodeType":"172","messageId":"173","endLine":103,"endColumn":38,"suggestions":"190"},{"ruleId":"170","severity":1,"message":"171","line":103,"column":48,"nodeType":"172","messageId":"173","endLine":103,"endColumn":49,"suggestions":"191"},{"ruleId":"170","severity":1,"message":"171","line":103,"column":63,"nodeType":"172","messageId":"173","endLine":103,"endColumn":64,"suggestions":"192"},{"ruleId":"170","severity":1,"message":"171","line":103,"column":76,"nodeType":"172","messageId":"173","endLine":103,"endColumn":77,"suggestions":"193"},{"ruleId":"170","severity":1,"message":"171","line":110,"column":31,"nodeType":"172","messageId":"173","endLine":110,"endColumn":32,"suggestions":"194"},{"ruleId":"170","severity":1,"message":"171","line":110,"column":48,"nodeType":"172","messageId":"173","endLine":110,"endColumn":49,"suggestions":"195"},{"ruleId":"170","severity":1,"message":"171","line":110,"column":63,"nodeType":"172","messageId":"173","endLine":110,"endColumn":64,"suggestions":"196"},{"ruleId":"170","severity":1,"message":"171","line":110,"column":76,"nodeType":"172","messageId":"173","endLine":110,"endColumn":77,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"171","line":118,"column":31,"nodeType":"172","messageId":"173","endLine":118,"endColumn":32,"suggestions":"198"},{"ruleId":"170","severity":1,"message":"171","line":118,"column":48,"nodeType":"172","messageId":"173","endLine":118,"endColumn":49,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"171","line":118,"column":63,"nodeType":"172","messageId":"173","endLine":118,"endColumn":64,"suggestions":"200"},{"ruleId":"170","severity":1,"message":"171","line":118,"column":71,"nodeType":"172","messageId":"173","endLine":118,"endColumn":72,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'which_match_mtx' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'CurrSentInd', 'MachineStateHandlerWrapper', 'StateMachineState', and 'prevSummaryUnderlines'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSummaryJson' needs the current value of 'prevSummaryUnderlines'.","ArrayExpression",["204"],"React Hook useEffect has a missing dependency: 'boldStateHandler'. Either include it or remove the dependency array.",["205"],"'MachineStateHandler' is defined but never used.","'ResponsiveAppBar' is defined but never used.","'BackButton' is defined but never used.","'Box' is defined but never used.","'ButtonGroup' is defined but never used.","'spacing' is defined but never used.","'pages' is assigned a value but never used.",["202"],["203"],"'ArrowForwardIosTwoTone' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["206","207"],["208","209"],["210","211"],["212","213"],["214","215"],["216","217"],["218","219"],["220","221"],["222","223"],["224","225"],["226","227"],["228","229"],["230","231"],["232","233"],["234","235"],["236","237"],["238","239"],["240","241"],["242","243"],["244","245"],["246","247"],["248","249"],["250","251"],["252","253"],["254","255"],["256","257"],["258","259"],["260","261"],"no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"messageId":"266","fix":"267","desc":"268"},{"messageId":"269","fix":"270","desc":"271"},{"messageId":"266","fix":"272","desc":"268"},{"messageId":"269","fix":"273","desc":"271"},{"messageId":"266","fix":"274","desc":"268"},{"messageId":"269","fix":"275","desc":"271"},{"messageId":"266","fix":"276","desc":"268"},{"messageId":"269","fix":"277","desc":"271"},{"messageId":"266","fix":"278","desc":"268"},{"messageId":"269","fix":"279","desc":"271"},{"messageId":"266","fix":"280","desc":"268"},{"messageId":"269","fix":"281","desc":"271"},{"messageId":"266","fix":"282","desc":"268"},{"messageId":"269","fix":"283","desc":"271"},{"messageId":"266","fix":"284","desc":"268"},{"messageId":"269","fix":"285","desc":"271"},{"messageId":"266","fix":"286","desc":"268"},{"messageId":"269","fix":"287","desc":"271"},{"messageId":"266","fix":"288","desc":"268"},{"messageId":"269","fix":"289","desc":"271"},{"messageId":"266","fix":"290","desc":"268"},{"messageId":"269","fix":"291","desc":"271"},{"messageId":"266","fix":"292","desc":"268"},{"messageId":"269","fix":"293","desc":"271"},{"messageId":"266","fix":"294","desc":"268"},{"messageId":"269","fix":"295","desc":"271"},{"messageId":"266","fix":"296","desc":"268"},{"messageId":"269","fix":"297","desc":"271"},{"messageId":"266","fix":"298","desc":"268"},{"messageId":"269","fix":"299","desc":"271"},{"messageId":"266","fix":"300","desc":"268"},{"messageId":"269","fix":"301","desc":"271"},{"messageId":"266","fix":"302","desc":"268"},{"messageId":"269","fix":"303","desc":"271"},{"messageId":"266","fix":"304","desc":"268"},{"messageId":"269","fix":"305","desc":"271"},{"messageId":"266","fix":"306","desc":"268"},{"messageId":"269","fix":"307","desc":"271"},{"messageId":"266","fix":"308","desc":"268"},{"messageId":"269","fix":"309","desc":"271"},{"messageId":"266","fix":"310","desc":"268"},{"messageId":"269","fix":"311","desc":"271"},{"messageId":"266","fix":"312","desc":"268"},{"messageId":"269","fix":"313","desc":"271"},{"messageId":"266","fix":"314","desc":"268"},{"messageId":"269","fix":"315","desc":"271"},{"messageId":"266","fix":"316","desc":"268"},{"messageId":"269","fix":"317","desc":"271"},{"messageId":"266","fix":"318","desc":"268"},{"messageId":"269","fix":"319","desc":"271"},{"messageId":"266","fix":"320","desc":"268"},{"messageId":"269","fix":"321","desc":"271"},{"messageId":"266","fix":"322","desc":"268"},{"messageId":"269","fix":"323","desc":"271"},{"messageId":"266","fix":"324","desc":"268"},{"messageId":"269","fix":"325","desc":"271"},"Update the dependencies array to be: [CurrSentInd, MachineStateHandlerWrapper, StateMachineState, prevSummaryUnderlines, summary_json]",{"range":"326","text":"327"},"Update the dependencies array to be: [StateMachineState, boldStateHandler, summary_json]",{"range":"328","text":"329"},"removeEscape",{"range":"330","text":"331"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"332","text":"333"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"334","text":"331"},{"range":"335","text":"333"},{"range":"336","text":"331"},{"range":"337","text":"333"},{"range":"338","text":"331"},{"range":"339","text":"333"},{"range":"340","text":"331"},{"range":"341","text":"333"},{"range":"342","text":"331"},{"range":"343","text":"333"},{"range":"344","text":"331"},{"range":"345","text":"333"},{"range":"346","text":"331"},{"range":"347","text":"333"},{"range":"348","text":"331"},{"range":"349","text":"333"},{"range":"350","text":"331"},{"range":"351","text":"333"},{"range":"352","text":"331"},{"range":"353","text":"333"},{"range":"354","text":"331"},{"range":"355","text":"333"},{"range":"356","text":"331"},{"range":"357","text":"333"},{"range":"358","text":"331"},{"range":"359","text":"333"},{"range":"360","text":"331"},{"range":"361","text":"333"},{"range":"362","text":"331"},{"range":"363","text":"333"},{"range":"364","text":"331"},{"range":"365","text":"333"},{"range":"366","text":"331"},{"range":"367","text":"333"},{"range":"368","text":"331"},{"range":"369","text":"333"},{"range":"370","text":"331"},{"range":"371","text":"333"},{"range":"372","text":"331"},{"range":"373","text":"333"},{"range":"374","text":"331"},{"range":"375","text":"333"},{"range":"376","text":"331"},{"range":"377","text":"333"},{"range":"378","text":"331"},{"range":"379","text":"333"},{"range":"380","text":"331"},{"range":"381","text":"333"},{"range":"382","text":"331"},{"range":"383","text":"333"},{"range":"384","text":"331"},{"range":"385","text":"333"},{"range":"386","text":"331"},{"range":"387","text":"333"},[7735,7749],"[CurrSentInd, MachineStateHandlerWrapper, StateMachineState, prevSummaryUnderlines, summary_json]",[8706,8739],"[StateMachineState, boldStateHandler, summary_json]",[3384,3385],"",[3384,3384],"\\",[3391,3392],[3391,3391],[3406,3407],[3406,3406],[3419,3420],[3419,3419],[4065,4066],[4065,4065],[4078,4079],[4078,4078],[4093,4094],[4093,4093],[4104,4105],[4104,4104],[4857,4858],[4857,4857],[4868,4869],[4868,4868],[4883,4884],[4883,4883],[4895,4896],[4895,4895],[5187,5188],[5187,5187],[5198,5199],[5198,5198],[5213,5214],[5213,5213],[5230,5231],[5230,5230],[5480,5481],[5480,5480],[5491,5492],[5491,5491],[5506,5507],[5506,5506],[5519,5520],[5519,5519],[5814,5815],[5814,5814],[5831,5832],[5831,5831],[5846,5847],[5846,5846],[5859,5860],[5859,5859],[6224,6225],[6224,6224],[6241,6242],[6241,6241],[6256,6257],[6256,6256],[6264,6265],[6264,6264]]