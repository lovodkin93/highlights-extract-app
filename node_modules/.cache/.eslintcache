[{"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js":"1","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js":"2","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js":"3","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js":"4","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js":"5","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js":"6","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js":"7","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js":"8","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js":"9","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js":"10","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js":"11","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js":"12","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js":"13","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation_utils.js":"14","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial.js":"15","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial_utils.js":"16","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\TutorialCard.js":"17","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\mturk_utils.js":"18","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions_short.js":"19"},{"size":706,"mtime":1648483402725,"results":"20","hashOfConfig":"21"},{"size":375,"mtime":1645787016766,"results":"22","hashOfConfig":"21"},{"size":60662,"mtime":1652779668513,"results":"23","hashOfConfig":"21"},{"size":69938,"mtime":1651915569934,"results":"24","hashOfConfig":"21"},{"size":56512,"mtime":1652779837528,"results":"25","hashOfConfig":"21"},{"size":2508,"mtime":1647878770931,"results":"26","hashOfConfig":"21"},{"size":8185,"mtime":1648741136201,"results":"27","hashOfConfig":"21"},{"size":11783,"mtime":1652295216415,"results":"28","hashOfConfig":"21"},{"size":4915,"mtime":1651131960836,"results":"29","hashOfConfig":"21"},{"size":6993,"mtime":1650971391596,"results":"30","hashOfConfig":"21"},{"size":439,"mtime":1646496707735,"results":"31","hashOfConfig":"21"},{"size":2509,"mtime":1650877451472,"results":"32","hashOfConfig":"21"},{"size":2272,"mtime":1648137057484,"results":"33","hashOfConfig":"21"},{"size":3506,"mtime":1650997162033,"results":"34","hashOfConfig":"21"},{"size":31168,"mtime":1651915576092,"results":"35","hashOfConfig":"21"},{"size":8868,"mtime":1650450243784,"results":"36","hashOfConfig":"21"},{"size":7302,"mtime":1650449600573,"results":"37","hashOfConfig":"21"},{"size":5389,"mtime":1652779681351,"results":"38","hashOfConfig":"21"},{"size":4163,"mtime":1652432194436,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"iqi5he",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":109,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"43"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"43"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"43"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js",[],[],["110","111"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js",["112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js",["221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],[],"import { MachineStateHandler } from './Annotation_event_handlers';\r\nimport { add_text_to_GuidedAnnotationInfoAlert, string_to_span } from './GuidedAnnotation_utils'\r\n\r\nimport { useState, useEffect, useRef } from 'react'\r\nimport Annotation from './Annotation';\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport Fade from 'react-bootstrap/Fade'\r\nimport { Markup } from 'interweave';\r\nimport { statSync } from 'fs';\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst GuidedAnnotation = ({isPunct,\r\n                          handleErrorOpen, handleErrorClose,\r\n                          doc_json, setDocJson,\r\n                          summary_json, setSummaryJson,\r\n                          all_lemma_match_mtx, setAllLemmaMtx,\r\n                          important_lemma_match_mtx, setImportantLemmaMtx,\r\n                          doc_paragraph_breaks, setDocParagraphBreaks,\r\n                          boldState, setBoldState,\r\n                          oldAlignmentState, setOldAlignmentState,\r\n                          StateMachineState, SetStateMachineState,\r\n                          error_message, setErrorMessage,\r\n                          CurrSentInd, SetCurrSentInd,\r\n                          InfoMessage, SetInfoMessage,\r\n                          AlignmentCount, SetAlignmentCount,\r\n                          prevStateMachineState, setPrevStateMachineState,\r\n                          prevSummarySpanHighlights, setPrevSummarySpanHighlights,\r\n                          prevDocSpanHighlights, setPrevDocSpanHighlights,\r\n                          prevSummaryJsonRevise, setPrevSummaryJsonRevise,\r\n                          prevDocJsonRevise, setPrevDocJsonRevise,\r\n                          prevCurrSentInd, setPrevCurrSentInd,\r\n                          DocOnMouseDownID, SetDocOnMouseDownID,\r\n                          SummaryOnMouseDownID, SetSummaryOnMouseDownID,\r\n                          docOnMouseDownActivated, setDocOnMouseDownActivated,\r\n                          summaryOnMouseDownActivated, setSummaryOnMouseDownActivated,\r\n                          hoverActivatedId, setHoverActivatedId,\r\n                          hoverActivatedDocOrSummary, setHoverActivatedDocOrSummary,\r\n                          sliderBoldStateActivated, setSliderBoldStateActivated,\r\n                          guided_annotation_messages, guided_annotation_info_messages,\r\n                          guiding_msg, setGuidingMsg,\r\n                          guiding_msg_type, setGuidingMsgType,\r\n                          curr_alignment_guiding_msg_id, setCurrAlignmentGuidingMsgId,\r\n                          guiding_info_msg, setGuidingInfoMsg,\r\n                          guided_unhighlight, setGuidedUnhighlight,\r\n                          is_good_alignment, setIsGoodAlignment,\r\n                          setCompleted, resetGuidedAnnotation,\r\n                          g_show_hint, g_setShowHint,\r\n                          g_hint_msg, g_setHintMsg, \r\n                          guided_annotation_hints, guided_annotation_strike_messages,\r\n                          noAlignModalShow, setNoAlignModalShow,\r\n                          noAlignApproved, setNoAlignApproved,\r\n                          setOpeningModalShow,\r\n                          setPrevCurrAlignmentGuidingMsgId, prev_curr_alignment_guiding_msg_id,\r\n                          setPrevGuidingInfoMsg, prev_guiding_info_msg,\r\n                          setPrevGuiderMsg, prev_Guider_msg,\r\n                          g_guided_annotation_history, g_setGuidedAnnotationHistory,\r\n                          g_strikes_counter, g_setStrikesCounter,\r\n                          g_answer_modal_msg, g_setAnswerModalMsg,\r\n                          g_answer_words_to_glow, g_setAnswerWordsToGlow,\r\n                          g_Guider_msg, g_setGuiderMsg,\r\n                          showAlert, setShowAlert,\r\n                          SUMMARY_WORD_CNT_THR,\r\n                          SubmitModalShow, setSubmitModalShow\r\n\r\n\r\n\r\n                        }) => {\r\n    const MAX_ERR_CNT = 0 // number of maximum permitted wrong attempts before giving the answer \r\n    const [FinishedModalShow, setFinishedModalShow] = useState(false);\r\n    const [showWhereNavbar, setShowWhereNavbar] = useState(false);\r\n    const [g_open_hint, g_setOpenHint] = useState(false)\r\n    const [g_with_glow_hint, g_setWithGlowHint] = useState(false)\r\n    \r\n\r\n    \r\n    const update_guiding_msg = (new_msg_type, msg_json) => {\r\n      // message didn't close before new message and they are of the same kind (so someone might miss the change)\r\n      if(guiding_msg_type === new_msg_type){\r\n        setGuidingMsgType(\"closed\")\r\n        window.setTimeout(()=>{setGuidingMsgType(new_msg_type);setGuidingMsg(msg_json);},50)\r\n      }\r\n      else {\r\n        setGuidingMsgType(new_msg_type);\r\n        setGuidingMsg(msg_json);\r\n      }\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    const toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n      if (tkn_ids.length===0) {\r\n        return\r\n      }\r\n\r\n      const isSummarySpanOkDict = isSummarySpanOk([], false, false)\r\n      \r\n      if(!isSummarySpanOkDict[\"summary_span_ok\"] && StateMachineState !== \"REVISE HOVER\") {\r\n        if (isSummarySpanOkDict[\"highlighted_tkn_ids\"].length===0) { // nothing highlighted in summary\r\n          // setGuidingMsg(guided_annotation_messages[\"empty_summary_span_msg\"])\r\n          // setGuidingMsgType(\"danger\")\r\n\r\n          update_guiding_msg(\"danger\", guided_annotation_messages[\"empty_summary_span_msg\"])\r\n          g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":\"summary_span\", \"problem\":\"short\", \"chosen_span_id\":\"-1\", \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"], \"gold_tkn_ids\":[]}]))\r\n          \r\n          g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n          g_setShowHint(false)\r\n        } else if (isSummarySpanOkDict[\"chosen_span_id\"]===undefined){\r\n          // setGuidingMsg(guided_annotation_messages[\"default_too_short_summary_msg\"])\r\n          // setGuidingMsgType(\"danger\")\r\n\r\n          update_guiding_msg(\"danger\", guided_annotation_messages[\"default_too_short_summary_msg\"])\r\n          g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":\"summary_span\", \"problem\":\"short\", \"chosen_span_id\":\"-1\", \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"], \"gold_tkn_ids\":[]}]))\r\n\r\n          g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n          g_setShowHint(false)\r\n        } else {\r\n          let gold_tkns = guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_summary_spans\"][isSummarySpanOkDict[\"chosen_span_id\"]]\r\n          gold_tkns = gold_tkns.map((span) => {return string_to_span(span)})\r\n          update_error_message(gold_tkns, isSummarySpanOkDict[\"highlighted_tkn_ids\"], isSummarySpanOkDict[\"chosen_span_id\"], false)\r\n        }\r\n        return\r\n      }\r\n\r\n      const isAlignmentOkDict = isAlignmentOk(tkn_ids, turn_on, turn_off);\r\n      if (isAlignmentOkDict[\"alignment_ok\"] && StateMachineState !== \"REVISE HOVER\") {\r\n        if (Object.keys(guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_alignment_msg\"][curr_alignment_guiding_msg_id]).includes(\"text\")) {\r\n          // setGuidingMsg(guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_alignment_msg\"][curr_alignment_guiding_msg_id])\r\n          update_guiding_msg(\"success\", guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_alignment_msg\"][curr_alignment_guiding_msg_id])\r\n          setGuidingInfoMsg(guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_alignment_msg\"][curr_alignment_guiding_msg_id])\r\n        } else {\r\n          // setGuidingMsg(guided_annotation_messages[\"default_good_alignment_msg\"])\r\n          update_guiding_msg(\"success\", guided_annotation_messages[\"default_good_alignment_msg\"])\r\n          setGuidingInfoMsg(guided_annotation_messages[\"default_good_alignment_msg\"])\r\n        }\r\n        // setGuidingMsgType(\"success\");\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false);\r\n        g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"success\", \"sent_id\":CurrSentInd, \"type\":\"doc_span\", \"chosen_span_id\":curr_alignment_guiding_msg_id, \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"]}]))\r\n        // setIsGoodAlignment(true);\r\n      }\r\n      else if (StateMachineState !== \"REVISE HOVER\") {\r\n        // updating the info message\r\n        if (Object.keys(guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][curr_alignment_guiding_msg_id]).includes(\"text\")) {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][curr_alignment_guiding_msg_id])\r\n          if(g_Guider_msg[\"type\"]!==\"reveal-answer\" && g_Guider_msg[\"where\"]!==\"doc\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][curr_alignment_guiding_msg_id][\"text\"]})\r\n          }\r\n        } else {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"default_find_alignment\"])\r\n          if(g_Guider_msg[\"type\"]!==\"reveal-answer\" && g_Guider_msg[\"where\"]!==\"doc\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":guided_annotation_info_messages[\"default_find_alignment\"][\"text\"]})\r\n          }\r\n        }\r\n      } \r\n\r\n\r\n      setSliderBoldStateActivated(false)\r\n      if (turn_on){\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n      } else if (turn_off){\r\n          setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false,  span_alignment_hover:false } : word))\r\n      } else {\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n      }\r\n    }\r\n  \r\n    toggleDocSpanHighlight.defaultProps = {\r\n      turn_on: false,\r\n      turn_off: false\r\n    }\r\n  \r\n  \r\n    \r\n  \r\n    const toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n       // if no change was done to the summary - no need to update\r\n      if(tkn_ids.length===0) {\r\n        return\r\n      }\r\n\r\n      const isSummarySpanOkDict = isSummarySpanOk(tkn_ids, turn_on, turn_off)\r\n      if(isSummarySpanOkDict[\"summary_span_ok\"]) {\r\n        // updating the success alert\r\n        if (Object.keys(guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_summary_span_msg\"][isSummarySpanOkDict[\"chosen_span_id\"]]).includes(\"text\")) {\r\n          // setGuidingMsg(guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_summary_span_msg\"][isSummarySpanOkDict[\"chosen_span_id\"]])\r\n          update_guiding_msg(\"success\", guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_summary_span_msg\"][isSummarySpanOkDict[\"chosen_span_id\"]])\r\n\r\n        } else {\r\n          // setGuidingMsg(guided_annotation_messages[\"default_good_summary_span_msg\"]) \r\n          update_guiding_msg(\"success\", guided_annotation_messages[\"default_good_summary_span_msg\"])\r\n\r\n        }\r\n        // setGuidingMsgType(\"success\");\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false);\r\n        g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"success\", \"sent_id\":CurrSentInd, \"type\":\"summary_span\", \"chosen_span_id\":isSummarySpanOkDict[\"chosen_span_id\"], \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"]}]))\r\n        setCurrAlignmentGuidingMsgId(isSummarySpanOkDict[\"chosen_span_id\"])\r\n\r\n\r\n        // updating the info message\r\n        // console.log(`CurrSentInd:${CurrSentInd}`)\r\n        if (Object.keys(guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][isSummarySpanOkDict[\"chosen_span_id\"]]).includes(\"text\")) {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][isSummarySpanOkDict[\"chosen_span_id\"]])\r\n          if(g_Guider_msg[\"where\"]!==\"doc\") {\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][isSummarySpanOkDict[\"chosen_span_id\"]][\"text\"]})\r\n          }\r\n        } else {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"default_find_alignment\"])\r\n          if(g_Guider_msg[\"where\"]!==\"doc\") {\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":guided_annotation_info_messages[\"default_find_alignment\"][\"text\"]})\r\n          }\r\n        }\r\n      } \r\n      else {\r\n        // updating the info message\r\n        const guiding_info_sent_id = ([\"START\", \"SENTENCE END\"].includes(StateMachineState)) ? CurrSentInd+1 : CurrSentInd\r\n        if (Object.keys(guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"]).includes(\"text\")) {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"])\r\n          if(g_Guider_msg[\"type\"]!==\"reveal-answer\" && g_Guider_msg[\"where\"]!==\"summary\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"][\"text\"]})\r\n          }\r\n        } else {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"default_choose_summary_span\"])\r\n          if(g_Guider_msg[\"type\"]!==\"reveal-answer\" && g_Guider_msg[\"where\"]!==\"summary\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":guided_annotation_info_messages[\"default_choose_summary_span\"][\"text\"]})\r\n          }\r\n        }\r\n\r\n        // if the span/alignment were good - updating it.\r\n        setIsGoodAlignment(false)\r\n        setCurrAlignmentGuidingMsgId(\"-1\")\r\n      }\r\n\r\n\r\n      setSliderBoldStateActivated(false)\r\n      if (turn_on){\r\n        setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n      } else if (turn_off){\r\n        setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false,  span_alignment_hover:false } : word));\r\n      } else {\r\n        setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n      }\r\n    }\r\n  \r\n    toggleSummarySpanHighlight.defaultProps = {\r\n      turn_on: false,\r\n      turn_off: false\r\n    }\r\n  \r\n    const approveHighlightHandler = () => {\r\n      const doc_tkn_ids = doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));\r\n  \r\n  \r\n      const summary_tkn_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      setSummaryJson(summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));    \r\n   \r\n    }\r\n  \r\n    const StartReviseStateHandler = (isBackBtn) => {\r\n      if (isBackBtn){\r\n        setDocJson(doc_json.map((word, ind) => {return {...word, all_highlighted: prevDocJsonRevise[ind].all_highlighted, span_highlighted: prevDocJsonRevise[ind].span_highlighted, alignment_id: prevDocJsonRevise[ind].alignment_id}}))\r\n        setSummaryJson(summary_json.map((word, ind) => {return {...word, all_highlighted: prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: prevSummaryJsonRevise[ind].span_highlighted, alignment_id: prevSummaryJsonRevise[ind].alignment_id}}))\r\n      } else{\r\n        setPrevStateMachineState(StateMachineState);\r\n        setPrevDocSpanHighlights(doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n        setPrevSummarySpanHighlights(summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n        setPrevCurrSentInd(CurrSentInd)\r\n        setPrevCurrAlignmentGuidingMsgId(curr_alignment_guiding_msg_id)\r\n        setPrevGuidingInfoMsg(guiding_info_msg)\r\n        setPrevGuiderMsg(g_Guider_msg)\r\n\r\n\r\n        setDocJson(doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n        setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      }\r\n      SetCurrSentInd(-1)\r\n    }\r\n  \r\n    const ExitReviseHandler = () => {\r\n      setDocJson(doc_json.map((word, ind) => prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n      setSummaryJson(summary_json.map((word, ind) => prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n      const prev_state = prevStateMachineState;\r\n      SetStateMachineState(prevStateMachineState);\r\n      \r\n      const prev_current_sent_id = prevCurrSentInd\r\n      SetCurrSentInd(prev_current_sent_id)\r\n      \r\n      const prev_guiding_msg_id = prev_curr_alignment_guiding_msg_id\r\n      setCurrAlignmentGuidingMsgId(prev_guiding_msg_id) \r\n\r\n      setGuidingInfoMsg(prev_guiding_info_msg)\r\n      g_setGuiderMsg(prev_Guider_msg)\r\n      g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n      setPrevCurrAlignmentGuidingMsgId(\"-1\")\r\n      setPrevCurrSentInd(-1)\r\n      setPrevStateMachineState(\"\");\r\n      setPrevSummarySpanHighlights([]);\r\n      setPrevDocSpanHighlights([]);\r\n      return prev_state\r\n    }\r\n  \r\n    const RemoveAlignmentId = (word, chosen_align_id) => {\r\n      const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n      return new_alignment_id;\r\n    }\r\n  \r\n    const ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n      setPrevSummaryJsonRevise(summary_json);\r\n      setPrevDocJsonRevise(doc_json);\r\n  \r\n      const chosen_align_id = (clickedWordInfo[0] === 'doc') ? doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n      summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n  \r\n      setSummaryJson(summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n      setDocJson(doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    \r\n      const chosen_align_currSentId = summary_json.filter((word) => {return word.alignment_id.includes(chosen_align_id)})[0].sent_id\r\n      SetCurrSentInd(chosen_align_currSentId)  \r\n\r\n\r\n\r\n      \r\n      \r\n      const gold_mentions = guided_annotation_messages[\"goldMentions\"][chosen_align_currSentId]\r\n\r\n      let highlighted_tkn_ids = summary_json.filter((word) => {return word.alignment_id.includes(chosen_align_id)}).map((word) => {return word.tkn_id})\r\n      highlighted_tkn_ids = highlighted_tkn_ids.filter((tkn_id) => {return !isPunct(summary_json.filter((word) => {return word.tkn_id===tkn_id})[0].word)}) // ignore punctuation  \r\n      highlighted_tkn_ids = highlighted_tkn_ids.sort(function(a, b) {return a - b;}) // order    \r\n      let chosen_span_id = Object.keys(gold_mentions[\"span_indicating_tkns\"]).filter((key) => {return gold_mentions[\"span_indicating_tkns\"][key].some((span) => hasSubArray(highlighted_tkn_ids, string_to_span(span)))})\r\n      if(chosen_span_id.length===0){\r\n        console.log(\"zero!!!\")\r\n      }\r\n      setCurrAlignmentGuidingMsgId(chosen_span_id[0])\r\n      \r\n      \r\n      // console.log(`AVIVSL:${JSON.stringify(chosen_span_id)}`)\r\n      // setPrevCurrAlignmentGuidingMsgId, prev_curr_alignment_guiding_msg_id\r\n\r\n\r\n\r\n    }\r\n  \r\n  \r\n    const SetSummaryShadow = (sent_id) => {\r\n      setSummaryJson(summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n    }\r\n  \r\n  \r\n    const SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n      setSummaryJson(\r\n        summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n        (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n        )\r\n    }\r\n  \r\n    const SetDocBoldface = (tkn_ids) => {\r\n      setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n    }\r\n  \r\n  \r\n  \r\n  \r\n    const checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n      const which_match_mtx = important_lemma_match_mtx;\r\n      const matching_summary_ids = summary_ids.filter((summary_id) => {return all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n      return matching_summary_ids.length > 0\r\n    }\r\n  \r\n    const boldStateHandler = (event, newValue) => {\r\n      if (event !== undefined){\r\n        setSliderBoldStateActivated(true)\r\n      }\r\n      if (!newValue){\r\n        setBoldState(\"none\");\r\n        SetDocBoldface([]);\r\n      } else {\r\n        setBoldState(\"sent\");\r\n        const isSpan = false;\r\n        const summary_ids = summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n        const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n        SetDocBoldface(tkn_ids);\r\n      }\r\n    }\r\n  \r\n  \r\n    const SetDocOldHighlights = (tkn_ids) => {\r\n      setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n    }\r\n  \r\n    const SetSummaryOldHighlights = (tkn_ids) => {\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n    }\r\n  \r\n    const FindDocAlignmentPerSent = (sent_ind) => {\r\n      let curr_sent_alignment_ids = summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n      curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n      const doc_ids = doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n      return doc_ids\r\n    }\r\n  \r\n  \r\n    const oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n  \r\n      if (newValue=='1'){\r\n        setOldAlignmentState(\"none\");\r\n        SetDocOldHighlights([]);\r\n        SetSummaryOldHighlights([]);\r\n      } else {\r\n        setOldAlignmentState(\"all\");\r\n        const doc_ids = doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n        const summary_ids = summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n        SetDocOldHighlights(doc_ids);\r\n        SetSummaryOldHighlights(summary_ids);\r\n      }\r\n    }\r\n  \r\n    oldAlignmentStateHandler.defaultProps = {\r\n      sent_ind: -1\r\n    }\r\n  \r\n  \r\n  \r\n    const hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n      // onMouseEnter for \"REVISE HOVER\"\r\n      if (inOrOut === \"in\" && StateMachineState===\"REVISE HOVER\") { \r\n        setDocJson(doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n        setSummaryJson(summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      } \r\n      // onMouseLeave for \"REVISE HOVER\"\r\n      else if (inOrOut === \"out\" && StateMachineState===\"REVISE HOVER\") { \r\n        setDocJson(doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n        setSummaryJson(summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      }\r\n      // onMouseLeave for all the alignments choosing states\r\n      else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n        setDocJson(doc_json.map((word) => {return {...word, red_color:false}}))\r\n      }\r\n  \r\n    }\r\n  \r\n    const isRedLettered = (summary_tkn_id) => {\r\n      if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > CurrSentInd}).length !== 0)){\r\n        return false\r\n      } else if ((summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))) {\r\n        return false\r\n      } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n        return true\r\n      }\r\n  \r\n    }\r\n  \r\n  \r\n  \r\n    const MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n      // no alignment\r\n      if ((typeof forceState !== 'string') && (![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) && (doc_json.filter((word) => {return word.span_highlighted}).length === 0) && (StateMachineState!==\"START\") && !noAlignApproved) {\r\n        setNoAlignModalShow(true)\r\n        return\r\n      }\r\n      setNoAlignApproved(false)\r\n\r\n\r\n\r\n\r\n      if((forceState === undefined)  && ![\"REVISE HOVER\", \"START\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n        // check if span is ok\r\n        const isSummarySpanOkDict = isSummarySpanOk([], false, false)\r\n        // console.log(`state: ${StateMachineState} and ${JSON.stringify(isSummarySpanOkDict)}`)\r\n        if(!isSummarySpanOkDict[\"summary_span_ok\"]) {\r\n          if (isSummarySpanOkDict[\"highlighted_tkn_ids\"].length===0 && StateMachineState !== \"REVISE HOVER\") { // nothing highlighted in summary\r\n            // setGuidingMsg(guided_annotation_messages[\"empty_summary_span_msg\"])\r\n            // setGuidingMsgType(\"danger\")\r\n            update_guiding_msg(\"danger\", guided_annotation_messages[\"empty_summary_span_msg\"])\r\n            g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":\"summary_span\", \"problem\":\"short\", \"chosen_span_id\":\"-1\", \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"], \"gold_tkn_ids\":[]}]))\r\n\r\n          } else if (isSummarySpanOkDict[\"chosen_span_id\"]===undefined){\r\n            // setGuidingMsg(guided_annotation_messages[\"default_too_short_summary_msg\"])\r\n            // setGuidingMsgType(\"danger\")\r\n            update_guiding_msg(\"danger\", guided_annotation_messages[\"default_too_short_summary_msg\"])\r\n            g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":\"summary_span\", \"problem\":\"short\", \"chosen_span_id\":\"-1\", \"highlighted_tkn_ids\":isSummarySpanOkDict[\"highlighted_tkn_ids\"], \"gold_tkn_ids\":[]}]))\r\n            g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n            g_setShowHint(false)\r\n          } else {\r\n            let gold_tkns = guided_annotation_messages[\"goldMentions\"][CurrSentInd][\"good_summary_spans\"][isSummarySpanOkDict[\"chosen_span_id\"]]\r\n            gold_tkns = gold_tkns.map((span) => {return string_to_span(span)})\r\n            update_error_message(gold_tkns, isSummarySpanOkDict[\"highlighted_tkn_ids\"], isSummarySpanOkDict[\"chosen_span_id\"], false)\r\n          }\r\n          return\r\n        }\r\n      }\r\n      \r\n      // check if alignment is good\r\n      if (forceState === undefined && ![\"START\", \"REVISE HOVER\"].includes(StateMachineState)) { \r\n        const isAlignmentOkDict = isAlignmentOk();\r\n        if (isAlignmentOkDict[\"alignment_ok\"]) {\r\n          // setGuidingMsg(guided_annotation_messages[\"default_good_alignment_msg\"]) // AVIVSL: add custom success messages\r\n          // setGuidingMsgType(\"success\");\r\n          setCurrAlignmentGuidingMsgId(\"-1\");\r\n          g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n          g_setShowHint(false);\r\n        } else {\r\n          update_error_message(isAlignmentOkDict[\"gold_align_tkns\"], isAlignmentOkDict[\"highlighted_doc_tkns\"], curr_alignment_guiding_msg_id, true);\r\n          return\r\n        }\r\n      }\r\n\r\n      // check if span is ok (for the case when the summary span was changed after the alignment was approved)\r\n      if (forceState === undefined && ![\"START\", \"REVISE HOVER\"].includes(StateMachineState)) { \r\n        const isSummarySpanOkDict = isSummarySpanOk([], false, false)\r\n      \r\n        if(!isSummarySpanOkDict[\"summary_span_ok\"]) {\r\n          // setGuidingMsg({\"text\":\"Summary highlighting was changed and is not aligned to the document highlighting anymore.\", \"title\":\"Summary highlighting changed and is not good\"})\r\n          // setGuidingMsgType(\"danger\")\r\n          update_guiding_msg(\"danger\", {\"text\":\"Summary highlighting was changed and is not aligned to the document highlighting anymore.\", \"title\":\"Summary highlighting changed and is not good\"})\r\n\r\n          return\r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n\r\n      // info messages(alerts)\r\n      if (forceState===\"REVISE HOVER\" && StateMachineState!==\"REVISE CLICKED\"){\r\n        setGuidingInfoMsg(guided_annotation_info_messages[\"Revise Hover\"])\r\n        g_setGuiderMsg({\"type\":\"\", \"where\":\"\", \"text\":\"\"})\r\n      } \r\n      else if (forceState===undefined && StateMachineState===\"REVISE HOVER\") {\r\n        setGuidingInfoMsg(guided_annotation_info_messages[\"Revise Clicked\"])\r\n        g_setGuiderMsg({\"type\":\"\", \"where\":\"\", \"text\":\"\"})\r\n      }\r\n      else if (forceState===undefined && StateMachineState===\"REVISE CLICKED\") {\r\n        setGuidingInfoMsg(guided_annotation_info_messages[\"Revise Confirmed Revision\"])\r\n        g_setGuiderMsg({\"type\":\"\", \"where\":\"\", \"text\":\"\"})\r\n      }\r\n      else if (forceState===\"REVISE HOVER\" && StateMachineState===\"REVISE CLICKED\") {\r\n        setGuidingInfoMsg(guided_annotation_info_messages[\"Revise Clicked BACK\"])\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n        g_setGuiderMsg({\"type\":\"\", \"where\":\"\", \"text\":\"\"})\r\n      }\r\n      else if (forceState===undefined) {\r\n        const guiding_info_sent_id = ([\"START\", \"SENTENCE END\"].includes(StateMachineState)) ? CurrSentInd+1 : CurrSentInd\r\n        if (Object.keys(guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"]).includes(\"text\")) {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"])\r\n          if(g_Guider_msg[\"where\"]!==\"summary\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":guided_annotation_info_messages[\"custom_messages\"][guiding_info_sent_id][\"choose_summary_span\"][\"text\"]})\r\n          }\r\n        } else {\r\n          setGuidingInfoMsg(guided_annotation_info_messages[\"default_choose_summary_span\"])\r\n          if(g_Guider_msg[\"where\"]!==\"summary\"){\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":guided_annotation_info_messages[\"default_choose_summary_span\"][\"text\"]})\r\n          }\r\n        }\r\n      }\r\n      //returning to alignment not being ok (because no alignment)\r\n      setIsGoodAlignment(false)\r\n\r\n      // updating the state (if there is no alignment error)\r\n      setSliderBoldStateActivated(false);\r\n      MachineStateHandler(summary_json,\r\n                            StateMachineState, SetStateMachineState,\r\n                            SetInfoMessage, handleErrorOpen, isPunct,\r\n                            CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                            AlignmentCount, SetAlignmentCount,\r\n                            approveHighlightHandler,\r\n                            clickedWordInfo, forceState, \r\n                            StartReviseStateHandler, ExitReviseHandler,\r\n                            ReviseChooseAlignHandler, \r\n                            isBackBtn,\r\n                            setPrevSummaryJsonRevise, setPrevDocJsonRevise,\r\n                           );\r\n    }\r\n  \r\n    MachineStateHandlerWrapper.defaultProps = {\r\n      forceState: '',\r\n      clickedWordInfo: [],\r\n      isBackBtn: false\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**************************** GUIDING-RELATED FUNCTIONS ******************************/\r\n\r\n    // const string_to_span = (span_str) => {\r\n    //   const sub_strings = span_str.split(\";\");\r\n    //   const lims = sub_strings.map((sub_string) => sub_string.split(\"-\").map((lim) => parseInt(lim)))\r\n    //   // console.log(`lims:${JSON.stringify(span_str)}`)\r\n    //   const ids = lims.map(([start, end]) => Array(end - start + 1).fill().map((_, idx) => start + idx)).flat(1)\r\n    //   return ids.sort(function(a, b) {return a - b;})\r\n    // }\r\n\r\n    const intersection = (arr1, arr2) => {\r\n      return arr1.filter((elem) => {return arr2.includes(elem)})\r\n    }\r\n\r\n\r\n    const isSummarySpanOk = (tkn_ids, turn_on, turn_off) => {\r\n\r\n      const gold_mentions = guided_annotation_messages[\"goldMentions\"][CurrSentInd]\r\n\r\n      let highlighted_tkn_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => word.tkn_id)\r\n      highlighted_tkn_ids = (turn_on) ? highlighted_tkn_ids.concat(tkn_ids) : highlighted_tkn_ids\r\n      highlighted_tkn_ids = (turn_off) ? highlighted_tkn_ids.filter((tkn) => {return (turn_off && !tkn_ids.includes(tkn))}) : highlighted_tkn_ids\r\n      highlighted_tkn_ids = [...new Set(highlighted_tkn_ids)] // remove duplicates\r\n      highlighted_tkn_ids = highlighted_tkn_ids.filter((tkn_id) => {return !isPunct(summary_json.filter((word) => {return word.tkn_id===tkn_id})[0].word)}) // ignore punctuation  \r\n      highlighted_tkn_ids = highlighted_tkn_ids.sort(function(a, b) {return a - b;}) // order    \r\n      let chosen_span_id = Object.keys(gold_mentions[\"span_indicating_tkns\"]).filter((key) => {return gold_mentions[\"span_indicating_tkns\"][key].some((span) => hasSubArray(highlighted_tkn_ids, string_to_span(span)))})\r\n\r\n      if (chosen_span_id.length===0){\r\n        return {\"summary_span_ok\":false, \"chosen_span_id\":undefined, \"highlighted_tkn_ids\":highlighted_tkn_ids}\r\n      } else {\r\n        chosen_span_id = chosen_span_id[0]\r\n      }\r\n\r\n      const good_summary_spans = Object.keys(gold_mentions[\"good_summary_spans\"][chosen_span_id]).map((key) => {return string_to_span(gold_mentions[\"good_summary_spans\"][chosen_span_id][key])})\r\n      const str_good_summary_spans = good_summary_spans.map((span) => JSON.stringify(span.sort(function(a, b) {return a - b;})))\r\n\r\n      if (str_good_summary_spans.includes(JSON.stringify(highlighted_tkn_ids.sort(function(a, b) {return a - b;})))) {\r\n        return {\"summary_span_ok\":true, \"chosen_span_id\":chosen_span_id, \"highlighted_tkn_ids\":highlighted_tkn_ids}\r\n      } else {\r\n        return {\"summary_span_ok\":false, \"chosen_span_id\":chosen_span_id, \"highlighted_tkn_ids\":highlighted_tkn_ids}\r\n      }\r\n    }\r\n\r\n    const update_error_message = (gold_tkns, actual_tkns, chosen_span_id, isAlignError) => {\r\n      let actual_tkns_no_punct;\r\n      if (isAlignError) {\r\n        actual_tkns_no_punct = actual_tkns.filter((tkn) => {return !isPunct(doc_json.filter((word) => {return word.tkn_id===tkn})[0].word)})\r\n      } else {\r\n        actual_tkns_no_punct = actual_tkns.filter((tkn) => {return !isPunct(summary_json.filter((word) => {return word.tkn_id===tkn})[0].word)})\r\n      }\r\n      if (actual_tkns_no_punct.filter((tkn) => {return gold_tkns.filter((span) => {return span.includes(tkn)}).length === 0}).length !== 0) {\r\n        update_excess_message(gold_tkns, actual_tkns_no_punct, chosen_span_id, isAlignError)\r\n      } else {\r\n        update_missing_message(gold_tkns, actual_tkns_no_punct, chosen_span_id, isAlignError)\r\n      }\r\n    }\r\n\r\n    const hasSubArray = (master, sub) => {\r\n      return sub.every((i => v => i = master.indexOf(v, i) + 1)(0));\r\n    }\r\n\r\n    const update_excess_message = (gold_tkns, actual_tkns, chosen_span_id, isAlignError) => {\r\n      const msg_type_key = (isAlignError) ? \"redundant_alignment_msg\" : \"too_long_summary_msgs\" \r\n      const default_msg_key = (isAlignError) ? \"default_redundant_alignment_msg\" : \"default_too_long_summary_msg\" \r\n      \r\n      const guiding_msgs = guided_annotation_messages[\"goldMentions\"][CurrSentInd][msg_type_key][chosen_span_id]\r\n      const hint_msgs = guided_annotation_hints[\"goldMentions\"][CurrSentInd][msg_type_key][chosen_span_id]\r\n\r\n      const excess_tkns = actual_tkns.filter((tkn) => {return gold_tkns.every((span) => {return !span.includes(tkn)})}).sort(function(a, b) {return a - b;})\r\n      \r\n      g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":`${(isAlignError)? \"doc_span\":\"summary_span\"}`, \"problem\":\"long\", \"chosen_span_id\":chosen_span_id, \"highlighted_tkn_ids\":actual_tkns, \"gold_tkn_ids\":gold_tkns}]))\r\n\r\n\r\n      if (guiding_msgs.length===0){\r\n        // setGuidingMsg(guided_annotation_messages[default_msg_key])\r\n        // setGuidingMsgType(\"danger\")\r\n        update_guiding_msg(\"danger\", guided_annotation_messages[default_msg_key])\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n        return\r\n      }\r\n\r\n\r\n\r\n  \r\n      \r\n      \r\n      \r\n      const custom_message_json = guiding_msgs.filter((json_obj) => {return json_obj[\"excess_tkns\"].some((span) => {return intersection(excess_tkns, string_to_span(span)).length !==0 })})\r\n      if(custom_message_json.length !== 0) {\r\n        if(!guided_unhighlight){\r\n          setGuidedUnhighlight(true)\r\n        }\r\n        // setGuidingMsg(custom_message_json[0])\r\n        update_guiding_msg(\"danger\", custom_message_json[0])\r\n\r\n      } \r\n      else {\r\n        // setGuidingMsg(guided_annotation_messages[default_msg_key])\r\n        update_guiding_msg(\"danger\", guided_annotation_messages[default_msg_key])\r\n\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n      }\r\n      // setGuidingMsgType(\"danger\")\r\n\r\n\r\n\r\n      const custom_hint_json = hint_msgs.filter((json_obj) => {return json_obj[\"excess_tkns\"].some((span) => {return intersection(excess_tkns, string_to_span(span)).length !==0 })})\r\n      if(custom_hint_json.length !== 0) {\r\n        if(guided_unhighlight){\r\n          g_setHintMsg(custom_hint_json[0])\r\n        } else {\r\n          g_setHintMsg({\"text\":`${custom_hint_json[0][\"text\"]} ${(custom_hint_json[0][\"text\"].endsWith(\"</ol>\")) ? \"\" : \"<br/>\"} ${guided_annotation_messages[\"extra_to_excess_msgs\"][\"text\"]}`, \"title\": custom_hint_json[0][\"title\"]})\r\n          setGuidedUnhighlight(true)\r\n        }\r\n        g_setShowHint(true)\r\n      } \r\n      else {\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    const changeSummarySentHandler = ({isNext}) => {\r\n      if (isNext){\r\n        SetCurrSentInd(CurrSentInd+1)\r\n        const summary_currSent_old_highlighted_tkn_cnt = summary_json.filter((word) => {return (!isPunct(word.word) && word.sent_id===CurrSentInd && word.old_alignments)}).length // number of words in curr sentence (the one we change from) that was saved as part of an alignment\r\n        const summary_currSent_tkn_cnt = summary_json.filter((word) => {return (!isPunct(word.word) && word.sent_id===CurrSentInd)}).length // all (non-punctuation) words in curr sentence (the one we change from)\r\n  \r\n        if(summary_currSent_old_highlighted_tkn_cnt / summary_currSent_tkn_cnt > SUMMARY_WORD_CNT_THR) {\r\n          setShowAlert(\"success\")\r\n          console.log(\"good!\")\r\n        } else {\r\n          setShowAlert(\"warning\")\r\n          console.log(\"bad!\")\r\n        }\r\n      \r\n      } else {\r\n        SetCurrSentInd(CurrSentInd-1)\r\n      }\r\n      setDocJson(doc_json.map((word) => {return {...word, span_highlighted:false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted:false}}))\r\n    }\r\n\r\n\r\n    const update_missing_message = (gold_tkns, actual_tkns, chosen_span_id, isAlignError) => {\r\n\r\n      const msg_type_key = (isAlignError) ? \"missing_alignment_msg\" : \"too_short_summary_msgs\" \r\n      const default_msg_key = (isAlignError) ? \"default_missing_alignment_msg\" : \"default_too_short_summary_msg\" \r\n\r\n      const guiding_msgs = guided_annotation_messages[\"goldMentions\"][CurrSentInd][msg_type_key][chosen_span_id]\r\n      const hint_msgs = guided_annotation_hints[\"goldMentions\"][CurrSentInd][msg_type_key][chosen_span_id]\r\n\r\n      \r\n      const merged_gold_tkns = [...new Set(gold_tkns.flat(1))].sort(function(a, b) {return a - b;})\r\n      const missing_tkns = merged_gold_tkns.filter((tkn) => {return !actual_tkns.includes(tkn)})\r\n      const custom_message_json = guiding_msgs.filter((json_obj) => {return json_obj[\"missing_tkns\"].some((span) => {return intersection(missing_tkns, string_to_span(span)).length !== 0 })})\r\n\r\n\r\n      g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([{\"status\":\"error\", \"sent_id\":CurrSentInd, \"type\":`${(isAlignError)? \"doc_span\":\"summary_span\"}`, \"problem\":\"short\", \"chosen_span_id\":chosen_span_id, \"highlighted_tkn_ids\":actual_tkns, \"gold_tkn_ids\":gold_tkns}]))\r\n\r\n\r\n\r\n      if(custom_message_json.length !== 0) {\r\n        // setGuidingMsg(custom_message_json[0])\r\n        // setGuidingMsgType(\"danger\")\r\n        update_guiding_msg(\"danger\", custom_message_json[0])\r\n      } else {\r\n        // setGuidingMsg(guided_annotation_messages[default_msg_key])\r\n        // setGuidingMsgType(\"danger\")\r\n        update_guiding_msg(\"danger\", guided_annotation_messages[default_msg_key])\r\n\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n      }\r\n      \r\n      const custom_hint_json = hint_msgs.filter((json_obj) => {return json_obj[\"missing_tkns\"].some((span) => {return intersection(missing_tkns, string_to_span(span)).length !== 0 })})\r\n      if(custom_hint_json.length !== 0) {\r\n        g_setHintMsg(custom_hint_json[0])\r\n        g_setShowHint(true)\r\n      } else {\r\n        g_setHintMsg({\"text\":\"\", \"title\":\"\"})\r\n        g_setShowHint(false)\r\n      }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    const isAlignmentOk = (tkn_ids, turn_on, turn_off) => {\r\n      // const doc_tkns = doc_json.filter((word) => {return word.span_highlighted && !isPunct(word.word)}).map((word) => word.tkn_id).sort(function(a, b) {return a - b;})\r\n      \r\n      let doc_tkns = doc_json.filter((word) => {return word.span_highlighted}).map((word) => word.tkn_id)\r\n      doc_tkns = (turn_on) ? doc_tkns.concat(tkn_ids) : doc_tkns\r\n      doc_tkns = (turn_off) ? doc_tkns.filter((tkn) => {return (turn_off && !tkn_ids.includes(tkn))}) : doc_tkns\r\n      doc_tkns = [...new Set(doc_tkns)] // remove duplicates\r\n      doc_tkns = doc_tkns.filter((tkn_id) => {return !isPunct(doc_json.filter((word) => {return word.tkn_id===tkn_id})[0].word)}) // ignore punctuation    \r\n      doc_tkns = doc_tkns.sort(function(a, b) {return a - b;}) // sort\r\n\r\n      const msgs_json = guided_annotation_messages[\"goldMentions\"][CurrSentInd]\r\n\r\n      // unalignable parts\r\n      console.log(`curr_alignment_guiding_msg_id:${curr_alignment_guiding_msg_id}`)\r\n      if (msgs_json[\"doc_tkns_alignments\"][curr_alignment_guiding_msg_id].length===0) {\r\n        if (doc_tkns.length===0){\r\n          return {\"alignment_ok\":true, \"highlighted_doc_tkns\":doc_tkns, \"gold_align_tkns\":[]} \r\n        } else {\r\n          return {\"alignment_ok\":false, \"highlighted_doc_tkns\":doc_tkns, \"gold_align_tkns\":[]} \r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n      \r\n      const gold_align_tkns  = msgs_json[\"doc_tkns_alignments\"][curr_alignment_guiding_msg_id].map((span) => string_to_span(span))\r\n      if (gold_align_tkns.map((span) => JSON.stringify(span)).includes(JSON.stringify(doc_tkns))) {\r\n          return {\"alignment_ok\":true, \"highlighted_doc_tkns\":doc_tkns, \"gold_align_tkns\":gold_align_tkns} \r\n      } else {\r\n        return {\"alignment_ok\":false, \"highlighted_doc_tkns\":doc_tkns, \"gold_align_tkns\":gold_align_tkns} \r\n      }\r\n    }\r\n\r\n\r\n\r\n    const OpenHint = () => {\r\n      window.scrollTo(0, 0)\r\n      g_setOpenHint(true)\r\n      g_setWithGlowHint(true)\r\n    }\r\n\r\n    const allSummarySentIsHighlighted = () => {\r\n      return summary_json.filter((word) => {return (word.sent_id === CurrSentInd && !isPunct(word.word) && !word.old_alignments && ![\"while\", \"from\", \"countries\", \"like\", \"Brazil\"].includes(word.word))}).length === 0\r\n    }\r\n\r\n\r\n    const getAnswerModalMsg = (last_error_json) => {\r\n      if(last_error_json[\"gold_tkn_ids\"].length!==0 && last_error_json[\"gold_tkn_ids\"][0].includes(10000000)){\r\n        setSummaryJson(summary_json.map((word) => {return ([\"while\", \"from\", \"countries\", \"like\", \"Brazil\", \".\"].includes(word.word)) ? {...word, span_highlighted:false}:word}))\r\n        setDocJson(doc_json.map((word) => {return {...word, span_highlighted:false}}))\r\n        if(CurrSentInd===1) {\r\n          setCurrAlignmentGuidingMsgId(\"-1\")\r\n          g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":`Choose a different summary span.`})\r\n        }\r\n        else if (CurrSentInd===2) {\r\n          console.log(`AVIVSL:${JSON.stringify(summary_json.filter((word) => {return ![\"from\", \"countries\", \"like\", \"Brazil\"].includes(word.word) && !isPunct(word.word)}))}`)\r\n          if (summary_json.filter((word) => {return word.span_highlighted && ![\"from\", \"countries\", \"like\", \"Brazil\"].includes(word.word) && !isPunct(word.word)}).length === 0) {\r\n            setCurrAlignmentGuidingMsgId(\"-1\")\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"summary\", \"text\":`Choose a different summary span.`})\r\n          } else {\r\n            const chosen_span_id = last_error_json[\"chosen_span_id\"]\r\n            setCurrAlignmentGuidingMsgId((parseInt(chosen_span_id)+1).toString())\r\n            g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":`${guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][parseInt(chosen_span_id)+1][\"text\"]} <br/><u>Notice</u> that \\\"from countries like Brazil\\\" was un-highlighted in the summary (it is not mentioned in the document).`})\r\n          }\r\n        }\r\n        return `${(CurrSentInd===2) ? \"\\\"from countries like Brazil\\\"\":\"\\\"while\\\"\"} doesn't appear explicitly in the document and therefore should be left un-highlighted.`\r\n      }\r\n\r\n      if(last_error_json[\"highlighted_tkn_ids\"].length===0){\r\n        const where_to_highlight = (last_error_json[\"type\"] === \"summary_span\") ? \"summary\":\"doc\"\r\n        const what_next = (last_error_json[\"type\"] === \"summary_span\") ? \"proceeding to the document or hitting \\\"CONFIRM\\\"\" : \"hitting \\\"CONFIRM\\\"\"\r\n\r\n        // g_setGuiderMsg({\"type\":\"reveal-answer\", \"where\":where_to_highlight, \"text\":`Start by highlighting something in the ${where_to_highlight}`})      \r\n        return `<div>Please highlight something in the <u>${where_to_highlight}</u> before ${what_next}!</div>`\r\n      }\r\n      const gold_mentions = guided_annotation_strike_messages[\"goldMentions\"][last_error_json[\"sent_id\"]]\r\n      const error_type = last_error_json[\"type\"];\r\n\r\n      let chosen_span_id = last_error_json[\"chosen_span_id\"];\r\n      if (chosen_span_id===\"-1\") {\r\n        chosen_span_id = Object.keys(gold_mentions[\"span_indicating_tkns\"]).filter((key) => {return string_to_span(gold_mentions[\"span_indicating_tkns\"][key]).includes(last_error_json[\"highlighted_tkn_ids\"][0])})    \r\n      }\r\n\r\n\r\n      const correct_span = gold_mentions[error_type][chosen_span_id][\"text\"]\r\n      if (correct_span===\"None\") {\r\n        // g_setAnswerWordsToGlow({\"type\":\"unalignable-adujst-summary\", \"ids\":[], \"start_tkn\":\"\"})\r\n        // g_setGuiderMsg({\"type\":\"reveal-answer\", \"where\":\"summary\", \"text\":\"Leave out \\\"from countries like Brazil\\\".\"})\r\n        setSummaryJson(summary_json.map((word) => {return [\"from\", \"countries\", \"like\", \"Brazil\", \".\"].includes(word.word) ? {...word, span_highlighted:false} : word}))\r\n        if (parseInt(chosen_span_id)<10) {\r\n          setCurrAlignmentGuidingMsgId((parseInt(chosen_span_id)+1).toString()) // usually the version without \"from countries like Brazil\" is the next one\r\n          g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":`${guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][parseInt(chosen_span_id)+1][\"text\"]} <br/><u>Notice</u> that \\\"from countries like Brazil\\\" was un-highlighted in the summary (it is not mentioned in the document).`})\r\n        }\r\n        return \"<div>\\\"from countries like Brazil\\\" doesn't appear in the document. <br/>Therefore, it shouldn't be included in the alignment (I took the courtsey to un-highlight it for you).\"\r\n      }\r\n      const where_to_highlight = (error_type===\"summary_span\") ? \"summary\":\"document\"\r\n      const what_is_correct = (correct_span===\"\") ? \"The summary span is unalignable\" : `<u>The correct span(s) is</u>: ${correct_span} (see glowing)`\r\n      const what_to_do = (correct_span===\"\") ? `<b>highlight nothing</b> in the <b>${where_to_highlight}</b>` : `<b>highlight it</b> in the <b><u>${where_to_highlight}</u></b>`\r\n      const what_next = (error_type===\"summary_span\") ? \"then proceed to find its alignment in the <u>document</u>\": `<b>hit \\\"${(StateMachineState===\"ANNOTATION\") ? \"CONFIRM\":\"\"}${(StateMachineState===\"SENTENCE END\") ? \"NEXT SENTENCE\":\"\"}${(StateMachineState===\"SUMMARY END\") ? \"SUBMIT\":\"\"}${(correct_span===\"\")? \" (NO ALIGN)\":\"\"}\\\"</b>`;\r\n\r\n      const tkns_type = (error_type===\"summary_span\") ? 'summary_tkns':'doc_tkns'\r\n      const answerMarker = (gold_mentions[tkns_type][chosen_span_id].length===0) ? {\"type\":\"unalignable-adujst-doc\", \"ids\":[], \"start_tkn\":\"\"} : {\"type\":error_type, \"ids\":gold_mentions[tkns_type][chosen_span_id], \"start_tkn\":gold_mentions[\"start_tkn\"]}      \r\n      g_setAnswerWordsToGlow(answerMarker)\r\n\r\n      if (gold_mentions[tkns_type][chosen_span_id].length===0) {\r\n        setDocJson(doc_json.map((word) => {return {...word, span_highlighted:false}}))\r\n        // g_setGuiderMsg({\"type\":\"reveal-answer\", \"where\":\"doc\", \"text\":`Un-highlight everything in the summary and ${what_next}`})\r\n      } else if (error_type===\"summary_span\") {\r\n        // g_setGuiderMsg({\"type\":\"reveal-answer\", \"where\":\"summary\", \"text\":`Highlight <b>only</b> what is <b>glowing</b> and ${what_next}`})\r\n        setSummaryJson(summary_json.map((word) => {return string_to_span(answerMarker[\"ids\"]).includes(word.tkn_id) ? {...word, span_highlighted:true} : {...word, span_highlighted:false}}))\r\n        setCurrAlignmentGuidingMsgId(chosen_span_id)\r\n        g_setGuiderMsg({\"type\":\"info\", \"where\":\"doc\", \"text\":guided_annotation_info_messages[\"custom_messages\"][CurrSentInd][\"find_alignment\"][chosen_span_id][\"text\"]})\r\n      } else {\r\n        // g_setGuiderMsg({\"type\":\"reveal-answer\", \"where\":\"doc\", \"text\":`Highlight <b>only</b> what is <b>glowing</b> and ${what_next}`})\r\n        setDocJson(doc_json.map((word) => {return string_to_span(answerMarker[\"ids\"]).includes(word.tkn_id) ? {...word, span_highlighted:true} : {...word, span_highlighted:false}}))\r\n      }\r\n      return `It appears you are struggling a little, so let me help you. <br/>${what_is_correct}. <hr/>Please ${what_to_do} and ${what_next}.`\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n  /********************************************************************************************************************************************************************* */\r\n\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (StateMachineState !== \"START\" && summary_json.filter((word) => {return word.sent_id===CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (summary_json.filter((word) => { return word.sent_id===CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) {\r\n      finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n      if (isLastSent) {\r\n        MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) { \r\n      finishedSent.current = false;\r\n      MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    // console.log(\"guided_annotation_messages:\")\r\n    // console.log(guided_annotation_messages);\r\n    SetSummaryShadowAndUpdateHighlights(CurrSentInd);\r\n  }, [CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, true);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, false);\r\n    }\r\n  }, [StateMachineState, CurrSentInd, AlignmentCount, summary_json]);\r\n  /********************************************************************************/\r\n\r\n   /***************************** old alignments controlling *****************************/ \r\n   const prevState = useRef(\"\")\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState)) {\r\n       oldAlignmentStateHandler({event:undefined, newValue:'2', sent_ind:-1});\r\n     } else if (StateMachineState === \"REVISE CLICKED\"){\r\n       oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n     } else if (StateMachineState === \"REVISE HOVER\"){\r\n       oldAlignmentStateHandler({event:undefined, newValue:'2', sent_ind:-1});\r\n     }\r\n     prevState.current = StateMachineState;\r\n   }, [StateMachineState, AlignmentCount]);\r\n   /********************************************************************************/\r\n  //  useEffect(() => {\r\n  //    console.log(`CurrSentInd is updated and is now ${CurrSentInd}`)\r\n  //   //  console.log(`AVIVSL: wanted words are:${JSON.stringify(doc_json.filter((word)=> { return [\"came\", \"come\"].includes(word.word)}).map((word) => word.tkn_id))}`)\r\n  //  }, [CurrSentInd]);\r\n\r\n   useEffect(() => {\r\n    console.log(`tkn_id of highlighted summary words: ${JSON.stringify(summary_json.filter((word)=>{return word.span_highlighted}).map((word) => word.tkn_id))}`)\r\n  }, [summary_json]);\r\n\r\n  useEffect(() => {\r\n    console.log(`tkn_id of highlighted doc words: ${JSON.stringify(doc_json.filter((word)=>{return word.span_highlighted}).map((word) => word.tkn_id))}`)\r\n  }, [doc_json]);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   console.log(`g_guided_annotation_history: ${JSON.stringify(g_guided_annotation_history)}`)\r\n  // }, [g_guided_annotation_history]);\r\n  // useEffect(() => {\r\n  //   console.log(`guided_annotation_hints here: ${JSON.stringify(guided_annotation_hints)}`)\r\n  // }, []);\r\n\r\n   \r\n   /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n   useEffect(() => {\r\n     if (DocOnMouseDownID !== \"-1\"){\r\n       setDocOnMouseDownActivated(true)\r\n     } else if (DocOnMouseDownID === \"-1\"){\r\n       setDocOnMouseDownActivated(false)\r\n     } \r\n     \r\n     if (SummaryOnMouseDownID !== \"-1\") {\r\n       setSummaryOnMouseDownActivated(true)\r\n     } else {\r\n       setSummaryOnMouseDownActivated(false)\r\n     }\r\n   }, [DocOnMouseDownID,SummaryOnMouseDownID]);\r\n   \r\n   //AVIVSL: TODO: find way to reset the whole hovering process when the onMouseUp occurs outside of the text (maybe when docOnMouseDownActivated===false or summaryOnMouseDownActivated===false) --> maybe use a useRef to remember which one was the one activated - summary or doc?\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)){\r\n       if(docOnMouseDownActivated) {\r\n        //  console.log(`DocOnMouseDownID is ${DocOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n         const min_ID =  (DocOnMouseDownID > hoverActivatedId) ? hoverActivatedId : DocOnMouseDownID;\r\n         const max_ID =  (DocOnMouseDownID > hoverActivatedId) ? DocOnMouseDownID : hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         setDocJson(doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!docOnMouseDownActivated){\r\n         setDocJson(doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n       }\r\n       if(summaryOnMouseDownActivated) {\r\n        //  console.log(`SummaryOnMouseDownID is ${SummaryOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n         const min_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? hoverActivatedId : SummaryOnMouseDownID;\r\n         const max_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? SummaryOnMouseDownID : hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         setSummaryJson(summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!summaryOnMouseDownActivated){\r\n         setSummaryJson(summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n         \r\n         if (isRedLettered(hoverActivatedId) && hoverActivatedDocOrSummary === \"summary\") {\r\n           const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[hoverActivatedId], isHover:true})});\r\n\r\n           setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n         }  \r\n       }\r\n     }\r\n   }, [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId]);\r\n\r\n\r\n   // close the guiding message\r\n   useEffect(() => {\r\n    if(guiding_msg_type!==\"closed\") {\r\n      window.setTimeout(()=>{setGuidingMsgType(\"closed\");setGuidingMsg({\"text\":\"\", \"title\":\"\"});},guiding_msg[\"timeout\"])\r\n    }\r\n   }, [guiding_msg_type])\r\n\r\n\r\n\r\n\r\n   // solve if too many errors in a row\r\n   useEffect(() => {\r\n    if(guiding_msg_type===\"danger\") {\r\n      if(g_strikes_counter>=MAX_ERR_CNT) {\r\n        const last_error_json = g_guided_annotation_history.at(-1)\r\n        g_setStrikesCounter(0)\r\n        g_setGuidedAnnotationHistory(g_guided_annotation_history.concat([\"strike!\"]))\r\n        g_setAnswerModalMsg(getAnswerModalMsg(last_error_json))\r\n      } else {\r\n        g_setStrikesCounter(g_strikes_counter+1)\r\n      }\r\n      // g_guided_annotation_history, g_setGuidedAnnotationHistory,\r\n      // g_open_answer_model, g_setAnswerModalMsg\r\n      // g_strikes_counter, g_setStrikesCounter\r\n    } else if (guiding_msg_type===\"success\") {\r\n      g_setStrikesCounter(0)\r\n\r\n      // g_setAnswerWordsToGlow({\"type\":\"\", \"ids\":[], \"start_tkn\":\"\"})\r\n\r\n    }\r\n   }, [guiding_msg_type])\r\n\r\n\r\n\r\n\r\n   // reset Hint's attributes\r\n   useEffect(() => {\r\n    if(!g_show_hint) {\r\n      g_setOpenHint(false)\r\n      g_setWithGlowHint(false)\r\n    }\r\n   }, [g_show_hint])\r\n\r\n  // reset Hint's attributes when hint changes\r\n  useEffect(() => {\r\n      g_setOpenHint(false)\r\n      g_setWithGlowHint(false)\r\n    }, [g_hint_msg])\r\n\r\n  // if alignment is ok - press the \"CONFIRM\" or equivalent button to continue\r\n  useEffect(() => {\r\n    if (is_good_alignment) {\r\n      let next_step = \"continue\"\r\n      // next_step = (StateMachineState === \"SENTENCE END\") ? \"proceed to the next sentence\" : next_step\r\n      // next_step = (StateMachineState === \"SUMMARY END\") ? \"submit and finish your training\" : next_step\r\n      if(doc_json.filter((word) => {return word.span_highlighted}).length!==0) {\r\n        g_setGuiderMsg({\"type\":\"info\", \"where\":\"next-button\", \"text\":`Great job! Now add the alignment.`})\r\n      }\r\n    }\r\n  }, [is_good_alignment])\r\n\r\n\r\n    \r\n\r\n   \r\n\r\n\r\n   // check if alignment ok (for guidinbg annotation message)\r\n   useEffect(() => {\r\n     if(CurrSentInd>=0 && curr_alignment_guiding_msg_id!==\"-1\") {\r\n      const isAlignmentOkDict = isAlignmentOk(doc_json.filter((word) => {return word.span_highlighted}).map((word) => word.tkn_id), false, false)\r\n      const isSummarySpanOkDict = isSummarySpanOk(summary_json.filter((word) => {return word.span_highlighted}).map((word) => word.tkn_id), false, false) // if changes summary span after was approved\r\n      setIsGoodAlignment(isAlignmentOkDict[\"alignment_ok\"] && isSummarySpanOkDict[\"summary_span_ok\"])\r\n     }\r\n   }, [doc_json, summary_json])\r\n\r\n   // when entering revision mode - scroll up to see the instruction\r\n   useEffect(() => {\r\n    if(StateMachineState===\"REVISE HOVER\") {\r\n      window.scrollTo(0, 0);\r\n    }\r\n  }, [StateMachineState])\r\n\r\n\r\n\r\n   const SubmitHandler = (event) => {\r\n\r\n    setCompleted(true)\r\n    setOpeningModalShow(false)\r\n    setFinishedModalShow(true)\r\n    resetGuidedAnnotation()\r\n    setGuidedUnhighlight(false)\r\n    MachineStateHandlerWrapper()\r\n    window.scrollTo(0, 0)\r\n    // alert(\"Submitted!\");\r\n  }\r\n\r\n\r\n\r\n\r\n   return (\r\n     <>\r\n          <Annotation\r\n              isTutorial = {false}                                        isGuidedAnnotation = {true} \r\n              task_id = {'0'}                                             doc_paragraph_breaks = {doc_paragraph_breaks}\r\n              doc_json = {doc_json}                                       setDocJson = {setDocJson}\r\n              summary_json = {summary_json}                               setSummaryJson = {setSummaryJson}\r\n              all_lemma_match_mtx = {all_lemma_match_mtx}                 important_lemma_match_mtx = {important_lemma_match_mtx}\r\n              StateMachineState = {StateMachineState}                     SetStateMachineState = {SetStateMachineState}\r\n              handleErrorOpen = {handleErrorOpen}                         isPunct = {isPunct}\r\n              toggleSummarySpanHighlight = {toggleSummarySpanHighlight}   toggleDocSpanHighlight = {toggleDocSpanHighlight}\r\n              boldState = {boldState}                                     boldStateHandler = {boldStateHandler}\r\n              SubmitHandler = {SubmitHandler}                             hoverHandler = {hoverHandler}\r\n              CurrSentInd = {CurrSentInd}                                 SetCurrSentInd = {SetCurrSentInd}\r\n              InfoMessage = {InfoMessage}                                 MachineStateHandlerWrapper = {MachineStateHandlerWrapper}\r\n              AlignmentCount = {AlignmentCount}                           SetAlignmentCount = {SetAlignmentCount}\r\n              oldAlignmentState = {oldAlignmentState}                     oldAlignmentStateHandler = {oldAlignmentStateHandler}\r\n              DocOnMouseDownID = {DocOnMouseDownID}                       SetDocOnMouseDownID = {SetDocOnMouseDownID}\r\n              SummaryOnMouseDownID = {SummaryOnMouseDownID}               SetSummaryOnMouseDownID = {SetSummaryOnMouseDownID}\r\n              docOnMouseDownActivated = {docOnMouseDownActivated}         setDocOnMouseDownActivated = {setDocOnMouseDownActivated}\r\n              summaryOnMouseDownActivated = {summaryOnMouseDownActivated} setSummaryOnMouseDownActivated = {setSummaryOnMouseDownActivated}\r\n              setHoverActivatedId = {setHoverActivatedId}                 setHoverActivatedDocOrSummary = {setHoverActivatedDocOrSummary}\r\n              hoverActivatedId = {hoverActivatedId}\r\n              t_StateMachineStateId = {undefined}                          t_SetStateMachineStateId = {undefined}\r\n              t_start_doc_json = {undefined}                               t_middle_doc_json = {undefined}\r\n              t_sent_end_doc_json = {undefined}                            t_submit_doc_json = {undefined}\r\n              t_start_summary_json = {undefined}                           t_middle_summary_json = {undefined}\r\n              t_sent_end_summary_json = {undefined}                        t_submit_summary_json = {undefined}\r\n              t_state_messages = {undefined}\r\n              g_guiding_info_msg = {guiding_info_msg}                      g_is_good_alignment = {is_good_alignment}\r\n              g_show_hint = {g_show_hint}                                  g_setShowHint = {g_setShowHint}\r\n              g_hint_msg = {g_hint_msg}                                    g_showWhereNavbar = {showWhereNavbar}\r\n              g_open_hint={g_open_hint}                                    g_setOpenHint={g_setOpenHint}\r\n              g_with_glow_hint={g_with_glow_hint}                          g_setWithGlowHint={g_setWithGlowHint}\r\n              g_answer_words_to_glow={g_answer_words_to_glow}              g_FinishedModalShow={FinishedModalShow}\r\n              g_Guider_msg={g_Guider_msg}                                  g_setGuiderMsg={g_setGuiderMsg}\r\n              \r\n              OpeningModalShow = {undefined}                               setOpeningModalShow = {undefined}\r\n              noAlignModalShow = {noAlignModalShow}                        setNoAlignModalShow = {setNoAlignModalShow}\r\n              noAlignApproved = {noAlignApproved}                          setNoAlignApproved = {setNoAlignApproved}\r\n              changeSummarySentHandler = {changeSummarySentHandler}\r\n              showAlert={showAlert}                                       setShowAlert={setShowAlert}\r\n              SubmitModalShow={SubmitModalShow}                           setSubmitModalShow={setSubmitModalShow}\r\n              g_answer_modal_msg={g_answer_modal_msg}\r\n            />\r\n\r\n                <Alert show={guiding_msg_type===\"success\" && g_answer_modal_msg===\"\"} style={{position:\"fixed\", bottom:\"1%\", left:\"50%\", transform:\"translate(-50%, 0%)\", width:\"50%\", zIndex:\"10000\"}} variant={guiding_msg_type} onClose={() => setGuidingMsgType(\"closed\")} dismissible>\r\n                        <Alert.Heading>{guiding_msg[\"title\"]}</Alert.Heading>\r\n                        <p>\r\n                          <Markup content={guiding_msg[\"text\"]} />\r\n                          {guiding_msg[\"with hint\"] && (<div><Button variant=\"link\" onClick={OpenHint}>hint</Button></div>)}\r\n                          <Markup content={add_text_to_GuidedAnnotationInfoAlert(is_good_alignment,StateMachineState, doc_json)} />\r\n                        </p>\r\n                </Alert>\r\n\r\n                <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered show={FinishedModalShow} onHide={() => {setFinishedModalShow(false)}}>\r\n                  <Modal.Header closeButton>\r\n                    <Modal.Title>{guided_annotation_messages[\"submitted_msg\"]['title']}</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    {<Markup content={guided_annotation_messages[\"submitted_msg\"][\"text\"]} />}\r\n                  </Modal.Body>\r\n                  <Modal.Footer className='FinishedModalFooter'>\r\n                        <Button active variant=\"btn btn-warning btn-lg left-button\" onClick={() => {setShowWhereNavbar(!showWhereNavbar)}}>\r\n                            SHOW NAVIGATION BAR\r\n                        </Button>\r\n\r\n\r\n                    <Button variant=\"btn btn-secondary btn-lg right-button\" onClick={() => {setFinishedModalShow(false)}}>\r\n                      REDO\r\n                    </Button>\r\n                    <Link to=\"/\">\r\n                      <Button className=\"btn btn-success btn-lg right-button\">\r\n                        ANNOTATION\r\n                      </Button>\r\n                    </Link>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n                <Modal\r\n                  show={g_answer_modal_msg!==\"\"}\r\n                  backdrop=\"static\"\r\n                  keyboard={false}\r\n                  className=\"answer-modal-textbox\"\r\n                  style={{zIndex:\"10000\"}}\r\n                >\r\n                  <Modal.Header>\r\n                    <Modal.Title>UH-OH</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                    {<Markup content={g_answer_modal_msg} />}\r\n                  </Modal.Body>\r\n                  <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={() => {g_setAnswerModalMsg(\"\")}}>\r\n                      GOT IT\r\n                    </Button>\r\n                  </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n\r\n\r\n      </>\r\n   )\r\n\r\n}\r\n\r\nexport default GuidedAnnotation","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js",["245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js",["282","283","284","285"],[],"import { Link } from 'react-router-dom';\r\nimport * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\n\r\n\r\nconst pages = {'Instructions': 'instructions', 'Guided Annotation': 'guidedAnnotation'}; \r\n\r\n\r\n\r\nconst StartPage = () => {\r\n  return (\r\n    <>\r\n      {/* <header className='GeneralPageHeader'>\r\n          <h2>Highlighting Extraction UI</h2>\r\n      </header> */}\r\n\r\n      <AppBar id=\"startPageAppBar\" position=\"static\">\r\n      <div>\r\n        <Container maxWidth=\"xl\">\r\n          <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ my: 2, flexGrow: 1, display: {xs: 'flex', md: 'none' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n          </Toolbar>\r\n        </Container>\r\n      </div>\r\n    </AppBar>\r\n\r\n    <div className=\"jumbotron text-center StartPageBody\" /*className='StartPageBody'*/>\r\n        <div className='StartPageText'>\r\n          <p id=\"StartPageTitle\">\r\n            Welcome to\r\n            <br></br>\r\n            the Highlight Extraction UI\r\n          </p>\r\n          <p id=\"StartPageContent\">Before starting annotating, please read the Instructions first and practice using the Guided Annotation option.</p>\r\n\r\n          <div id=\"ButtonGroupBox\">\r\n            {/* <ButtonGroup> */}\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"primary\" component={Link} to={'/instructions'} >Instructions</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"secondary\" component={Link} to={'/guidedAnnotation'}>Guided<br></br>Annotation</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"success\" component={Link} to={'/annotation'}>Annotation</Button>\r\n            {/* </ButtonGroup> */}\r\n          </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StartPage","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js",["286"],[],"import BackButton from './BackButton'\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\nimport start_window_img from '../data/Instructions_img/start.JPG'; // Tell webpack this JS file uses this image\r\nimport some_span_chosen_img from '../data/Instructions_img/some_span_chosen.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_img from '../data/Instructions_img/appbar.JPG'; // Tell webpack this JS file uses this image\r\nimport revise_hover_img from '../data/Instructions_img/revise_hover.png'; // Tell webpack this JS file uses this image\r\nimport revise_clicked_img from '../data/Instructions_img/revise_clicked.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_finish_revision_img from '../data/Instructions_img/appbar_finish_revision.JPG'; // Tell webpack this JS file uses this image\r\nimport submit_img from '../data/Instructions_img/submit.JPG'; // Tell webpack this JS file uses this image\r\n\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <>\r\n        <ResponsiveAppBar\r\n           title={\"Instructions\"}\r\n        />\r\n      <div>\r\n        <section  className=\"InstructionsBody\">\r\n          <h4>\r\n            In this task, you are presented with a document and its summary. \r\n            <br></br>\r\n            The summary was constructed by an expert summarizer who first highlighted important information in the document and then merged it in a coherent manner. \r\n            <br></br>\r\n            Your goal is to locate those spans the summarizer highlighted.\r\n            <br></br>\r\n            You will first be presented with the summary and document without any extra markings:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={start_window_img} alt=\"start\" />\r\n            <br></br>\r\n            We encourage you to skim through the summary so you are familiar with its content, before starting.\r\n            <br></br>\r\n            You will work sentence by sentence, where you will not be able to continue to the next sentence before \"highlighting\" all of the current sentence's words.\r\n            <br></br>\r\n            To help you focus, the sentence you need to work on will be in bold.\r\n            <br></br>\r\n            You goal is to choose alignments between the summary and the doc. To help you, when highlighting a span from the document,  all the words in the document who have identical or relating words to that span will be <text className=\"boldfaced-word\">boldfaced and increased:</text>\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={some_span_chosen_img} alt=\"some_span_chosen\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            If no span was chosen, all the words in the document who have identical or relating words in current sentence will be <text className=\"boldfaced-word\">boldfaced and increased</text>.\r\n            <br></br>\r\n            At any given time, you can adjust the level of bolding, using the slider at the top-right corner of the UI:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_img} alt=\"appbar\" />\r\n            <br></br>\r\n            with the following bolding options:\r\n            <ul>\r\n              <li >No bolding (leftmost)</li>\r\n              <li>Current span bolding (middle)</li>\r\n              <li>Current sentence bolding (rightmost)</li>\r\n            </ul>\r\n            <br></br>\r\n            You will work in iterations:\r\n            <ol>\r\n              <li>\r\n                Start by choosing a subspan of the summary sentence which contains at least one event (by highlighting it).\r\n                <br></br>\r\n                This will boldface all the words in the document identical or similar to those in the span.\r\n              </li>\r\n\r\n              <li>Then, highlight spans in the document aligning to the information in the span.</li>\r\n              <li>Before heading on to the next span, please make sure you covered all the span's information and only it. If needed, make adjustments to the highlightings.</li>\r\n            </ol>\r\n            When finishing all the summary document, wou would be able to continue to the next sentence.\r\n            You may follow these questions to help you decide what span to choose:\r\n            <ul>\r\n              <li>Is the information presented in the span missing something? Or is it self-informative?</li>\r\n              <li>Is the information presented in the span specific? Or is it too general?</li>\r\n            </ul>\r\n            For long sentences, we strongly advice against highlighting the full sentence all at once, as doing so could lead to missing small details.\r\n            <br></br>\r\n            Alternatively, if a sentence is short enough, aligning it all at once is acceptable.\r\n            <br></br>\r\n            When choosing a span, a general rule of thumb should be a span that when reading it, you manage to remember all the details in it.\r\n            <br></br>\r\n            For example, the sentence:\r\n          </h4>\r\n          \r\n          <h3>\r\n            Sixty Forest Service firefighters brought Michigan's four-day Hiawatha\r\n            <br></br> \r\n            National Forest fire under control after it burned 1100 acres of woodlands.\r\n          </h3>\r\n\r\n          <h4>\r\n            can be seperated like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought Michigan's four-day Hiawatha National Forest fire under control</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n\r\n            Or like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought ... fire under control</li>\r\n              <li>Michigan's four-day Hiawatha National Forest fire</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n            and shouldn't be handled all at once.\r\n            <br></br>\r\n            <b> Notice! Make sure that what you highlight in the document covers all the information in the summary and only it.</b>\r\n            <br></br>\r\n            After choosing and confirming alignments, they will be shown in light-gray color (in juxtaposition to currenly chosen alignments, which are in yellow).\r\n             At any given time, you can adjust how much of previously chosen alignments to see, using the slider adjacent to the bolding slider (see image above), with the following options:\r\n            <ul>\r\n              <li>No previous highlightings (leftmost)</li>\r\n              <li>Only Current sentence's previous highlightings (middle)</li>\r\n              <li>All previous highlightings (rightmost)</li>\r\n            </ul>\r\n            \r\n            In addition, you can also revise old highlightings, by clicking the \"REVISE\" button that is located on the right side of the app-bar (see image above). \r\n            <br></br>\r\n            When in \"Revise\" mode you can hover over old highlightings, and their alignments will show to help you choose:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_hover_img} alt=\"revise_hover\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            By clicking one of them, only the chosen alignment will stay, which you could then revise:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_clicked_img} alt=\"revise_clicked\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            When finishing revising, you will need to return to the main session to continue, by clicking the \"FINISH REVISION\" button at the top of the window:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_finish_revision_img} alt=\"appbar_finish_revision\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            Finally, after finishing the last summary sentence, you will be able to submit:\r\n            <img className=\"instruction_images\" src={submit_img} alt=\"submit\" />\r\n          </h4>\r\n        </section>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Instructions\r\n",["287","288"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360"],[],"const MachineStateHandler = (summary_json,\r\n                                 StateMachineState, SetStateMachineState,\r\n                                 SetInfoMessage, handleErrorOpen, isPunct,\r\n                                 CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                                 AlignmentCount, SetAlignmentCount,\r\n                                 approveHighlightHandler,\r\n                                 clickedWordInfo, forceState, \r\n                                 StartReviseStateHandler, ExitReviseHandler,\r\n                                 ReviseChooseAlignHandler,\r\n                                 isBackBtn,\r\n                                 setPrevSummaryJsonRevise, setPrevDocJsonRevise) => {\r\n\r\n\r\n\r\n    // forceState: \"SENTENCE END\"\r\n    if (forceState === \"SENTENCE END\"){\r\n      console.log(`forceState: \\\"SENTENCE END\\\"`);\r\n      // SetStateMachineState(\"SENTENCE END\");\r\n      SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n    }\r\n\r\n    // forceState: \"SUMMARY END\"\r\n    else if (forceState === \"SUMMARY END\"){\r\n      console.log(`forceState: \\\"SUMMARY END\\\"`);\r\n      // SetStateMachineState(\"SUMMARY END\");\r\n      SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n    }\r\n\r\n    // forceState: \"ANNOTATION\"\r\n    else if (forceState === \"ANNOTATION\"){\r\n      console.log(`forceState: \\\"ANNOTATION\\\"`);\r\n      SetStateMachineState(\"ANNOTATION\");\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n    }\r\n\r\n    // forceState: \"REVISE HOVER\"\r\n    else if (forceState === \"REVISE HOVER\"){\r\n      StartReviseStateHandler(isBackBtn);\r\n      console.log(`forceState: \\\"REVISE HOVER\\\"`);\r\n      SetStateMachineState(\"REVISE HOVER\");\r\n      SetInfoMessage(\"Choose alignment to revise.\");\r\n    }\r\n\r\n    // forceState: \"FINISH REVISION\" --> namely go back to state before revision with all-highlighted updated\r\n    else if (forceState === \"FINISH REVISION\"){\r\n      const prev_state = ExitReviseHandler();\r\n      if ([\"ANNOTATION\", \"SENTENCE START\".includes(prev_state)]) {\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n      } else if (prev_state === \"SENTENCE END\"){\r\n        SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n      } else if (prev_state === \"SUMMARY END\") {\r\n        SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n      } else{\r\n        alert(`Coming back from Revision to an unsupported state... state is ${prev_state}`);\r\n      }\r\n    }\r\n\r\n    // \"START\" state --> \"ANNOTATION\" state\r\n    else if (StateMachineState === \"START\"){\r\n        console.log(`Old state: \\\"START\\\"; New state: \\\"ANNOTATION\\\" with SentInd=${CurrSentInd+1}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        SetSummaryShadow(CurrSentInd+1);\r\n        SetCurrSentInd(CurrSentInd+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n    }\r\n    \r\n    // \"ANNOTATION\" state --> \"ANNOTATION\" with next alignment\r\n    else if (StateMachineState === \"ANNOTATION\"){\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      console.log(`Old state: \\\"ANNOTATION\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n    }\r\n\r\n    // \"SENTENCE END\" state --> \"SENTENCE START\" \r\n    else if (StateMachineState === \"SENTENCE END\"){\r\n      // adding last sentence alignment\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n\r\n      // moving to next sentence\r\n      // update of summary sentence shadow is done in App.js in a designated useEffect\r\n      console.log(`Old state: \\\"SENTENCE END\\\"; New state: \\\"SENTENCE START\\\" with SentInd=${CurrSentInd+1}.`);\r\n      SetStateMachineState(\"SENTENCE START\");\r\n      SetCurrSentInd(CurrSentInd+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n    }\r\n      // \"SENTENCE START\" state --> \"ANNOTATION\" with next alignment \r\n      else if (StateMachineState === \"SENTENCE START\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"SENTENCE START\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n  \r\n      }\r\n      // \"SUMMARY END\" state --> \"SUBMIT\" state \r\n      else if (StateMachineState === \"SUMMARY END\"){\r\n        console.log(`Old state: \\\"SUMMARY END\\\"; New state: \\\"SUBMIT\\\"`);\r\n        // SetStateMachineState(\"SUBMIT\");\r\n        SetInfoMessage(\"\");\r\n      }\r\n\r\n      // \"REVISE HOVER\" state --> \"REVISE CLICKED\" state \r\n      else if (StateMachineState === \"REVISE HOVER\"){\r\n        console.log(`Old state: \\\"REVISE HOVER\\\"; New state: \\\"REVISE CLICKED\\\"`);\r\n        console.log(`clickedWordInfo:${JSON.stringify(clickedWordInfo)}`)\r\n        ReviseChooseAlignHandler(clickedWordInfo);\r\n        SetStateMachineState(\"REVISE CLICKED\");\r\n        SetInfoMessage(\"Fix the alignment and press \\\"UPDATE ALIGNMENT\\\" to update, or \\\"BACK\\\" to discard the changes.\");\r\n      }\r\n\r\n      // \"REVISE CLICKED\" state --> \"REVISE HOVER\" state \r\n      else if (StateMachineState === \"REVISE CLICKED\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"REVISE CLICKED\\\"; New state: \\\"REVISE HOVER\\\"`);\r\n        SetStateMachineState(\"REVISE HOVER\");\r\n        SetCurrSentInd(-1)\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Choose alignment to revise.\");\r\n        setPrevSummaryJsonRevise([]);\r\n        setPrevDocJsonRevise([]);\r\n      }\r\n  }\r\n\r\n  MachineStateHandler.defaultProps = {\r\n    forceState: '',\r\n    isBackBtn: false\r\n  }\r\n\r\n\r\n\r\n  /************************************************************************************************************************************/\r\n\r\n\r\n  const g_MachineStateHandler = (summary_json,\r\n    StateMachineState, SetStateMachineState,\r\n    SetInfoMessage, handleErrorOpen, isPunct,\r\n    CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n    AlignmentCount, SetAlignmentCount,\r\n    approveHighlightHandler,\r\n    clickedWordInfo, forceState, \r\n    StartReviseStateHandler, ExitReviseHandler,\r\n    ReviseChooseAlignHandler,\r\n    isBackBtn,\r\n    setPrevSummaryJsonRevise, setPrevDocJsonRevise) => {\r\n\r\n\r\n\r\n// forceState: \"SENTENCE END\"\r\nif (forceState === \"SENTENCE END\"){\r\nconsole.log(`forceState: \\\"SENTENCE END\\\"`);\r\n// SetStateMachineState(\"SENTENCE END\");\r\nSetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n}\r\n\r\n// forceState: \"SUMMARY END\"\r\nelse if (forceState === \"SUMMARY END\"){\r\nconsole.log(`forceState: \\\"SUMMARY END\\\"`);\r\n// SetStateMachineState(\"SUMMARY END\");\r\nSetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n}\r\n\r\n// forceState: \"ANNOTATION\"\r\nelse if (forceState === \"ANNOTATION\"){\r\nconsole.log(`forceState: \\\"ANNOTATION\\\"`);\r\nSetStateMachineState(\"ANNOTATION\");\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n}\r\n\r\n// forceState: \"REVISE HOVER\"\r\nelse if (forceState === \"REVISE HOVER\"){\r\nStartReviseStateHandler(isBackBtn);\r\nconsole.log(`forceState: \\\"REVISE HOVER\\\"`);\r\nSetStateMachineState(\"REVISE HOVER\");\r\nSetInfoMessage(\"Choose alignment to revise.\");\r\n}\r\n\r\n// forceState: \"FINISH REVISION\" --> namely go back to state before revision with all-highlighted updated\r\nelse if (forceState === \"FINISH REVISION\"){\r\nconst prev_state = ExitReviseHandler();\r\nif ([\"ANNOTATION\", \"SENTENCE START\".includes(prev_state)]) {\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n} else if (prev_state === \"SENTENCE END\"){\r\nSetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n} else if (prev_state === \"SUMMARY END\") {\r\nSetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n} else{\r\nalert(`Coming back from Revision to an unsupported state... state is ${prev_state}`);\r\n}\r\n}\r\n\r\n// \"START\" state --> \"ANNOTATION\" state\r\nelse if (StateMachineState === \"START\"){\r\nconsole.log(`Old state: \\\"START\\\"; New state: \\\"ANNOTATION\\\" with SentInd=${CurrSentInd+1}.`);\r\nSetStateMachineState(\"ANNOTATION\");\r\nSetSummaryShadow(CurrSentInd+1);\r\nSetCurrSentInd(CurrSentInd+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n\r\n// g_setStateMachineStateIndex(1.0)\r\n}\r\n\r\n// \"ANNOTATION\" state --> \"ANNOTATION\" with next alignment\r\nelse if (StateMachineState === \"ANNOTATION\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"ANNOTATION\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n}\r\n\r\n// \"SENTENCE END\" state --> \"SENTENCE START\" \r\nelse if (StateMachineState === \"SENTENCE END\"){\r\n// adding last sentence alignment\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\n\r\n// moving to next sentence\r\n// update of summary sentence shadow is done in App.js in a designated useEffect\r\nconsole.log(`Old state: \\\"SENTENCE END\\\"; New state: \\\"SENTENCE START\\\" with SentInd=${CurrSentInd+1}.`);\r\nSetStateMachineState(\"SENTENCE START\");\r\nSetCurrSentInd(CurrSentInd+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n}\r\n// \"SENTENCE START\" state --> \"ANNOTATION\" with next alignment \r\nelse if (StateMachineState === \"SENTENCE START\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"SENTENCE START\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\nSetStateMachineState(\"ANNOTATION\");\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"ADD ALIGNMENT\\\".\");\r\n\r\n}\r\n// \"SUMMARY END\" state --> \"SUBMIT\" state \r\nelse if (StateMachineState === \"SUMMARY END\"){\r\nconsole.log(`Old state: \\\"SUMMARY END\\\"; New state: \\\"SUBMIT\\\"`);\r\n// SetStateMachineState(\"SUBMIT\");\r\nSetInfoMessage(\"\");\r\n}\r\n\r\n// \"REVISE HOVER\" state --> \"REVISE CLICKED\" state \r\nelse if (StateMachineState === \"REVISE HOVER\"){\r\nconsole.log(`Old state: \\\"REVISE HOVER\\\"; New state: \\\"REVISE CLICKED\\\"`);\r\nReviseChooseAlignHandler(clickedWordInfo);\r\nSetStateMachineState(\"REVISE CLICKED\");\r\nSetInfoMessage(\"Fix the alignment and press \\\"UPDATE ALIGNMENT\\\" to update, or \\\"BACK\\\" to discard the changes.\");\r\n}\r\n\r\n// \"REVISE CLICKED\" state --> \"REVISE HOVER\" state \r\nelse if (StateMachineState === \"REVISE CLICKED\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"REVISE CLICKED\\\"; New state: \\\"REVISE HOVER\\\"`);\r\nSetStateMachineState(\"REVISE HOVER\");\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Choose alignment to revise.\");\r\nsetPrevSummaryJsonRevise([]);\r\nsetPrevDocJsonRevise([]);\r\n}\r\n}\r\n\r\ng_MachineStateHandler.defaultProps = {\r\nforceState: '',\r\nisBackBtn: false\r\n}\r\n\r\n\r\n  export { MachineStateHandler, g_MachineStateHandler }\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js",["361"],[],"import Typography from '@mui/material/Typography';\r\n\r\nconst DocWord = ({ word_json, DocOnMouseDownID, doc_paragraph_breaks, StateMachineState, DocMouseClickHandlerWrapper, hoverHandlerWrapper, DocOnMouseDownHandler, DocOnMouseUpHandler, setDocOnMouseDownActivated, docOnMouseDownActivated, setHoverActivatedId, ctrlButtonDown, setHoverActivatedDocOrSummary }) => {\r\n    // const XOR = (a,b) => {\r\n    //   return ( ( a && !b ) || ( !a && b ) )\r\n    // }\r\n\r\n    // const is_span_highlighted = () => {\r\n    //   if (ctrlButtonDown) {\r\n    //     return word_json.span_highlighted && !word_json.span_alignment_hover\r\n    //   } \r\n    //   else {\r\n    //     return word_json.span_highlighted\r\n    //   }\r\n    // }\r\n\r\n    const show_word = () => {\r\n      if (word_json.word !== \"\\n\"){\r\n        return word_json.word\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n  \r\n    // the \"&nbsp;\" is to add space after word\r\n    return (\r\n      <div>\r\n        {/* {(word_json.word !== \"\\n\") && (\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted) ? 'old-aligned-word': ''}\r\n                        ${word_json.boldfaced ? 'boldfaced-word': 'normal-sized-word'}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\") ? 'cursor-span' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        ${(word_json.red_color) ? 'red-color-word': 'text-muted'}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"0\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {word_json.word}\r\n              </nobr>&nbsp;\r\n          </div>\r\n        )}\r\n\r\n        {(word_json.word === \"\\n\") && (\r\n          <span className=\"br-class\"></span>\r\n        )} */}\r\n\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover  && !(word_json.red_color && !docOnMouseDownActivated)) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted && !(word_json.red_color && !docOnMouseDownActivated)) ? 'old-aligned-word': ''}\r\n                        ${(word_json.red_color && !docOnMouseDownActivated) ? 'red-color-word': ''}\r\n                        ${(word_json.boldfaced) ? 'boldfaced-word': ''}\r\n                        ${(!word_json.boldfaced) ? 'text-muted': ''}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\" && DocOnMouseDownID===\"-1\") ? 'cursor-grab' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"1\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => {hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            // onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {show_word()}\r\n              </nobr>&nbsp;\r\n          </div>\r\n\r\n          {(doc_paragraph_breaks.includes(word_json.tkn_id)) && (\r\n          <span className=\"br-class\"></span>\r\n        )}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default DocWord","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js",["362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382"],[],"import * as React from 'react';\r\nimport { useRef } from 'react'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\n// import Container from '@mui/material/Container';\r\nimport Button from '@mui/material/Button';\r\nimport { Link } from 'react-router-dom'\r\nimport { ArrowForwardIosTwoTone } from '@mui/icons-material';\r\nimport Slider from '@mui/material/Slider';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport { padding } from '@mui/system';\r\nimport { styled } from '@mui/material/styles';\r\nimport { StyledSliderHighlighting, StyledSliderBolding } from './styled-sliders'\r\nimport Overlay from 'react-bootstrap/Overlay'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nconst pages = {\"Tutorial\": \"tutorial\", 'Guided Annotation': 'guidedAnnotation',  'Annotation': ''}; \r\n\r\n\r\nconst ResponsiveAppBar = ({ title, StateMachineState, MachineStateHandlerWrapper, boldState, boldStateHandler, oldAlignmentState, oldAlignmentStateHandler, t_StateMachineStateId, g_showWhereNavbar }) => {\r\n  const whereNavBar = useRef(null);\r\n  const whereNavBarArr = {\"Tutorial\": undefined, 'Guided Annotation': whereNavBar,  'Annotation': undefined}; \r\n  \r\n  const BlackTextTypography = withStyles({\r\n    root: {\r\n      color: \"white\",\r\n      fontSize: \"15pt\",\r\n      fontWeight: \"14\"\r\n    }\r\n  })(Typography);\r\n\r\n\r\n\r\n  const BoldingSliderTags = (value) =>{\r\n    if (value===1) {\r\n      return \"None\";\r\n    } else {\r\n      return \"Bold\";\r\n    }\r\n  }\r\n\r\n  const BoldingSliderDefaultValue = () =>{\r\n    if (boldState === \"none\") {\r\n      return 1;\r\n    } else {\r\n      return 2;\r\n    }\r\n  }\r\n\r\n  const OldHighlightingSliderTags = (value) =>{\r\n    if (value===1) {\r\n      return \"None\";\r\n    } else {\r\n      return \"All\";\r\n    }\r\n  }\r\n\r\n  const OldHighlightingSliderDefaultValue = () =>{\r\n    if (oldAlignmentState === \"none\") {\r\n      return 1;\r\n    } else {\r\n      return 2;\r\n    }\r\n  }\r\n\r\n  const margin_left = (curr_ttl) =>{\r\n    if (title===\"Guided Annotation\" && curr_ttl==\"Tutorial\") {\r\n      return \"-70%\"\r\n    } else if (title===\"Annotation\" && curr_ttl===\"Tutorial\") {\r\n      return \"-5%\"\r\n    } else if (title===\"Tutorial\" && curr_ttl===\"Tutorial\") {\r\n      return \"-9%\"\r\n    } \r\n    \r\n    else if (title===\"Guided Annotation\" && curr_ttl==\"Guided Annotation\") {\r\n      return \"-70%\"\r\n    } else if (title===\"Annotation\" && curr_ttl===\"Guided Annotation\") {\r\n      return \"-8%\"\r\n    } else if (title===\"Tutorial\" && curr_ttl===\"Guided Annotation\") {\r\n      return \"-9%\"\r\n    }     \r\n    \r\n    else if (title===\"Guided Annotation\" && curr_ttl==\"Annotation\") {\r\n      return \"-72%\"\r\n    } else if (title===\"Annotation\" && curr_ttl===\"Annotation\") {\r\n      return \"-9%\"\r\n    } else if (title===\"Tutorial\" && curr_ttl===\"Annotation\") {\r\n      return \"-11%\"\r\n    } \r\n  }\r\n\r\n\r\n  const renderTooltip = (props) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n      Simple tooltip\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n\r\n    <>\r\n      <Navbar bg=\"secondary\" variant=\"dark\" className=\"w-100 p-2\">\r\n        <Container className='navbar-container'>\r\n          {/* <Row  className=\"navbar-row\"> */}\r\n            <Col md={{span:1, offset:0}}>\r\n                      <Navbar.Brand>{title}</Navbar.Brand>\r\n            </Col>\r\n            {/* <Col md={{span:12, offset:0}}>\r\n              <Nav className=\"me-auto\"> */}\r\n                  {Object.keys(pages).map((ttl, index) => {\r\n                      return (<Col style={{marginLeft:`${margin_left(ttl)}`}} md={(ttl===\"Guided Annotation\")? {span:2, offset:0}:{span:1, offset:0}}>\r\n                        <Nav className=\"me-auto\" ref={whereNavBarArr[ttl]}>\r\n                          <Nav.Item as=\"li\">\r\n                            <Nav.Link\r\n                              key={ttl}\r\n                              as={Link} to={`/${pages[ttl]}`}\r\n                            >\r\n                              {ttl}\r\n                              </Nav.Link>\r\n                          </Nav.Item>\r\n                          </Nav>\r\n                      </Col>)\r\n                  }\r\n                  )}\r\n              {/* </Nav>\r\n            </Col> */}\r\n          {/* </Row> */}\r\n\r\n\r\n            {/* { title !== \"Instructions\" && (\r\n                  <Col md={{span:2, offset:2}}>\r\n                    <BlackTextTypography  id=\"old-highlighting-slider-title\">\r\n                        PREVIOUS ALIGNMENTS\r\n                    </BlackTextTypography>\r\n                    <StyledSliderHighlighting\r\n                      className={`${(t_StateMachineStateId === 10) ? 'with-glow':''}`} \r\n                      aria-label=\"Old-Highlighting-option\"\r\n                      defaultValue={3}\r\n                      getAriaValueText={OldHighlightingSliderTags}\r\n                      valueLabelFormat={OldHighlightingSliderTags}\r\n                      valueLabelDisplay=\"auto\"\r\n                      value={OldHighlightingSliderDefaultValue()}\r\n                      sx={{ color: 'primary.dark' }}\r\n                      step={1}\r\n                      marks\r\n                      min={1}\r\n                      max={2}\r\n                      onChangeCommitted={(event, newValue) => {oldAlignmentStateHandler({event:event, newValue:newValue, sent_ind:-1})}}\r\n                    />\r\n                  </Col>\r\n            )} */}\r\n\r\n\r\n            {/* { title !== \"Instructions\" && (\r\n                <Col style={{marginLeft:\"3%\"}} md={{span:2, offset:0}}>\r\n                  <BlackTextTypography  id=\"bolding-slider-title\">\r\n                    BOLDING\r\n                  </BlackTextTypography>\r\n                  <StyledSliderBolding\r\n                    className={`${(t_StateMachineStateId === 8) ? 'with-glow':''}`}\r\n                    aria-label=\"Bolding-option\"\r\n                    defaultValue={3}\r\n                    getAriaValueText={BoldingSliderTags}\r\n                    valueLabelFormat={BoldingSliderTags}\r\n                    valueLabelDisplay=\"auto\"\r\n                    value={BoldingSliderDefaultValue()}\r\n                    color=\"error\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={2}\r\n                    onChangeCommitted={boldStateHandler}\r\n                  />\r\n                </Col>\r\n              )} */}\r\n        </Container>\r\n      </Navbar>\r\n\r\n\r\n\r\n\r\n      <Overlay target={whereNavBar.current} show={g_showWhereNavbar} placement=\"bottom\">\r\n        {(props) => (\r\n          <Tooltip {...props} id=\"overlay-where-navbar\">\r\n              I'm right here!\r\n          </Tooltip>\r\n        )}\r\n      </Overlay>\r\n    </>\r\n  );\r\n};\r\nexport default ResponsiveAppBar;\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js",["383"],[],"import { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\n\r\nconst BackButton = ({ back_path }) => {\r\n    return (\r\n        <Button component={Link} to={back_path} startIcon={<ArrowBackIosNewIcon />}>\r\n              back\r\n        </Button>\r\n\r\n    )\r\n  }\r\n  \r\n  export default BackButton","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation_utils.js",["384","385","386","387","388","389","390","391","392","393","394","395","396"],[],"import Alert from 'react-bootstrap/Alert'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ToastHeader from 'react-bootstrap/ToastHeader'\r\nimport ToastBody from 'react-bootstrap/ToastBody'\r\nimport ToastContainer from 'react-bootstrap/ToastContainer'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\n\r\n\r\nconst add_text_to_GuidedAnnotationInfoAlert = (g_is_good_alignment,StateMachineState, doc_json) => {\r\n    console.log(`doc_json:${JSON.stringify(doc_json)}`)\r\n    const NoAlign = (doc_json.filter((word) => {return word.span_highlighted}).length===0) ? \"(NO ALIGN)\":\"\"\r\n    if(g_is_good_alignment) {\r\n      if(StateMachineState===\"ANNOTATION\"){return `<br/><b>Hit \\\"CONFIRM ${NoAlign}\\\" to proceed.</b>`}\r\n      if(StateMachineState===\"SENTENCE END\"){return `<br/><b>Hit \\\"NEXT SENTENCE ${NoAlign}\\\" to proceed.</b>`}\r\n      if(StateMachineState===\"SUMMARY END\"){return `<br/><b>Hit \\\"SUBMIT ${NoAlign}\\\" to finish.</b>`}\r\n    } \r\n    // else {\r\n    //   if(StateMachineState===\"SENTENCE END\"){return \"<br/>When you are finished, <b>hit \\\"NEXT SENTENCE ${NoAlign}\\\"</b> to confirm and proceed to the next sentence.\"}\r\n    //   if(StateMachineState===\"SUMMARY END\"){return \"<br/>When you are finished, <b>hit \\\"SUBMIT ${NoAlign}\\\"</b> to confirm and finish.\"}\r\n    // }\r\n    return \"\"\r\n  }\r\n\r\n\r\n  const string_to_span = (span_str) => {\r\n    const sub_strings = span_str.split(\";\");\r\n    const lims = sub_strings.map((sub_string) => sub_string.split(\"-\").map((lim) => parseInt(lim)))\r\n    // console.log(`lims:${JSON.stringify(span_str)}`)\r\n    const ids = lims.map(([start, end]) => Array(end - start + 1).fill().map((_, idx) => start + idx)).flat(1)\r\n    return ids.sort(function(a, b) {return a - b;})\r\n  }\r\n\r\n\r\n\r\n\r\n  const get_span_groups = (g_answer_words_to_glow, words_json, isSummary) => {\r\n    const str_spans = g_answer_words_to_glow[\"ids\"].split(\";\")\r\n    let non_glow_min_lim = (isSummary) ? g_answer_words_to_glow[\"start_tkn\"].toString() : \"0\";\r\n    let span_groups = []\r\n    for (let i = 0; i < str_spans.length; i++) {\r\n      const lims = str_spans[i].split(\"-\")\r\n      let non_glow_max_lim = parseInt(lims[0]) - 1;\r\n      non_glow_max_lim = non_glow_max_lim.toString()\r\n      // start with an empty array because the glowing words are the odd spans (1,3,5,7... rather than 0,2,4...)\r\n      if (lims[0]===non_glow_min_lim){\r\n        span_groups=span_groups.concat([[]])\r\n      } else {\r\n        span_groups=span_groups.concat([string_to_span(`${non_glow_min_lim}-${non_glow_max_lim}`)])\r\n      }\r\n      span_groups=span_groups.concat([string_to_span(str_spans[i])])\r\n      non_glow_min_lim = parseInt(lims[1]) + 1\r\n      non_glow_min_lim = non_glow_min_lim.toString()\r\n    }\r\n    // final span\r\n    let non_glow_max_lim = (isSummary) ?  words_json.length + g_answer_words_to_glow[\"start_tkn\"] : words_json.length\r\n    non_glow_max_lim = non_glow_max_lim.toString()\r\n    console.log(`span_groups:${JSON.stringify(span_groups)}`)\r\n    console.log(`non_glow_min_lim:${non_glow_min_lim} and non_glow_max_lim:${non_glow_max_lim}`)\r\n    span_groups=span_groups.concat([string_to_span(`${non_glow_min_lim}-${non_glow_max_lim}`)])\r\n    console.log(\"span_groups:\")\r\n    console.log(span_groups)\r\n\r\n    const doc_words_groups = span_groups.map((tkns) => {return words_json.filter((word) => {return tkns.includes(word.tkn_id)})})\r\n    return doc_words_groups\r\n  }\r\n\r\n  export { add_text_to_GuidedAnnotationInfoAlert, string_to_span, get_span_groups }\r\n\r\n\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial.js",["397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426"],[],"import { useState, useEffect, useRef } from 'react'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Annotation from './Annotation';\r\nimport { Player, BigPlayButton } from 'video-react';\r\nimport \"../../node_modules/video-react/dist/video-react.css\"; // import css\r\n\r\nimport { MachineStateHandler,  } from './Annotation_event_handlers';\r\nimport { TutorialCard } from './TutorialCard';\r\nimport { t_StateMachineStateIdHandler, getTutorialCardTitle, getTutorialCardText } from './Tutorial_utils'\r\nimport _ from 'underscore';\r\n\r\n\r\nconst Tutorial = ({doc_json, setDocJson,\r\n                  t_start_doc_json, t_middle_doc_json, t_sent_end_doc_json, t_submit_doc_json, \r\n                  summary_json, setSummaryJson,\r\n                  t_start_summary_json, t_middle_summary_json, t_sent_end_summary_json, t_submit_summary_json,\r\n                  all_lemma_match_mtx, setAllLemmaMtx,\r\n                  important_lemma_match_mtx, setImportantLemmaMtx,\r\n                  doc_paragraph_breaks, setDocParagraphBreaks,\r\n                  t_state_messages,\r\n                  showAlert, setShowAlert, SUMMARY_WORD_CNT_THR,\r\n                  SubmitModalShow, setSubmitModalShow}) => {\r\n\r\n                    \r\n  const [boldState, setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [oldAlignmentState, setOldAlignmentState] = useState(\"all\"); // for user to choose if want full highlighting history, only current sentence's highlighting history or no history (denoted as \"all\", \"sent\" and \"none\", accordingly)\r\n  const [StateMachineState, SetStateMachineState] = useState(\"ANNOTATION\");\r\n  const [error_message, setErrorMessage] = React.useState(\"\");\r\n  const [CurrSentInd, SetCurrSentInd] = useState(-1);\r\n  const [InfoMessage, SetInfoMessage] = useState(\"\");\r\n  const [AlignmentCount, SetAlignmentCount] = useState(3)\r\n\r\n  const [prevStateMachineState, setPrevStateMachineState] = useState(\"\")\r\n  \r\n  const [prevSummarySpanHighlights, setPrevSummarySpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevDocSpanHighlights, setPrevDocSpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevSummaryJsonRevise, setPrevSummaryJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [prevDocJsonRevise, setPrevDocJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [prevCurrSentInd, setPrevCurrSentInd] = useState(-1) // relevant for restoring previous current sentence\r\n\r\n\r\n  const [DocOnMouseDownID, SetDocOnMouseDownID] = useState(\"-1\");\r\n  const [SummaryOnMouseDownID, SetSummaryOnMouseDownID] = useState(\"-1\");\r\n  const [docOnMouseDownActivated, setDocOnMouseDownActivated] = useState(false);\r\n  const [summaryOnMouseDownActivated, setSummaryOnMouseDownActivated] = useState(false);\r\n  const [hoverActivatedId, setHoverActivatedId] = useState(\"-1\"); // value will be of tkn_id of elem hovered over\r\n  const [hoverActivatedDocOrSummary, setHoverActivatedDocOrSummary] = useState(\"doc\"); // value will be of tkn_id of elem hovered over\r\n  const [sliderBoldStateActivated, setSliderBoldStateActivated] = useState(false);\r\n  const [noAlignModalShow, setNoAlignModalShow] = useState(false)\r\n  const [noAlignApproved, setNoAlignApproved] = useState(false)\r\n\r\n  const [t_StateMachineStateId, t_SetStateMachineStateId] = useState(0);\r\n\r\n  /*************************************** error handling *************************************************/\r\n  const Alert = React.forwardRef(function Alert(props, ref) {return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;});\r\n  \r\n\r\n\r\n  const handleErrorOpen = ({ msg }) => { \r\n    setErrorMessage(msg); \r\n  };\r\n\r\n  const handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n\r\n/************************************************************************************************************* */\r\n\r\n  const isPunct = (tkn_txt) => {\r\n    const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n    const result = tkn_txt.replace(regex, '').replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    return (result === '');\r\n  }\r\n\r\n  const toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n    } else if (turn_off){\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false,  span_alignment_hover:false } : word))\r\n    } else {\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n    }\r\n  }\r\n\r\n  toggleDocSpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    console.log(\"inside toggleSummarySpanHighlight:\")\r\n    console.log(tkn_ids)\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n    } else if (turn_off){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false,  span_alignment_hover:false } : word));\r\n    } else {\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n    }\r\n  }\r\n\r\n  toggleSummarySpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n\r\n  const approveHighlightHandler = () => {\r\n    const doc_tkn_ids = doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));\r\n\r\n\r\n    const summary_tkn_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setSummaryJson(summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));    \r\n \r\n  }\r\n\r\n  const StartReviseStateHandler = (isBackBtn) => {\r\n    if (isBackBtn){\r\n      setDocJson(doc_json.map((word, ind) => {return {...word, all_highlighted: prevDocJsonRevise[ind].all_highlighted, span_highlighted: prevDocJsonRevise[ind].span_highlighted, alignment_id: prevDocJsonRevise[ind].alignment_id}}))\r\n      setSummaryJson(summary_json.map((word, ind) => {return {...word, all_highlighted: prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: prevSummaryJsonRevise[ind].span_highlighted, alignment_id: prevSummaryJsonRevise[ind].alignment_id}}))\r\n    } else{\r\n      const current_sentence_id = CurrSentInd\r\n\r\n      setPrevStateMachineState(StateMachineState);\r\n      setPrevDocSpanHighlights(doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      setPrevSummarySpanHighlights(summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      setPrevCurrSentInd(current_sentence_id)\r\n\r\n      setDocJson(doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n    }\r\n    SetCurrSentInd(-1)\r\n  }\r\n\r\n  const ExitReviseHandler = () => {\r\n    setDocJson(doc_json.map((word, ind) => prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n    setSummaryJson(summary_json.map((word, ind) => prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n    const prev_state = prevStateMachineState;\r\n    SetStateMachineState(prevStateMachineState);\r\n\r\n    const prev_current_sent_id = prevCurrSentInd\r\n    SetCurrSentInd(prev_current_sent_id)\r\n    \r\n    setPrevCurrSentInd(-1)\r\n    setPrevStateMachineState(\"\");\r\n    setPrevSummarySpanHighlights([]);\r\n    setPrevDocSpanHighlights([]);\r\n    return prev_state\r\n  }\r\n\r\n  const RemoveAlignmentId = (word, chosen_align_id) => {\r\n    const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n    return new_alignment_id;\r\n  }\r\n\r\n  const ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n    setPrevSummaryJsonRevise(summary_json);\r\n    setPrevDocJsonRevise(doc_json);\r\n\r\n    const chosen_align_id = (clickedWordInfo[0] === 'doc') ? doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n                                                             summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n\r\n    setSummaryJson(summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    setDocJson(doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    \r\n    const chosen_align_currSentId = summary_json.filter((word) => {return word.alignment_id.includes(chosen_align_id)})[0].sent_id\r\n    SetCurrSentInd(chosen_align_currSentId)\r\n  }\r\n\r\n\r\n  const SetSummaryShadow = (sent_id) => {\r\n    setSummaryJson(summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n    setSummaryJson(\r\n      summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n      (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n      )\r\n  }\r\n\r\n  const SetDocBoldface = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n  const checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n    const which_match_mtx = important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const boldStateHandler = (event, newValue) => {\r\n    if (event !== undefined){\r\n      setSliderBoldStateActivated(true)\r\n    }\r\n    if (!newValue){\r\n      setBoldState(\"none\");\r\n      SetDocBoldface([]);\r\n    } else {\r\n      setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n\r\n  const SetDocOldHighlights = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const SetSummaryOldHighlights = (tkn_ids) => {\r\n    setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const FindDocAlignmentPerSent = (sent_ind) => {\r\n    let curr_sent_alignment_ids = summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n    curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n    const doc_ids = doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n    return doc_ids\r\n  }\r\n\r\n\r\n  const oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n\r\n    if (newValue=='1'){\r\n      setOldAlignmentState(\"none\");\r\n      SetDocOldHighlights([]);\r\n      SetSummaryOldHighlights([]);\r\n    } else {\r\n      setOldAlignmentState(\"all\");\r\n      const doc_ids = doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      const summary_ids = summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      SetDocOldHighlights(doc_ids);\r\n      SetSummaryOldHighlights(summary_ids);\r\n    }\r\n  }\r\n\r\n  oldAlignmentStateHandler.defaultProps = {\r\n    sent_ind: -1\r\n  }\r\n\r\n  const changeSummarySentHandler = ({isNext}) => {\r\n    if (isNext){\r\n      SetCurrSentInd(CurrSentInd+1)\r\n      const summary_currSent_old_highlighted_tkn_cnt = summary_json.filter((word) => {return (!isPunct(word.word) && word.sent_id===CurrSentInd && word.old_alignments)}).length // number of words in curr sentence (the one we change from) that was saved as part of an alignment\r\n      const summary_currSent_tkn_cnt = summary_json.filter((word) => {return (!isPunct(word.word) && word.sent_id===CurrSentInd)}).length // all (non-punctuation) words in curr sentence (the one we change from)\r\n\r\n      if(summary_currSent_old_highlighted_tkn_cnt / summary_currSent_tkn_cnt > SUMMARY_WORD_CNT_THR) {\r\n        setShowAlert(\"success\")\r\n        console.log(\"good!\")\r\n      } else {\r\n        setShowAlert(\"warning\")\r\n        console.log(\"bad!\")\r\n      }\r\n    \r\n    } else {\r\n      SetCurrSentInd(CurrSentInd-1)\r\n    }\r\n    setDocJson(doc_json.map((word) => {return {...word, span_highlighted:false}}))\r\n    setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted:false}}))\r\n  }\r\n  \r\n  const hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    // onMouseEnter for \"REVISE HOVER\"\r\n    if (inOrOut === \"in\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      setSummaryJson(summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n    } \r\n    // onMouseLeave for \"REVISE HOVER\"\r\n    else if (inOrOut === \"out\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n    }\r\n    // onMouseEnter for all the alignments choosing states\r\n    // else if (inOrOut === \"in\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      // const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[tkn_id], isHover:true})});\r\n      // setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))\r\n    // } \r\n    // onMouseLeave for all the alignments choosing states\r\n    else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      setDocJson(doc_json.map((word) => {return {...word, red_color:false}}))\r\n    }\r\n\r\n  }\r\n\r\n  const isRedLettered = (summary_tkn_id) => {\r\n    if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > CurrSentInd}).length !== 0)){\r\n      return false\r\n    } else if ((summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))) {\r\n      return false\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n    \r\n    // // no alignment\r\n    if ([16].includes(t_StateMachineStateId) && (typeof forceState !== 'string')  && (![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) && (doc_json.filter((word) => {return word.span_highlighted}).length === 0) && (StateMachineState!==\"START\") && !noAlignApproved) {\r\n      setNoAlignModalShow(true)\r\n      return\r\n    }\r\n    setNoAlignApproved(false)\r\n    \r\n    \r\n    \r\n    setSliderBoldStateActivated(false);\r\n    // if ([5,16].includes(t_StateMachineStateId) || ([11,13].includes(t_StateMachineStateId) && forceState===\"REVISE HOVER\") || (t_StateMachineStateId === 12 && forceState !== \"FINISH REVISION\") || ([14,15].includes(t_StateMachineStateId) && [\"SENTENCE END\", \"ANNOTATION\", \"SUMMARY END\", undefined].includes(forceState))) {\r\n    //   console.log(`forceState situation with: state ${forceState}`);\r\n    // }\r\n    // else{\r\n    //   console.log(\"ignore MachineStateHandlerWrapper\");\r\n    //   return; // AVIVSL: added this so people can't change anything\r\n    // }\r\n    MachineStateHandler(summary_json,\r\n                          StateMachineState, SetStateMachineState,\r\n                          SetInfoMessage, handleErrorOpen, isPunct,\r\n                          CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                          AlignmentCount, SetAlignmentCount,\r\n                          approveHighlightHandler,\r\n                          clickedWordInfo, forceState, \r\n                          StartReviseStateHandler, ExitReviseHandler,\r\n                          ReviseChooseAlignHandler, \r\n                          isBackBtn,\r\n                          setPrevSummaryJsonRevise, setPrevDocJsonRevise\r\n                         );\r\n  }\r\n\r\n  MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n    clickedWordInfo: [],\r\n    isBackBtn: false\r\n  }\r\n\r\n\r\n/**************************************************************************************************************/\r\n\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (StateMachineState !== \"START\" && summary_json.filter((word) => {return word.sent_id===CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (summary_json.filter((word) => { return word.sent_id===CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) {\r\n      finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n      if (isLastSent) {\r\n        MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) { \r\n      console.log(`curr state is ${StateMachineState}`);\r\n      console.log(`curr CurrSentInd is ${CurrSentInd}`)\r\n      console.log(\"back to square one\");\r\n      finishedSent.current = false;\r\n      MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n\r\n  \r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    SetSummaryShadowAndUpdateHighlights(CurrSentInd);\r\n  }, [CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, true);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, false);\r\n    }\r\n  }, [StateMachineState, CurrSentInd, AlignmentCount, summary_json]);\r\n  /********************************************************************************/\r\n\r\n\r\n    /***************************** old alignments controlling *****************************/ \r\n    const prevState = useRef(\"\")\r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState)) {\r\n        oldAlignmentStateHandler({event:undefined, newValue:'2', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE CLICKED\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE HOVER\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'2', sent_ind:-1});\r\n      }\r\n      prevState.current = StateMachineState;\r\n    }, [StateMachineState, AlignmentCount]);\r\n    /********************************************************************************/\r\n    useEffect(() => {\r\n      console.log(`t_doc_json is:`)\r\n      console.log(doc_json)\r\n    }, []);\r\n    \r\n    \r\n    \r\n    /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n    useEffect(() => {\r\n      if (DocOnMouseDownID !== \"-1\"){\r\n        setDocOnMouseDownActivated(true)\r\n      } else if (DocOnMouseDownID === \"-1\"){\r\n        setDocOnMouseDownActivated(false)\r\n      } \r\n      \r\n      if (SummaryOnMouseDownID !== \"-1\") {\r\n        setSummaryOnMouseDownActivated(true)\r\n      } else {\r\n        setSummaryOnMouseDownActivated(false)\r\n      }\r\n    }, [DocOnMouseDownID,SummaryOnMouseDownID]);\r\n    \r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)){\r\n        if(docOnMouseDownActivated) {\r\n          console.log(`DocOnMouseDownID is ${DocOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (DocOnMouseDownID > hoverActivatedId) ? hoverActivatedId : DocOnMouseDownID;\r\n          const max_ID =  (DocOnMouseDownID > hoverActivatedId) ? DocOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setDocJson(doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!docOnMouseDownActivated){\r\n          setDocJson(doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n        }\r\n        if(summaryOnMouseDownActivated) {\r\n          console.log(`SummaryOnMouseDownID is ${SummaryOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? hoverActivatedId : SummaryOnMouseDownID;\r\n          const max_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? SummaryOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setSummaryJson(summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!summaryOnMouseDownActivated){\r\n          setSummaryJson(summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n          \r\n          if (isRedLettered(hoverActivatedId) && hoverActivatedDocOrSummary === \"summary\") {\r\n            const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[hoverActivatedId], isHover:true})});\r\n            \r\n            console.log(\"red is activated:\")\r\n            console.log(doc_json.filter((word) => {return doc_tkn_ids.includes(word.tkn_id)}).map((word) => {return word.word}))\r\n\r\n            setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n          }  \r\n        }\r\n      }\r\n    }, [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId]);\r\n    /********************************************************************************/ \r\n/**************************************************************************************************************/\r\n\r\n\r\n\r\n    const SubmitHandler = (event) => {\r\n      return\r\n    }\r\n\r\n\r\n  return ( \r\n      <>\r\n         <Annotation \r\n                    isTutorial = {true}                                         isGuidedAnnotation={false} \r\n                    task_id={'0'}                                               doc_paragraph_breaks = {doc_paragraph_breaks}\r\n                    doc_json = {doc_json}                                       setDocJson = {setDocJson}\r\n                    summary_json = {summary_json}                               setSummaryJson = {setSummaryJson}\r\n                    all_lemma_match_mtx = {all_lemma_match_mtx}                 important_lemma_match_mtx = {important_lemma_match_mtx}\r\n                    StateMachineState = {StateMachineState}                     SetStateMachineState = {SetStateMachineState}\r\n                    handleErrorOpen = {handleErrorOpen}                         isPunct = {isPunct}\r\n                    toggleSummarySpanHighlight = {toggleSummarySpanHighlight}   toggleDocSpanHighlight = {toggleDocSpanHighlight}\r\n                    boldState = {boldState}                                     boldStateHandler = {boldStateHandler}\r\n                    SubmitHandler = {SubmitHandler}                             hoverHandler = {hoverHandler}\r\n                    CurrSentInd = {CurrSentInd}                                 SetCurrSentInd = {SetCurrSentInd}\r\n                    InfoMessage = {InfoMessage}                                 MachineStateHandlerWrapper = {MachineStateHandlerWrapper}\r\n                    AlignmentCount = {AlignmentCount}                           SetAlignmentCount = {SetAlignmentCount}\r\n                    oldAlignmentState = {oldAlignmentState}                     oldAlignmentStateHandler = {oldAlignmentStateHandler}\r\n                    DocOnMouseDownID = {DocOnMouseDownID}                       SetDocOnMouseDownID = {SetDocOnMouseDownID}\r\n                    SummaryOnMouseDownID = {SummaryOnMouseDownID}               SetSummaryOnMouseDownID = {SetSummaryOnMouseDownID}\r\n                    docOnMouseDownActivated = {docOnMouseDownActivated}         setDocOnMouseDownActivated = {setDocOnMouseDownActivated}\r\n                    summaryOnMouseDownActivated = {summaryOnMouseDownActivated} setSummaryOnMouseDownActivated = {setSummaryOnMouseDownActivated}\r\n                    setHoverActivatedId = {setHoverActivatedId}                 setHoverActivatedDocOrSummary = {setHoverActivatedDocOrSummary}\r\n                    hoverActivatedId = {hoverActivatedId}\r\n                    t_StateMachineStateId = {t_StateMachineStateId}             t_SetStateMachineStateId = {t_SetStateMachineStateId}\r\n                    t_start_doc_json = {t_start_doc_json}                       t_middle_doc_json = {t_middle_doc_json}\r\n                    t_sent_end_doc_json = {t_sent_end_doc_json}                 t_submit_doc_json = {t_submit_doc_json}\r\n                    t_start_summary_json = {t_start_summary_json}               t_middle_summary_json = {t_middle_summary_json}\r\n                    t_sent_end_summary_json = {t_sent_end_summary_json}         t_submit_summary_json = {t_submit_summary_json}\r\n                    t_state_messages = {t_state_messages}\r\n                    g_guiding_info_msg = {undefined}                            g_is_good_alignment = {undefined}\r\n                    g_show_hint = {undefined}                                   g_setShowHint = {undefined}\r\n                    g_hint_msg = {{\"text\":\"\", \"title\":\"\"}}                      g_showWhereNavbar = {undefined}\r\n                    g_open_hint={undefined}                                     g_setOpenHint={undefined}\r\n                    g_with_glow_hint={undefined}                                g_setWithGlowHint={undefined}\r\n                    g_answer_words_to_glow={{\"type\":\"\", \"ids\":[]}}              g_FinishedModalShow={undefined}\r\n                    g_Guider_msg={{\"type\":\"\", \"where\":\"\", \"text\":\"\"}}           g_setGuiderMsg={undefined}\r\n                    \r\n                    OpeningModalShow = {undefined}                              setOpeningModalShow = {undefined}\r\n                    noAlignModalShow = {noAlignModalShow}                       setNoAlignModalShow = {setNoAlignModalShow}\r\n                    noAlignApproved = {noAlignApproved}                         setNoAlignApproved = {setNoAlignApproved}\r\n                    changeSummarySentHandler = {changeSummarySentHandler}\r\n                    showAlert={showAlert}                                       setShowAlert={setShowAlert}\r\n                    SubmitModalShow={SubmitModalShow}                           setSubmitModalShow={setSubmitModalShow}\r\n                    g_answer_modal_msg={undefined}\r\n                    />\r\n        \r\n        {/* <Player\r\n          playsInline\r\n          src=\"./Videos/old-highlights_m.mp4\"\r\n          fluid={false}\r\n          aspectRatio=\"auto\"\r\n        >\r\n          <BigPlayButton position=\"center\" />\r\n        </Player> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Tutorial\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial_utils.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\TutorialCard.js",["427","428"],[],"import Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton'\r\nimport Dropdown from 'react-bootstrap/Dropdown'\r\nimport { t_StateMachineStateIdHandler, getTutorialCardTitle, getTutorialCardText } from './Tutorial_utils'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst TutorialCard = ({t_StateMachineStateId, t_SetStateMachineStateId, t_state_messages, SetStateMachineState, \r\n                      setDocJson, t_start_doc_json, t_middle_doc_json, t_sent_end_doc_json, t_submit_doc_json,\r\n                      setSummaryJson, t_start_summary_json, t_middle_summary_json, t_sent_end_summary_json, t_submit_summary_json,\r\n                      SetCurrSentInd,\r\n                      MachineStateHandlerWrapper}) => {\r\n    return (\r\n        <Card className={`${(t_StateMachineStateId==0) ? 'tutorial-card-intro' : ''} \r\n                          ${(t_StateMachineStateId==`15`) ? 'tutorial-card-end' : ''}\r\n                          ${(![0,15].includes(t_StateMachineStateId)) ? 'tutorial-card-not-intro' : ''}`}\r\n                            bg=\"info\" border=\"primary\" style={{ width: '30%' }}>\r\n          <Card.Body>\r\n            <Card.Title className='tutorial-title'>{getTutorialCardTitle(t_state_messages,t_StateMachineStateId)}</Card.Title>\r\n            <Card.Text>\r\n              {getTutorialCardText(t_state_messages,t_StateMachineStateId)}\r\n            </Card.Text>\r\n              {(t_StateMachineStateId === 0) && (\r\n                <DropdownButton className=\"tutorial-drop-down-button\" size=\"lg\" variant=\"secondary\" drop=\"end\" id=\"dropdown-button-drop-end\" title=\"Sections\">\r\n                  {t_state_messages.map((t_state) => (\r\n                      <Dropdown.Item as=\"button\" onClick={() => {t_StateMachineStateIdHandler({newStateId:t_state.state_cnt, SetStateMachineState:SetStateMachineState, t_SetStateMachineStateId:t_SetStateMachineStateId, t_StateMachineStateId:t_StateMachineStateId, \r\n                                                                      setDocJson:setDocJson, t_start_doc_json:t_start_doc_json, t_middle_doc_json:t_middle_doc_json, t_sent_end_doc_json:t_sent_end_doc_json, t_submit_doc_json:t_submit_doc_json,\r\n                                                                      setSummaryJson:setSummaryJson, t_start_summary_json:t_start_summary_json, t_middle_summary_json:t_middle_summary_json, t_sent_end_summary_json:t_sent_end_summary_json, t_submit_summary_json:t_submit_summary_json,\r\n                                                                      SetCurrSentInd:SetCurrSentInd,\r\n                                                                      MachineStateHandlerWrapper:MachineStateHandlerWrapper}\r\n                                                                      )}}\r\n                        >\r\n                      {t_state.title}\r\n                      </Dropdown.Item>\r\n                    ))}\r\n              </DropdownButton>\r\n              )}\r\n                {(t_StateMachineStateId !== 0) && (\r\n                <Button style={{marginRight:\"1%\"}} className=\"btn btn-warning btn-lg\" onClick={() => {t_StateMachineStateIdHandler({newStateId:0, SetStateMachineState:SetStateMachineState, t_SetStateMachineStateId:t_SetStateMachineStateId, t_StateMachineStateId:t_StateMachineStateId, \r\n                                                                                                      setDocJson:setDocJson, t_start_doc_json:t_start_doc_json, t_middle_doc_json:t_middle_doc_json, t_sent_end_doc_json:t_sent_end_doc_json, t_submit_doc_json:t_submit_doc_json,\r\n                                                                                                      setSummaryJson:setSummaryJson, t_start_summary_json:t_start_summary_json, t_middle_summary_json:t_middle_summary_json, t_sent_end_summary_json:t_sent_end_summary_json, t_submit_summary_json:t_submit_summary_json,\r\n                                                                                                      SetCurrSentInd:SetCurrSentInd,\r\n                                                                                                      MachineStateHandlerWrapper:MachineStateHandlerWrapper})}}\r\n                >\r\n                  Back to Intro\r\n              </Button>\r\n              )}\r\n              {(t_StateMachineStateId !== 0) && (\r\n                <Button className=\"btn btn-dark btn-lg\" onClick={() => {t_StateMachineStateIdHandler({newStateId:t_StateMachineStateId-1, SetStateMachineState:SetStateMachineState, t_SetStateMachineStateId:t_SetStateMachineStateId, t_StateMachineStateId:t_StateMachineStateId, \r\n                                                                                                      setDocJson:setDocJson, t_start_doc_json:t_start_doc_json, t_middle_doc_json:t_middle_doc_json, t_sent_end_doc_json:t_sent_end_doc_json, t_submit_doc_json:t_submit_doc_json,\r\n                                                                                                      setSummaryJson:setSummaryJson, t_start_summary_json:t_start_summary_json, t_middle_summary_json:t_middle_summary_json, t_sent_end_summary_json:t_sent_end_summary_json, t_submit_summary_json:t_submit_summary_json,\r\n                                                                                                      SetCurrSentInd:SetCurrSentInd,\r\n                                                                                                      MachineStateHandlerWrapper:MachineStateHandlerWrapper})}}\r\n                >\r\n                  Back\r\n              </Button>\r\n              )}\r\n\r\n            {(t_StateMachineStateId !== 15) && (\r\n                <Button className=\"btn btn-primary btn-lg right-button\" onClick={() => {t_StateMachineStateIdHandler({newStateId:t_StateMachineStateId+1, SetStateMachineState:SetStateMachineState, t_SetStateMachineStateId:t_SetStateMachineStateId, t_StateMachineStateId:t_StateMachineStateId, \r\n                                                                                                      setDocJson:setDocJson, t_start_doc_json:t_start_doc_json, t_middle_doc_json:t_middle_doc_json, t_sent_end_doc_json:t_sent_end_doc_json, t_submit_doc_json:t_submit_doc_json,\r\n                                                                                                      setSummaryJson:setSummaryJson, t_start_summary_json:t_start_summary_json, t_middle_summary_json:t_middle_summary_json, t_sent_end_summary_json:t_sent_end_summary_json, t_submit_summary_json:t_submit_summary_json,\r\n                                                                                                      SetCurrSentInd:SetCurrSentInd,\r\n                                                                                                      MachineStateHandlerWrapper:MachineStateHandlerWrapper})}}\r\n                >\r\n                  Next\r\n              </Button>\r\n            )}\r\n            {(t_StateMachineStateId === 15) && (\r\n              <Link to=\"/guidedAnnotation\">\r\n                <Button className=\"btn btn-success btn-lg right-button\">\r\n              To Guided Annotation\r\n              </Button>\r\n              </Link>\r\n            )}\r\n          </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport { TutorialCard }\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\mturk_utils.js",["429"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions_short.js",["430"],[],"import { Title } from '@mui/icons-material';\r\nimport good_alignment_img from '../data/Instructions_short/alignment_example.JPG'; // Tell webpack this JS file uses this image\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport wrong_alignment_img from '../data/Instructions_short/alignment_example_wrong_editted.JPG'; // Tell webpack this JS file uses this image\r\nimport { Player, BigPlayButton } from 'video-react';\r\n// import ReactPlayer from 'react-player'\r\nimport \"../../node_modules/video-react/dist/video-react.css\"; // import css\r\n\r\nconst Instructions_short = () => {\r\n  return (\r\n      <div>\r\n        <section  className=\"InstructionsBody\">\r\n          <h3>Instructions</h3>\r\n          <h4>\r\n            In this task, you are presented with a document and its summary.\r\n            <br/>\r\n            Your goal is to identify which phrases in the <u>document</u> contributed to the creation of the summary and highlight them.\r\n            <br/>\r\n            Let's look at an example:\r\n            <br/>\r\n            <img className=\"instruction_images\" src={good_alignment_img} alt=\"some_span_chosen\" />\r\n            <br/>\r\n            We can see that the summary is derived from three spans in the document:\r\n            <ul>\r\n              <li>\"Two U.S. Air Force F-16 fighters...crashed and exploded today\" (in the summary) is derived from the first highlighted span in the document.</li>\r\n              <li>\"each carrying a single pilot\" (in the summary) is derived from the third highlighted span in the document.</li>\r\n              <li>\"from the 50th Tactical Air Wing at Hahn\" (in the summary) is derived from the second highlighted span in the document.</li>\r\n            </ul>\r\n            <br/>\r\n            <b><u>Pay attention</u>!</b>\r\n            <br/>\r\n            <b>It is important that you highlight everything that is mentioned in the summary.</b>\r\n            <br/>\r\n            Highlighting only the first highlighted span (\"Two U.S. Air Force F-16 fighter jets crashed today and exploded\") \r\n            <br/>\r\n            would overlook details about those jets that are listed in the summary.\r\n            <br/>\r\n            <b><u>In addition</u>:</b>\r\n            <br/>\r\n            <b>Make sure you don't highlight information that wasn't mentioned in the summary.</b>\r\n            <br/>\r\n            In our example, the following highlighting would have been <b><u>wrong</u></b>:\r\n            <br/>\r\n            <img className=\"instruction_images\" src={wrong_alignment_img} alt=\"some_span_chosen\" />\r\n            <br/>\r\n            The reason this highlighting is incorrect is that it wasn't mentioned in the summary that the crash occurred at 1:30 P.M.\r\n            <br/>\r\n            Similarly, highlighting the \"She said\" that appears before the second highlight would be incorrect, \r\n            <br/>\r\n            since this information does not appear in the summary.\r\n            <br/>\r\n            <br/>\r\n            Finally, please watch the following short video, which explains how to use the Task Interface, \r\n            <br/>\r\n            and then proceed to the task by clicking the \"TO TASK\" button which is at the bottom-right corner of the page:\r\n            <br/>\r\n            <br/>\r\n\r\n            {/* <div className='player-wrapper'>\r\n              <ReactPlayer\r\n                className='react-player'\r\n                url='https://www.youtube.com/watch?v=ysz5S6PUM-U'\r\n                width='100%'\r\n                height='100%'\r\n              />\r\n            </div> */}\r\n\r\n\r\n          <div className='player-wrapper'>\r\n            <Player\r\n              playsInline\r\n              src=\"./Videos/short_intro_UI_video.mp4\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n            >\r\n              <BigPlayButton position=\"center\" />\r\n            </Player>\r\n          </div>\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          <Link to=\"/\">\r\n            <button type=\"button\" className={`btn btn-primary btn-huge`}>\r\n                  TO TASK\r\n            </button>\r\n          </Link>\r\n\r\n          </h4>\r\n\r\n        </section>\r\n\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Instructions_short\r\n",{"ruleId":"431","replacedBy":"432"},{"ruleId":"433","replacedBy":"434"},{"ruleId":"435","severity":1,"message":"436","line":7,"column":8,"nodeType":"437","messageId":"438","endLine":7,"endColumn":17},{"ruleId":"435","severity":1,"message":"439","line":8,"column":8,"nodeType":"437","messageId":"438","endLine":8,"endColumn":16},{"ruleId":"435","severity":1,"message":"440","line":11,"column":8,"nodeType":"437","messageId":"438","endLine":11,"endColumn":24},{"ruleId":"435","severity":1,"message":"441","line":27,"column":8,"nodeType":"437","messageId":"438","endLine":27,"endColumn":34},{"ruleId":"435","severity":1,"message":"442","line":28,"column":8,"nodeType":"437","messageId":"438","endLine":28,"endColumn":31},{"ruleId":"435","severity":1,"message":"443","line":29,"column":8,"nodeType":"437","messageId":"438","endLine":29,"endColumn":39},{"ruleId":"435","severity":1,"message":"444","line":30,"column":8,"nodeType":"437","messageId":"438","endLine":30,"endColumn":41},{"ruleId":"435","severity":1,"message":"445","line":37,"column":31,"nodeType":"437","messageId":"438","endLine":37,"endColumn":52},{"ruleId":"435","severity":1,"message":"446","line":39,"column":8,"nodeType":"437","messageId":"438","endLine":39,"endColumn":9},{"ruleId":"435","severity":1,"message":"447","line":40,"column":8,"nodeType":"437","messageId":"438","endLine":40,"endColumn":11},{"ruleId":"435","severity":1,"message":"448","line":47,"column":10,"nodeType":"437","messageId":"438","endLine":47,"endColumn":20},{"ruleId":"435","severity":1,"message":"449","line":48,"column":10,"nodeType":"437","messageId":"438","endLine":48,"endColumn":24},{"ruleId":"435","severity":1,"message":"450","line":49,"column":10,"nodeType":"437","messageId":"438","endLine":49,"endColumn":26},{"ruleId":"435","severity":1,"message":"451","line":50,"column":10,"nodeType":"437","messageId":"438","endLine":50,"endColumn":30},{"ruleId":"435","severity":1,"message":"452","line":51,"column":10,"nodeType":"437","messageId":"438","endLine":51,"endColumn":27},{"ruleId":"435","severity":1,"message":"453","line":52,"column":10,"nodeType":"437","messageId":"438","endLine":52,"endColumn":31},{"ruleId":"435","severity":1,"message":"454","line":53,"column":10,"nodeType":"437","messageId":"438","endLine":53,"endColumn":29},{"ruleId":"435","severity":1,"message":"455","line":54,"column":10,"nodeType":"437","messageId":"438","endLine":54,"endColumn":33},{"ruleId":"435","severity":1,"message":"456","line":55,"column":10,"nodeType":"437","messageId":"438","endLine":55,"endColumn":27},{"ruleId":"435","severity":1,"message":"457","line":56,"column":10,"nodeType":"437","messageId":"438","endLine":56,"endColumn":31},{"ruleId":"435","severity":1,"message":"458","line":58,"column":10,"nodeType":"437","messageId":"438","endLine":58,"endColumn":31},{"ruleId":"435","severity":1,"message":"459","line":59,"column":10,"nodeType":"437","messageId":"438","endLine":59,"endColumn":37},{"ruleId":"435","severity":1,"message":"460","line":60,"column":10,"nodeType":"437","messageId":"438","endLine":60,"endColumn":32},{"ruleId":"435","severity":1,"message":"461","line":61,"column":10,"nodeType":"437","messageId":"438","endLine":61,"endColumn":26},{"ruleId":"435","severity":1,"message":"462","line":65,"column":10,"nodeType":"437","messageId":"438","endLine":65,"endColumn":20},{"ruleId":"435","severity":1,"message":"463","line":66,"column":10,"nodeType":"437","messageId":"438","endLine":66,"endColumn":24},{"ruleId":"435","severity":1,"message":"464","line":67,"column":10,"nodeType":"437","messageId":"438","endLine":67,"endColumn":31},{"ruleId":"435","severity":1,"message":"465","line":68,"column":10,"nodeType":"437","messageId":"438","endLine":68,"endColumn":37},{"ruleId":"435","severity":1,"message":"466","line":69,"column":10,"nodeType":"437","messageId":"438","endLine":69,"endColumn":32},{"ruleId":"435","severity":1,"message":"467","line":70,"column":10,"nodeType":"437","messageId":"438","endLine":70,"endColumn":21},{"ruleId":"435","severity":1,"message":"468","line":70,"column":23,"nodeType":"437","messageId":"438","endLine":70,"endColumn":37},{"ruleId":"435","severity":1,"message":"469","line":71,"column":10,"nodeType":"437","messageId":"438","endLine":71,"endColumn":29},{"ruleId":"435","severity":1,"message":"470","line":71,"column":31,"nodeType":"437","messageId":"438","endLine":71,"endColumn":53},{"ruleId":"435","severity":1,"message":"471","line":72,"column":10,"nodeType":"437","messageId":"438","endLine":72,"endColumn":29},{"ruleId":"435","severity":1,"message":"472","line":74,"column":10,"nodeType":"437","messageId":"438","endLine":74,"endColumn":23},{"ruleId":"435","severity":1,"message":"473","line":75,"column":10,"nodeType":"437","messageId":"438","endLine":75,"endColumn":23},{"ruleId":"435","severity":1,"message":"474","line":75,"column":25,"nodeType":"437","messageId":"438","endLine":75,"endColumn":41},{"ruleId":"435","severity":1,"message":"475","line":76,"column":10,"nodeType":"437","messageId":"438","endLine":76,"endColumn":26},{"ruleId":"435","severity":1,"message":"476","line":77,"column":10,"nodeType":"437","messageId":"438","endLine":77,"endColumn":33},{"ruleId":"435","severity":1,"message":"477","line":79,"column":10,"nodeType":"437","messageId":"438","endLine":79,"endColumn":37},{"ruleId":"435","severity":1,"message":"478","line":79,"column":39,"nodeType":"437","messageId":"438","endLine":79,"endColumn":69},{"ruleId":"435","severity":1,"message":"479","line":80,"column":10,"nodeType":"437","messageId":"438","endLine":80,"endColumn":33},{"ruleId":"435","severity":1,"message":"480","line":80,"column":35,"nodeType":"437","messageId":"438","endLine":80,"endColumn":61},{"ruleId":"435","severity":1,"message":"481","line":81,"column":10,"nodeType":"437","messageId":"438","endLine":81,"endColumn":33},{"ruleId":"435","severity":1,"message":"482","line":81,"column":35,"nodeType":"437","messageId":"438","endLine":81,"endColumn":61},{"ruleId":"435","severity":1,"message":"483","line":82,"column":10,"nodeType":"437","messageId":"438","endLine":82,"endColumn":29},{"ruleId":"435","severity":1,"message":"484","line":82,"column":31,"nodeType":"437","messageId":"438","endLine":82,"endColumn":53},{"ruleId":"435","severity":1,"message":"485","line":83,"column":10,"nodeType":"437","messageId":"438","endLine":83,"endColumn":27},{"ruleId":"435","severity":1,"message":"486","line":83,"column":29,"nodeType":"437","messageId":"438","endLine":83,"endColumn":49},{"ruleId":"435","severity":1,"message":"487","line":86,"column":10,"nodeType":"437","messageId":"438","endLine":86,"endColumn":28},{"ruleId":"435","severity":1,"message":"488","line":86,"column":30,"nodeType":"437","messageId":"438","endLine":86,"endColumn":51},{"ruleId":"435","severity":1,"message":"489","line":87,"column":10,"nodeType":"437","messageId":"438","endLine":87,"endColumn":32},{"ruleId":"435","severity":1,"message":"490","line":87,"column":34,"nodeType":"437","messageId":"438","endLine":87,"endColumn":59},{"ruleId":"435","severity":1,"message":"491","line":88,"column":10,"nodeType":"437","messageId":"438","endLine":88,"endColumn":35},{"ruleId":"435","severity":1,"message":"492","line":88,"column":37,"nodeType":"437","messageId":"438","endLine":88,"endColumn":65},{"ruleId":"435","severity":1,"message":"493","line":89,"column":10,"nodeType":"437","messageId":"438","endLine":89,"endColumn":39},{"ruleId":"435","severity":1,"message":"494","line":89,"column":41,"nodeType":"437","messageId":"438","endLine":89,"endColumn":73},{"ruleId":"435","severity":1,"message":"495","line":90,"column":10,"nodeType":"437","messageId":"438","endLine":90,"endColumn":28},{"ruleId":"435","severity":1,"message":"496","line":90,"column":30,"nodeType":"437","messageId":"438","endLine":90,"endColumn":51},{"ruleId":"435","severity":1,"message":"497","line":91,"column":10,"nodeType":"437","messageId":"438","endLine":91,"endColumn":38},{"ruleId":"435","severity":1,"message":"498","line":91,"column":40,"nodeType":"437","messageId":"438","endLine":91,"endColumn":71},{"ruleId":"435","severity":1,"message":"499","line":92,"column":10,"nodeType":"437","messageId":"438","endLine":92,"endColumn":36},{"ruleId":"435","severity":1,"message":"500","line":92,"column":38,"nodeType":"437","messageId":"438","endLine":92,"endColumn":67},{"ruleId":"435","severity":1,"message":"501","line":95,"column":10,"nodeType":"437","messageId":"438","endLine":95,"endColumn":23},{"ruleId":"435","severity":1,"message":"502","line":95,"column":25,"nodeType":"437","messageId":"438","endLine":95,"endColumn":40},{"ruleId":"435","severity":1,"message":"503","line":96,"column":10,"nodeType":"437","messageId":"438","endLine":96,"endColumn":28},{"ruleId":"435","severity":1,"message":"504","line":96,"column":30,"nodeType":"437","messageId":"438","endLine":96,"endColumn":49},{"ruleId":"435","severity":1,"message":"505","line":97,"column":10,"nodeType":"437","messageId":"438","endLine":97,"endColumn":41},{"ruleId":"435","severity":1,"message":"506","line":97,"column":43,"nodeType":"437","messageId":"438","endLine":97,"endColumn":73},{"ruleId":"435","severity":1,"message":"507","line":98,"column":10,"nodeType":"437","messageId":"438","endLine":98,"endColumn":46},{"ruleId":"435","severity":1,"message":"508","line":98,"column":48,"nodeType":"437","messageId":"438","endLine":98,"endColumn":82},{"ruleId":"435","severity":1,"message":"509","line":99,"column":10,"nodeType":"437","messageId":"438","endLine":99,"endColumn":28},{"ruleId":"435","severity":1,"message":"510","line":100,"column":10,"nodeType":"437","messageId":"438","endLine":100,"endColumn":33},{"ruleId":"435","severity":1,"message":"511","line":100,"column":35,"nodeType":"437","messageId":"438","endLine":100,"endColumn":58},{"ruleId":"435","severity":1,"message":"512","line":101,"column":10,"nodeType":"437","messageId":"438","endLine":101,"endColumn":30},{"ruleId":"435","severity":1,"message":"513","line":101,"column":32,"nodeType":"437","messageId":"438","endLine":101,"endColumn":54},{"ruleId":"435","severity":1,"message":"514","line":102,"column":10,"nodeType":"437","messageId":"438","endLine":102,"endColumn":29},{"ruleId":"435","severity":1,"message":"515","line":103,"column":10,"nodeType":"437","messageId":"438","endLine":103,"endColumn":21},{"ruleId":"435","severity":1,"message":"516","line":103,"column":23,"nodeType":"437","messageId":"438","endLine":103,"endColumn":36},{"ruleId":"435","severity":1,"message":"517","line":104,"column":10,"nodeType":"437","messageId":"438","endLine":104,"endColumn":20},{"ruleId":"435","severity":1,"message":"518","line":104,"column":22,"nodeType":"437","messageId":"438","endLine":104,"endColumn":34},{"ruleId":"435","severity":1,"message":"519","line":106,"column":10,"nodeType":"437","messageId":"438","endLine":106,"endColumn":28},{"ruleId":"435","severity":1,"message":"520","line":106,"column":30,"nodeType":"437","messageId":"438","endLine":106,"endColumn":51},{"ruleId":"435","severity":1,"message":"521","line":107,"column":10,"nodeType":"437","messageId":"438","endLine":107,"endColumn":27},{"ruleId":"435","severity":1,"message":"522","line":107,"column":29,"nodeType":"437","messageId":"438","endLine":107,"endColumn":49},{"ruleId":"435","severity":1,"message":"523","line":109,"column":23,"nodeType":"437","messageId":"438","endLine":109,"endColumn":37},{"ruleId":"435","severity":1,"message":"524","line":110,"column":39,"nodeType":"437","messageId":"438","endLine":110,"endColumn":67},{"ruleId":"435","severity":1,"message":"525","line":111,"column":10,"nodeType":"437","messageId":"438","endLine":111,"endColumn":27},{"ruleId":"435","severity":1,"message":"526","line":111,"column":29,"nodeType":"437","messageId":"438","endLine":111,"endColumn":48},{"ruleId":"435","severity":1,"message":"527","line":112,"column":10,"nodeType":"437","messageId":"438","endLine":112,"endColumn":28},{"ruleId":"435","severity":1,"message":"528","line":112,"column":30,"nodeType":"437","messageId":"438","endLine":112,"endColumn":49},{"ruleId":"435","severity":1,"message":"529","line":113,"column":10,"nodeType":"437","messageId":"438","endLine":113,"endColumn":32},{"ruleId":"435","severity":1,"message":"530","line":113,"column":34,"nodeType":"437","messageId":"438","endLine":113,"endColumn":56},{"ruleId":"435","severity":1,"message":"531","line":114,"column":10,"nodeType":"437","messageId":"438","endLine":114,"endColumn":22},{"ruleId":"435","severity":1,"message":"532","line":115,"column":10,"nodeType":"437","messageId":"438","endLine":115,"endColumn":27},{"ruleId":"435","severity":1,"message":"533","line":115,"column":29,"nodeType":"437","messageId":"438","endLine":115,"endColumn":47},{"ruleId":"435","severity":1,"message":"534","line":181,"column":9,"nodeType":"437","messageId":"438","endLine":181,"endColumn":26},{"ruleId":"435","severity":1,"message":"535","line":408,"column":11,"nodeType":"437","messageId":"438","endLine":408,"endColumn":26},{"ruleId":"435","severity":1,"message":"536","line":426,"column":13,"nodeType":"437","messageId":"438","endLine":426,"endColumn":19},{"ruleId":"435","severity":1,"message":"537","line":442,"column":9,"nodeType":"437","messageId":"438","endLine":442,"endColumn":32},{"ruleId":"538","severity":1,"message":"539","line":452,"column":17,"nodeType":"540","messageId":"541","endLine":452,"endColumn":19},{"ruleId":"542","severity":1,"message":"543","line":591,"column":6,"nodeType":"544","endLine":591,"endColumn":20,"suggestions":"545"},{"ruleId":"542","severity":1,"message":"546","line":599,"column":6,"nodeType":"544","endLine":599,"endColumn":19,"suggestions":"547"},{"ruleId":"542","severity":1,"message":"548","line":612,"column":6,"nodeType":"544","endLine":612,"endColumn":8,"suggestions":"549"},{"ruleId":"542","severity":1,"message":"550","line":628,"column":8,"nodeType":"544","endLine":628,"endColumn":43,"suggestions":"551"},{"ruleId":"542","severity":1,"message":"552","line":694,"column":8,"nodeType":"544","endLine":694,"endColumn":80,"suggestions":"553"},{"ruleId":"542","severity":1,"message":"554","line":813,"column":8,"nodeType":"544","endLine":813,"endColumn":10,"suggestions":"555"},{"ruleId":"542","severity":1,"message":"556","line":837,"column":8,"nodeType":"544","endLine":837,"endColumn":20,"suggestions":"557"},{"ruleId":"558","severity":1,"message":"559","line":882,"column":48,"nodeType":"560","messageId":"561","endLine":882,"endColumn":69},{"ruleId":"435","severity":1,"message":"562","line":7,"column":8,"nodeType":"437","messageId":"438","endLine":7,"endColumn":12},{"ruleId":"435","severity":1,"message":"563","line":9,"column":10,"nodeType":"437","messageId":"438","endLine":9,"endColumn":18},{"ruleId":"435","severity":1,"message":"535","line":369,"column":13,"nodeType":"437","messageId":"438","endLine":369,"endColumn":28},{"ruleId":"435","severity":1,"message":"536","line":383,"column":15,"nodeType":"437","messageId":"438","endLine":383,"endColumn":21},{"ruleId":"435","severity":1,"message":"537","line":399,"column":11,"nodeType":"437","messageId":"438","endLine":399,"endColumn":34},{"ruleId":"538","severity":1,"message":"539","line":409,"column":19,"nodeType":"540","messageId":"541","endLine":409,"endColumn":21},{"ruleId":"435","severity":1,"message":"564","line":829,"column":11,"nodeType":"437","messageId":"438","endLine":829,"endColumn":38},{"ruleId":"565","severity":1,"message":"566","line":850,"column":212,"nodeType":"567","messageId":"568","endLine":850,"endColumn":213,"suggestions":"569"},{"ruleId":"565","severity":1,"message":"566","line":850,"column":240,"nodeType":"567","messageId":"568","endLine":850,"endColumn":241,"suggestions":"570"},{"ruleId":"565","severity":1,"message":"566","line":879,"column":210,"nodeType":"567","messageId":"568","endLine":879,"endColumn":211,"suggestions":"571"},{"ruleId":"565","severity":1,"message":"566","line":879,"column":238,"nodeType":"567","messageId":"568","endLine":879,"endColumn":239,"suggestions":"572"},{"ruleId":"565","severity":1,"message":"566","line":886,"column":126,"nodeType":"567","messageId":"568","endLine":886,"endColumn":127,"suggestions":"573"},{"ruleId":"565","severity":1,"message":"566","line":886,"column":332,"nodeType":"567","messageId":"568","endLine":886,"endColumn":333,"suggestions":"574"},{"ruleId":"542","severity":1,"message":"575","line":940,"column":6,"nodeType":"544","endLine":940,"endColumn":20,"suggestions":"576"},{"ruleId":"542","severity":1,"message":"546","line":948,"column":6,"nodeType":"544","endLine":948,"endColumn":19,"suggestions":"577"},{"ruleId":"542","severity":1,"message":"578","line":959,"column":6,"nodeType":"544","endLine":959,"endColumn":68,"suggestions":"579"},{"ruleId":"542","severity":1,"message":"550","line":973,"column":7,"nodeType":"544","endLine":973,"endColumn":42,"suggestions":"580"},{"ruleId":"542","severity":1,"message":"581","line":1012,"column":7,"nodeType":"544","endLine":1012,"endColumn":46,"suggestions":"582"},{"ruleId":"542","severity":1,"message":"583","line":1048,"column":7,"nodeType":"544","endLine":1048,"endColumn":79,"suggestions":"584"},{"ruleId":"542","severity":1,"message":"585","line":1056,"column":7,"nodeType":"544","endLine":1056,"endColumn":25,"suggestions":"586"},{"ruleId":"542","severity":1,"message":"587","line":1081,"column":7,"nodeType":"544","endLine":1081,"endColumn":25,"suggestions":"588"},{"ruleId":"435","severity":1,"message":"589","line":1103,"column":11,"nodeType":"437","messageId":"438","endLine":1103,"endColumn":20},{"ruleId":"542","severity":1,"message":"590","line":1110,"column":6,"nodeType":"544","endLine":1110,"endColumn":25,"suggestions":"591"},{"ruleId":"542","severity":1,"message":"592","line":1125,"column":7,"nodeType":"544","endLine":1125,"endColumn":31,"suggestions":"593"},{"ruleId":"435","severity":1,"message":"594","line":4,"column":8,"nodeType":"437","messageId":"438","endLine":4,"endColumn":24},{"ruleId":"435","severity":1,"message":"595","line":5,"column":8,"nodeType":"437","messageId":"438","endLine":5,"endColumn":16},{"ruleId":"435","severity":1,"message":"596","line":7,"column":10,"nodeType":"437","messageId":"438","endLine":7,"endColumn":29},{"ruleId":"435","severity":1,"message":"597","line":7,"column":31,"nodeType":"437","messageId":"438","endLine":7,"endColumn":53},{"ruleId":"435","severity":1,"message":"598","line":7,"column":55,"nodeType":"437","messageId":"438","endLine":7,"endColumn":59},{"ruleId":"435","severity":1,"message":"599","line":8,"column":8,"nodeType":"437","messageId":"438","endLine":8,"endColumn":16},{"ruleId":"435","severity":1,"message":"600","line":11,"column":10,"nodeType":"437","messageId":"438","endLine":11,"endColumn":29},{"ruleId":"435","severity":1,"message":"601","line":11,"column":31,"nodeType":"437","messageId":"438","endLine":11,"endColumn":56},{"ruleId":"435","severity":1,"message":"602","line":17,"column":8,"nodeType":"437","messageId":"438","endLine":17,"endColumn":11},{"ruleId":"435","severity":1,"message":"603","line":21,"column":8,"nodeType":"437","messageId":"438","endLine":21,"endColumn":18},{"ruleId":"435","severity":1,"message":"604","line":22,"column":8,"nodeType":"437","messageId":"438","endLine":22,"endColumn":19},{"ruleId":"435","severity":1,"message":"605","line":23,"column":8,"nodeType":"437","messageId":"438","endLine":23,"endColumn":19},{"ruleId":"435","severity":1,"message":"606","line":25,"column":8,"nodeType":"437","messageId":"438","endLine":25,"endColumn":11},{"ruleId":"435","severity":1,"message":"607","line":26,"column":10,"nodeType":"437","messageId":"438","endLine":26,"endColumn":21},{"ruleId":"435","severity":1,"message":"608","line":51,"column":49,"nodeType":"437","messageId":"438","endLine":51,"endColumn":63},{"ruleId":"435","severity":1,"message":"609","line":51,"column":65,"nodeType":"437","messageId":"438","endLine":51,"endColumn":80},{"ruleId":"435","severity":1,"message":"610","line":52,"column":10,"nodeType":"437","messageId":"438","endLine":52,"endColumn":34},{"ruleId":"435","severity":1,"message":"611","line":52,"column":36,"nodeType":"437","messageId":"438","endLine":52,"endColumn":55},{"ruleId":"435","severity":1,"message":"612","line":104,"column":10,"nodeType":"437","messageId":"438","endLine":104,"endColumn":30},{"ruleId":"435","severity":1,"message":"613","line":105,"column":10,"nodeType":"437","messageId":"438","endLine":105,"endColumn":25},{"ruleId":"435","severity":1,"message":"614","line":106,"column":10,"nodeType":"437","messageId":"438","endLine":106,"endColumn":34},{"ruleId":"435","severity":1,"message":"615","line":107,"column":10,"nodeType":"437","messageId":"438","endLine":107,"endColumn":29},{"ruleId":"435","severity":1,"message":"616","line":111,"column":10,"nodeType":"437","messageId":"438","endLine":111,"endColumn":22},{"ruleId":"435","severity":1,"message":"617","line":111,"column":24,"nodeType":"437","messageId":"438","endLine":111,"endColumn":39},{"ruleId":"435","severity":1,"message":"618","line":123,"column":9,"nodeType":"437","messageId":"438","endLine":123,"endColumn":23},{"ruleId":"538","severity":1,"message":"539","line":251,"column":27,"nodeType":"540","messageId":"541","endLine":251,"endColumn":29},{"ruleId":"435","severity":1,"message":"619","line":307,"column":9,"nodeType":"437","messageId":"438","endLine":307,"endColumn":18},{"ruleId":"435","severity":1,"message":"620","line":401,"column":9,"nodeType":"437","messageId":"438","endLine":401,"endColumn":33},{"ruleId":"435","severity":1,"message":"621","line":412,"column":9,"nodeType":"437","messageId":"438","endLine":412,"endColumn":28},{"ruleId":"435","severity":1,"message":"622","line":421,"column":9,"nodeType":"437","messageId":"438","endLine":421,"endColumn":26},{"ruleId":"435","severity":1,"message":"623","line":429,"column":9,"nodeType":"437","messageId":"438","endLine":429,"endColumn":34},{"ruleId":"435","severity":1,"message":"624","line":467,"column":9,"nodeType":"437","messageId":"438","endLine":467,"endColumn":21},{"ruleId":"542","severity":1,"message":"625","line":548,"column":62,"nodeType":"437","endLine":548,"endColumn":69},{"ruleId":"542","severity":1,"message":"626","line":550,"column":4,"nodeType":"544","endLine":550,"endColumn":27,"suggestions":"627"},{"ruleId":"542","severity":1,"message":"628","line":584,"column":8,"nodeType":"544","endLine":584,"endColumn":24,"suggestions":"629"},{"ruleId":"542","severity":1,"message":"630","line":596,"column":8,"nodeType":"544","endLine":596,"endColumn":25,"suggestions":"631"},{"ruleId":"542","severity":1,"message":"632","line":612,"column":8,"nodeType":"544","endLine":612,"endColumn":19,"suggestions":"633"},{"ruleId":"435","severity":1,"message":"606","line":7,"column":8,"nodeType":"437","messageId":"438","endLine":7,"endColumn":11},{"ruleId":"435","severity":1,"message":"634","line":9,"column":8,"nodeType":"437","messageId":"438","endLine":9,"endColumn":19},{"ruleId":"435","severity":1,"message":"635","line":10,"column":10,"nodeType":"437","messageId":"438","endLine":10,"endColumn":17},{"ruleId":"435","severity":1,"message":"636","line":14,"column":7,"nodeType":"437","messageId":"438","endLine":14,"endColumn":12},{"ruleId":"435","severity":1,"message":"637","line":1,"column":8,"nodeType":"437","messageId":"438","endLine":1,"endColumn":18},{"ruleId":"431","replacedBy":"638"},{"ruleId":"433","replacedBy":"639"},{"ruleId":"565","severity":1,"message":"566","line":17,"column":32,"nodeType":"567","messageId":"568","endLine":17,"endColumn":33,"suggestions":"640"},{"ruleId":"565","severity":1,"message":"566","line":17,"column":46,"nodeType":"567","messageId":"568","endLine":17,"endColumn":47,"suggestions":"641"},{"ruleId":"565","severity":1,"message":"566","line":24,"column":32,"nodeType":"567","messageId":"568","endLine":24,"endColumn":33,"suggestions":"642"},{"ruleId":"565","severity":1,"message":"566","line":24,"column":45,"nodeType":"567","messageId":"568","endLine":24,"endColumn":46,"suggestions":"643"},{"ruleId":"565","severity":1,"message":"566","line":31,"column":32,"nodeType":"567","messageId":"568","endLine":31,"endColumn":33,"suggestions":"644"},{"ruleId":"565","severity":1,"message":"566","line":31,"column":44,"nodeType":"567","messageId":"568","endLine":31,"endColumn":45,"suggestions":"645"},{"ruleId":"565","severity":1,"message":"566","line":39,"column":32,"nodeType":"567","messageId":"568","endLine":39,"endColumn":33,"suggestions":"646"},{"ruleId":"565","severity":1,"message":"566","line":39,"column":46,"nodeType":"567","messageId":"568","endLine":39,"endColumn":47,"suggestions":"647"},{"ruleId":"565","severity":1,"message":"566","line":60,"column":33,"nodeType":"567","messageId":"568","endLine":60,"endColumn":34,"suggestions":"648"},{"ruleId":"565","severity":1,"message":"566","line":60,"column":40,"nodeType":"567","messageId":"568","endLine":60,"endColumn":41,"suggestions":"649"},{"ruleId":"565","severity":1,"message":"566","line":60,"column":55,"nodeType":"567","messageId":"568","endLine":60,"endColumn":56,"suggestions":"650"},{"ruleId":"565","severity":1,"message":"566","line":60,"column":67,"nodeType":"567","messageId":"568","endLine":60,"endColumn":68,"suggestions":"651"},{"ruleId":"565","severity":1,"message":"566","line":70,"column":31,"nodeType":"567","messageId":"568","endLine":70,"endColumn":32,"suggestions":"652"},{"ruleId":"565","severity":1,"message":"566","line":70,"column":43,"nodeType":"567","messageId":"568","endLine":70,"endColumn":44,"suggestions":"653"},{"ruleId":"565","severity":1,"message":"566","line":70,"column":58,"nodeType":"567","messageId":"568","endLine":70,"endColumn":59,"suggestions":"654"},{"ruleId":"565","severity":1,"message":"566","line":70,"column":70,"nodeType":"567","messageId":"568","endLine":70,"endColumn":71,"suggestions":"655"},{"ruleId":"565","severity":1,"message":"566","line":85,"column":31,"nodeType":"567","messageId":"568","endLine":85,"endColumn":32,"suggestions":"656"},{"ruleId":"565","severity":1,"message":"566","line":85,"column":45,"nodeType":"567","messageId":"568","endLine":85,"endColumn":46,"suggestions":"657"},{"ruleId":"565","severity":1,"message":"566","line":85,"column":60,"nodeType":"567","messageId":"568","endLine":85,"endColumn":61,"suggestions":"658"},{"ruleId":"565","severity":1,"message":"566","line":85,"column":76,"nodeType":"567","messageId":"568","endLine":85,"endColumn":77,"suggestions":"659"},{"ruleId":"565","severity":1,"message":"566","line":93,"column":33,"nodeType":"567","messageId":"568","endLine":93,"endColumn":34,"suggestions":"660"},{"ruleId":"565","severity":1,"message":"566","line":93,"column":49,"nodeType":"567","messageId":"568","endLine":93,"endColumn":50,"suggestions":"661"},{"ruleId":"565","severity":1,"message":"566","line":93,"column":64,"nodeType":"567","messageId":"568","endLine":93,"endColumn":65,"suggestions":"662"},{"ruleId":"565","severity":1,"message":"566","line":93,"column":76,"nodeType":"567","messageId":"568","endLine":93,"endColumn":77,"suggestions":"663"},{"ruleId":"565","severity":1,"message":"566","line":102,"column":33,"nodeType":"567","messageId":"568","endLine":102,"endColumn":34,"suggestions":"664"},{"ruleId":"565","severity":1,"message":"566","line":102,"column":46,"nodeType":"567","messageId":"568","endLine":102,"endColumn":47,"suggestions":"665"},{"ruleId":"565","severity":1,"message":"566","line":102,"column":61,"nodeType":"567","messageId":"568","endLine":102,"endColumn":62,"suggestions":"666"},{"ruleId":"565","severity":1,"message":"566","line":102,"column":69,"nodeType":"567","messageId":"568","endLine":102,"endColumn":70,"suggestions":"667"},{"ruleId":"565","severity":1,"message":"566","line":109,"column":33,"nodeType":"567","messageId":"568","endLine":109,"endColumn":34,"suggestions":"668"},{"ruleId":"565","severity":1,"message":"566","line":109,"column":47,"nodeType":"567","messageId":"568","endLine":109,"endColumn":48,"suggestions":"669"},{"ruleId":"565","severity":1,"message":"566","line":109,"column":62,"nodeType":"567","messageId":"568","endLine":109,"endColumn":63,"suggestions":"670"},{"ruleId":"565","severity":1,"message":"566","line":109,"column":78,"nodeType":"567","messageId":"568","endLine":109,"endColumn":79,"suggestions":"671"},{"ruleId":"565","severity":1,"message":"566","line":119,"column":33,"nodeType":"567","messageId":"568","endLine":119,"endColumn":34,"suggestions":"672"},{"ruleId":"565","severity":1,"message":"566","line":119,"column":49,"nodeType":"567","messageId":"568","endLine":119,"endColumn":50,"suggestions":"673"},{"ruleId":"565","severity":1,"message":"566","line":119,"column":64,"nodeType":"567","messageId":"568","endLine":119,"endColumn":65,"suggestions":"674"},{"ruleId":"565","severity":1,"message":"566","line":119,"column":78,"nodeType":"567","messageId":"568","endLine":119,"endColumn":79,"suggestions":"675"},{"ruleId":"565","severity":1,"message":"566","line":156,"column":26,"nodeType":"567","messageId":"568","endLine":156,"endColumn":27,"suggestions":"676"},{"ruleId":"565","severity":1,"message":"566","line":156,"column":40,"nodeType":"567","messageId":"568","endLine":156,"endColumn":41,"suggestions":"677"},{"ruleId":"565","severity":1,"message":"566","line":163,"column":26,"nodeType":"567","messageId":"568","endLine":163,"endColumn":27,"suggestions":"678"},{"ruleId":"565","severity":1,"message":"566","line":163,"column":39,"nodeType":"567","messageId":"568","endLine":163,"endColumn":40,"suggestions":"679"},{"ruleId":"565","severity":1,"message":"566","line":170,"column":26,"nodeType":"567","messageId":"568","endLine":170,"endColumn":27,"suggestions":"680"},{"ruleId":"565","severity":1,"message":"566","line":170,"column":38,"nodeType":"567","messageId":"568","endLine":170,"endColumn":39,"suggestions":"681"},{"ruleId":"565","severity":1,"message":"566","line":178,"column":26,"nodeType":"567","messageId":"568","endLine":178,"endColumn":27,"suggestions":"682"},{"ruleId":"565","severity":1,"message":"566","line":178,"column":40,"nodeType":"567","messageId":"568","endLine":178,"endColumn":41,"suggestions":"683"},{"ruleId":"565","severity":1,"message":"566","line":199,"column":25,"nodeType":"567","messageId":"568","endLine":199,"endColumn":26,"suggestions":"684"},{"ruleId":"565","severity":1,"message":"566","line":199,"column":32,"nodeType":"567","messageId":"568","endLine":199,"endColumn":33,"suggestions":"685"},{"ruleId":"565","severity":1,"message":"566","line":199,"column":47,"nodeType":"567","messageId":"568","endLine":199,"endColumn":48,"suggestions":"686"},{"ruleId":"565","severity":1,"message":"566","line":199,"column":59,"nodeType":"567","messageId":"568","endLine":199,"endColumn":60,"suggestions":"687"},{"ruleId":"565","severity":1,"message":"566","line":211,"column":25,"nodeType":"567","messageId":"568","endLine":211,"endColumn":26,"suggestions":"688"},{"ruleId":"565","severity":1,"message":"566","line":211,"column":37,"nodeType":"567","messageId":"568","endLine":211,"endColumn":38,"suggestions":"689"},{"ruleId":"565","severity":1,"message":"566","line":211,"column":52,"nodeType":"567","messageId":"568","endLine":211,"endColumn":53,"suggestions":"690"},{"ruleId":"565","severity":1,"message":"566","line":211,"column":64,"nodeType":"567","messageId":"568","endLine":211,"endColumn":65,"suggestions":"691"},{"ruleId":"565","severity":1,"message":"566","line":226,"column":25,"nodeType":"567","messageId":"568","endLine":226,"endColumn":26,"suggestions":"692"},{"ruleId":"565","severity":1,"message":"566","line":226,"column":39,"nodeType":"567","messageId":"568","endLine":226,"endColumn":40,"suggestions":"693"},{"ruleId":"565","severity":1,"message":"566","line":226,"column":54,"nodeType":"567","messageId":"568","endLine":226,"endColumn":55,"suggestions":"694"},{"ruleId":"565","severity":1,"message":"566","line":226,"column":70,"nodeType":"567","messageId":"568","endLine":226,"endColumn":71,"suggestions":"695"},{"ruleId":"565","severity":1,"message":"566","line":234,"column":25,"nodeType":"567","messageId":"568","endLine":234,"endColumn":26,"suggestions":"696"},{"ruleId":"565","severity":1,"message":"566","line":234,"column":41,"nodeType":"567","messageId":"568","endLine":234,"endColumn":42,"suggestions":"697"},{"ruleId":"565","severity":1,"message":"566","line":234,"column":56,"nodeType":"567","messageId":"568","endLine":234,"endColumn":57,"suggestions":"698"},{"ruleId":"565","severity":1,"message":"566","line":234,"column":68,"nodeType":"567","messageId":"568","endLine":234,"endColumn":69,"suggestions":"699"},{"ruleId":"565","severity":1,"message":"566","line":243,"column":25,"nodeType":"567","messageId":"568","endLine":243,"endColumn":26,"suggestions":"700"},{"ruleId":"565","severity":1,"message":"566","line":243,"column":38,"nodeType":"567","messageId":"568","endLine":243,"endColumn":39,"suggestions":"701"},{"ruleId":"565","severity":1,"message":"566","line":243,"column":53,"nodeType":"567","messageId":"568","endLine":243,"endColumn":54,"suggestions":"702"},{"ruleId":"565","severity":1,"message":"566","line":243,"column":61,"nodeType":"567","messageId":"568","endLine":243,"endColumn":62,"suggestions":"703"},{"ruleId":"565","severity":1,"message":"566","line":250,"column":25,"nodeType":"567","messageId":"568","endLine":250,"endColumn":26,"suggestions":"704"},{"ruleId":"565","severity":1,"message":"566","line":250,"column":39,"nodeType":"567","messageId":"568","endLine":250,"endColumn":40,"suggestions":"705"},{"ruleId":"565","severity":1,"message":"566","line":250,"column":54,"nodeType":"567","messageId":"568","endLine":250,"endColumn":55,"suggestions":"706"},{"ruleId":"565","severity":1,"message":"566","line":250,"column":70,"nodeType":"567","messageId":"568","endLine":250,"endColumn":71,"suggestions":"707"},{"ruleId":"565","severity":1,"message":"566","line":259,"column":25,"nodeType":"567","messageId":"568","endLine":259,"endColumn":26,"suggestions":"708"},{"ruleId":"565","severity":1,"message":"566","line":259,"column":41,"nodeType":"567","messageId":"568","endLine":259,"endColumn":42,"suggestions":"709"},{"ruleId":"565","severity":1,"message":"566","line":259,"column":56,"nodeType":"567","messageId":"568","endLine":259,"endColumn":57,"suggestions":"710"},{"ruleId":"565","severity":1,"message":"566","line":259,"column":70,"nodeType":"567","messageId":"568","endLine":259,"endColumn":71,"suggestions":"711"},{"ruleId":"435","severity":1,"message":"712","line":1,"column":8,"nodeType":"437","messageId":"438","endLine":1,"endColumn":18},{"ruleId":"435","severity":1,"message":"713","line":3,"column":8,"nodeType":"437","messageId":"438","endLine":3,"endColumn":14},{"ruleId":"435","severity":1,"message":"606","line":4,"column":8,"nodeType":"437","messageId":"438","endLine":4,"endColumn":11},{"ruleId":"435","severity":1,"message":"714","line":5,"column":8,"nodeType":"437","messageId":"438","endLine":5,"endColumn":15},{"ruleId":"435","severity":1,"message":"715","line":8,"column":8,"nodeType":"437","messageId":"438","endLine":8,"endColumn":14},{"ruleId":"435","severity":1,"message":"597","line":10,"column":10,"nodeType":"437","messageId":"438","endLine":10,"endColumn":32},{"ruleId":"435","severity":1,"message":"716","line":11,"column":8,"nodeType":"437","messageId":"438","endLine":11,"endColumn":14},{"ruleId":"435","severity":1,"message":"717","line":13,"column":10,"nodeType":"437","messageId":"438","endLine":13,"endColumn":17},{"ruleId":"435","severity":1,"message":"718","line":14,"column":10,"nodeType":"437","messageId":"438","endLine":14,"endColumn":16},{"ruleId":"435","severity":1,"message":"610","line":15,"column":10,"nodeType":"437","messageId":"438","endLine":15,"endColumn":34},{"ruleId":"435","severity":1,"message":"611","line":15,"column":36,"nodeType":"437","messageId":"438","endLine":15,"endColumn":55},{"ruleId":"435","severity":1,"message":"719","line":17,"column":8,"nodeType":"437","messageId":"438","endLine":17,"endColumn":22},{"ruleId":"435","severity":1,"message":"720","line":23,"column":8,"nodeType":"437","messageId":"438","endLine":23,"endColumn":11},{"ruleId":"435","severity":1,"message":"621","line":33,"column":9,"nodeType":"437","messageId":"438","endLine":33,"endColumn":28},{"ruleId":"435","severity":1,"message":"622","line":43,"column":9,"nodeType":"437","messageId":"438","endLine":43,"endColumn":26},{"ruleId":"435","severity":1,"message":"623","line":51,"column":9,"nodeType":"437","messageId":"438","endLine":51,"endColumn":34},{"ruleId":"435","severity":1,"message":"721","line":59,"column":9,"nodeType":"437","messageId":"438","endLine":59,"endColumn":34},{"ruleId":"435","severity":1,"message":"722","line":67,"column":9,"nodeType":"437","messageId":"438","endLine":67,"endColumn":42},{"ruleId":"538","severity":1,"message":"539","line":76,"column":48,"nodeType":"540","messageId":"541","endLine":76,"endColumn":50},{"ruleId":"538","severity":1,"message":"539","line":84,"column":53,"nodeType":"540","messageId":"541","endLine":84,"endColumn":55},{"ruleId":"538","severity":1,"message":"539","line":92,"column":53,"nodeType":"540","messageId":"541","endLine":92,"endColumn":55},{"ruleId":"435","severity":1,"message":"723","line":102,"column":9,"nodeType":"437","messageId":"438","endLine":102,"endColumn":22},{"ruleId":"435","severity":1,"message":"594","line":4,"column":8,"nodeType":"437","messageId":"438","endLine":4,"endColumn":24},{"ruleId":"435","severity":1,"message":"724","line":1,"column":8,"nodeType":"437","messageId":"438","endLine":1,"endColumn":13},{"ruleId":"435","severity":1,"message":"725","line":2,"column":8,"nodeType":"437","messageId":"438","endLine":2,"endColumn":13},{"ruleId":"435","severity":1,"message":"726","line":3,"column":8,"nodeType":"437","messageId":"438","endLine":3,"endColumn":13},{"ruleId":"435","severity":1,"message":"727","line":4,"column":8,"nodeType":"437","messageId":"438","endLine":4,"endColumn":19},{"ruleId":"435","severity":1,"message":"728","line":5,"column":8,"nodeType":"437","messageId":"438","endLine":5,"endColumn":17},{"ruleId":"435","severity":1,"message":"729","line":6,"column":8,"nodeType":"437","messageId":"438","endLine":6,"endColumn":22},{"ruleId":"435","severity":1,"message":"730","line":7,"column":8,"nodeType":"437","messageId":"438","endLine":7,"endColumn":16},{"ruleId":"565","severity":1,"message":"566","line":14,"column":64,"nodeType":"567","messageId":"568","endLine":14,"endColumn":65,"suggestions":"731"},{"ruleId":"565","severity":1,"message":"566","line":14,"column":84,"nodeType":"567","messageId":"568","endLine":14,"endColumn":85,"suggestions":"732"},{"ruleId":"565","severity":1,"message":"566","line":15,"column":66,"nodeType":"567","messageId":"568","endLine":15,"endColumn":67,"suggestions":"733"},{"ruleId":"565","severity":1,"message":"566","line":15,"column":92,"nodeType":"567","messageId":"568","endLine":15,"endColumn":93,"suggestions":"734"},{"ruleId":"565","severity":1,"message":"566","line":16,"column":65,"nodeType":"567","messageId":"568","endLine":16,"endColumn":66,"suggestions":"735"},{"ruleId":"565","severity":1,"message":"566","line":16,"column":84,"nodeType":"567","messageId":"568","endLine":16,"endColumn":85,"suggestions":"736"},{"ruleId":"435","severity":1,"message":"737","line":2,"column":27,"nodeType":"437","messageId":"438","endLine":2,"endColumn":33},{"ruleId":"435","severity":1,"message":"738","line":2,"column":35,"nodeType":"437","messageId":"438","endLine":2,"endColumn":40},{"ruleId":"435","severity":1,"message":"739","line":2,"column":42,"nodeType":"437","messageId":"438","endLine":2,"endColumn":48},{"ruleId":"435","severity":1,"message":"740","line":3,"column":8,"nodeType":"437","messageId":"438","endLine":3,"endColumn":16},{"ruleId":"435","severity":1,"message":"741","line":6,"column":8,"nodeType":"437","messageId":"438","endLine":6,"endColumn":12},{"ruleId":"435","severity":1,"message":"715","line":7,"column":8,"nodeType":"437","messageId":"438","endLine":7,"endColumn":14},{"ruleId":"435","severity":1,"message":"742","line":8,"column":8,"nodeType":"437","messageId":"438","endLine":8,"endColumn":22},{"ruleId":"435","severity":1,"message":"743","line":9,"column":8,"nodeType":"437","messageId":"438","endLine":9,"endColumn":16},{"ruleId":"435","severity":1,"message":"720","line":10,"column":8,"nodeType":"437","messageId":"438","endLine":10,"endColumn":11},{"ruleId":"435","severity":1,"message":"744","line":11,"column":8,"nodeType":"437","messageId":"438","endLine":11,"endColumn":11},{"ruleId":"435","severity":1,"message":"745","line":13,"column":10,"nodeType":"437","messageId":"438","endLine":13,"endColumn":16},{"ruleId":"435","severity":1,"message":"746","line":13,"column":18,"nodeType":"437","messageId":"438","endLine":13,"endColumn":31},{"ruleId":"435","severity":1,"message":"747","line":17,"column":10,"nodeType":"437","messageId":"438","endLine":17,"endColumn":22},{"ruleId":"435","severity":1,"message":"748","line":18,"column":10,"nodeType":"437","messageId":"438","endLine":18,"endColumn":38},{"ruleId":"435","severity":1,"message":"749","line":18,"column":40,"nodeType":"437","messageId":"438","endLine":18,"endColumn":60},{"ruleId":"435","severity":1,"message":"750","line":18,"column":62,"nodeType":"437","messageId":"438","endLine":18,"endColumn":81},{"ruleId":"435","severity":1,"message":"446","line":19,"column":8,"nodeType":"437","messageId":"438","endLine":19,"endColumn":9},{"ruleId":"435","severity":1,"message":"751","line":37,"column":10,"nodeType":"437","messageId":"438","endLine":37,"endColumn":23},{"ruleId":"435","severity":1,"message":"752","line":64,"column":9,"nodeType":"437","messageId":"438","endLine":64,"endColumn":14},{"ruleId":"435","severity":1,"message":"753","line":72,"column":9,"nodeType":"437","messageId":"438","endLine":72,"endColumn":25},{"ruleId":"435","severity":1,"message":"535","line":205,"column":11,"nodeType":"437","messageId":"438","endLine":205,"endColumn":26},{"ruleId":"435","severity":1,"message":"536","line":219,"column":13,"nodeType":"437","messageId":"438","endLine":219,"endColumn":19},{"ruleId":"435","severity":1,"message":"537","line":235,"column":9,"nodeType":"437","messageId":"438","endLine":235,"endColumn":32},{"ruleId":"538","severity":1,"message":"539","line":245,"column":17,"nodeType":"540","messageId":"541","endLine":245,"endColumn":19},{"ruleId":"542","severity":1,"message":"543","line":387,"column":6,"nodeType":"544","endLine":387,"endColumn":20,"suggestions":"754"},{"ruleId":"542","severity":1,"message":"546","line":395,"column":6,"nodeType":"544","endLine":395,"endColumn":19,"suggestions":"755"},{"ruleId":"542","severity":1,"message":"578","line":407,"column":6,"nodeType":"544","endLine":407,"endColumn":68,"suggestions":"756"},{"ruleId":"542","severity":1,"message":"550","line":422,"column":8,"nodeType":"544","endLine":422,"endColumn":43,"suggestions":"757"},{"ruleId":"542","severity":1,"message":"758","line":427,"column":8,"nodeType":"544","endLine":427,"endColumn":10,"suggestions":"759"},{"ruleId":"542","severity":1,"message":"583","line":484,"column":8,"nodeType":"544","endLine":484,"endColumn":80,"suggestions":"760"},{"ruleId":"538","severity":1,"message":"539","line":16,"column":51,"nodeType":"540","messageId":"541","endLine":16,"endColumn":53},{"ruleId":"538","severity":1,"message":"539","line":17,"column":51,"nodeType":"540","messageId":"541","endLine":17,"endColumn":53},{"ruleId":"435","severity":1,"message":"761","line":53,"column":11,"nodeType":"437","messageId":"438","endLine":53,"endColumn":30},{"ruleId":"435","severity":1,"message":"762","line":1,"column":10,"nodeType":"437","messageId":"438","endLine":1,"endColumn":15},"no-native-reassign",["763"],"no-negated-in-lhs",["764"],"no-unused-vars","'StartPage' is defined but never used.","Identifier","unusedVar","'Tutorial' is defined but never used.","'GuidedAnnotation' is defined but never used.","'guided_annotation_messages' is defined but never used.","'guided_annotation_hints' is defined but never used.","'guided_annotation_info_messages' is defined but never used.","'guided_annotation_strike_messages' is defined but never used.","'g_MachineStateHandler' is defined but never used.","'_' is defined but never used.","'AWS' is defined but never used.","'t_doc_json' is assigned a value but never used.","'t_summary_json' is assigned a value but never used.","'t_start_doc_json' is assigned a value but never used.","'t_start_summary_json' is assigned a value but never used.","'t_middle_doc_json' is assigned a value but never used.","'t_middle_summary_json' is assigned a value but never used.","'t_sent_end_doc_json' is assigned a value but never used.","'t_sent_end_summary_json' is assigned a value but never used.","'t_submit_doc_json' is assigned a value but never used.","'t_submit_summary_json' is assigned a value but never used.","'t_all_lemma_match_mtx' is assigned a value but never used.","'t_important_lemma_match_mtx' is assigned a value but never used.","'t_doc_paragraph_breaks' is assigned a value but never used.","'t_state_messages' is assigned a value but never used.","'g_doc_json' is assigned a value but never used.","'g_summary_json' is assigned a value but never used.","'g_all_lemma_match_mtx' is assigned a value but never used.","'g_important_lemma_match_mtx' is assigned a value but never used.","'g_doc_paragraph_breaks' is assigned a value but never used.","'g_boldState' is assigned a value but never used.","'g_setBoldState' is assigned a value but never used.","'g_oldAlignmentState' is assigned a value but never used.","'g_setOldAlignmentState' is assigned a value but never used.","'g_StateMachineState' is assigned a value but never used.","'g_CurrSentInd' is assigned a value but never used.","'g_InfoMessage' is assigned a value but never used.","'g_SetInfoMessage' is assigned a value but never used.","'g_AlignmentCount' is assigned a value but never used.","'g_prevStateMachineState' is assigned a value but never used.","'g_prevSummarySpanHighlights' is assigned a value but never used.","'g_setPrevSummarySpanHighlights' is assigned a value but never used.","'g_prevDocSpanHighlights' is assigned a value but never used.","'g_setPrevDocSpanHighlights' is assigned a value but never used.","'g_prevSummaryJsonRevise' is assigned a value but never used.","'g_setPrevSummaryJsonRevise' is assigned a value but never used.","'g_prevDocJsonRevise' is assigned a value but never used.","'g_setPrevDocJsonRevise' is assigned a value but never used.","'g_prevCurrSentInd' is assigned a value but never used.","'g_setPrevCurrSentInd' is assigned a value but never used.","'g_DocOnMouseDownID' is assigned a value but never used.","'g_SetDocOnMouseDownID' is assigned a value but never used.","'g_SummaryOnMouseDownID' is assigned a value but never used.","'g_SetSummaryOnMouseDownID' is assigned a value but never used.","'g_docOnMouseDownActivated' is assigned a value but never used.","'g_setDocOnMouseDownActivated' is assigned a value but never used.","'g_summaryOnMouseDownActivated' is assigned a value but never used.","'g_setSummaryOnMouseDownActivated' is assigned a value but never used.","'g_hoverActivatedId' is assigned a value but never used.","'g_setHoverActivatedId' is assigned a value but never used.","'g_hoverActivatedDocOrSummary' is assigned a value but never used.","'g_setHoverActivatedDocOrSummary' is assigned a value but never used.","'g_sliderBoldStateActivated' is assigned a value but never used.","'g_setSliderBoldStateActivated' is assigned a value but never used.","'g_guiding_msg' is assigned a value but never used.","'g_setGuidingMsg' is assigned a value but never used.","'g_guiding_msg_type' is assigned a value but never used.","'g_setGuidingMsgType' is assigned a value but never used.","'g_curr_alignment_guiding_msg_id' is assigned a value but never used.","'g_setCurrAlignmentGuidingMsgId' is assigned a value but never used.","'g_prev_curr_alignment_guiding_msg_id' is assigned a value but never used.","'g_setPrevCurrAlignmentGuidingMsgId' is assigned a value but never used.","'g_guiding_info_msg' is assigned a value but never used.","'g_prev_guiding_info_msg' is assigned a value but never used.","'g_setPrevGuidingInfoMsg' is assigned a value but never used.","'g_guided_unhighlight' is assigned a value but never used.","'g_setGuidedUnhighlight' is assigned a value but never used.","'g_is_good_alignment' is assigned a value but never used.","'g_show_hint' is assigned a value but never used.","'g_setShowHint' is assigned a value but never used.","'g_hint_msg' is assigned a value but never used.","'g_setHintMsg' is assigned a value but never used.","'g_noAlignModalShow' is assigned a value but never used.","'g_setNoAlignModalShow' is assigned a value but never used.","'g_noAlignApproved' is assigned a value but never used.","'g_setNoAlignApproved' is assigned a value but never used.","'g_setCompleted' is assigned a value but never used.","'g_setGuidedAnnotationHistory' is assigned a value but never used.","'g_strikes_counter' is assigned a value but never used.","'g_setStrikesCounter' is assigned a value but never used.","'g_answer_modal_msg' is assigned a value but never used.","'g_setAnswerModalMsg' is assigned a value but never used.","'g_answer_words_to_glow' is assigned a value but never used.","'g_setAnswerWordsToGlow' is assigned a value but never used.","'g_Guider_msg' is assigned a value but never used.","'g_prev_Guider_msg' is assigned a value but never used.","'g_setPrevGuiderMsg' is assigned a value but never used.","'g_handleErrorOpen' is assigned a value but never used.","'which_match_mtx' is assigned a value but never used.","'isSpan' is assigned a value but never used.","'FindDocAlignmentPerSent' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'CurrSentInd', 'MachineStateHandlerWrapper', and 'StateMachineState'. Either include them or remove the dependency array.","ArrayExpression",["765"],"React Hook useEffect has a missing dependency: 'SetSummaryShadowAndUpdateHighlights'. Either include it or remove the dependency array.",["766"],"React Hook useEffect has missing dependencies: 'StateMachineState', 'boldStateHandler', and 'sliderBoldStateActivated'. Either include them or remove the dependency array.",["767"],"React Hook useEffect has a missing dependency: 'oldAlignmentStateHandler'. Either include it or remove the dependency array.",["768"],"React Hook useEffect has missing dependencies: 'DocOnMouseDownID', 'StateMachineState', 'SummaryOnMouseDownID', 'checkIfLemmasMatch', 'doc_json', 'hoverActivatedDocOrSummary', 'isRedLettered', and 'summary_json'. Either include them or remove the dependency array. You can also do a functional update 'setDocJson(d => ...)' if you only need 'doc_json' in the 'setDocJson' call.",["769"],"React Hook useEffect has a missing dependency: 'g_resetGuidedAnnotation'. Either include it or remove the dependency array.",["770"],"React Hook useEffect has missing dependencies: 'assignmentId', 'doc_json', 'doc_paragraph_breaks', 'g_completed', 'g_guided_annotation_history', 'summary_json', and 'turkSubmitTo'. Either include them or remove the dependency array.",["771"],"react/jsx-pascal-case","Imported JSX component Instructions_short must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'Fade' is defined but never used.","'statSync' is defined but never used.","'allSummarySentIsHighlighted' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["772","773"],["774","775"],["776","777"],["778","779"],["780","781"],["782","783"],"React Hook useEffect has missing dependencies: 'CurrSentInd', 'MachineStateHandlerWrapper', 'StateMachineState', and 'isPunct'. Either include them or remove the dependency array. If 'isPunct' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["784"],["785"],"React Hook useEffect has missing dependencies: 'boldStateHandler' and 'sliderBoldStateActivated'. Either include them or remove the dependency array.",["786"],["787"],"React Hook useEffect has missing dependencies: 'setDocOnMouseDownActivated' and 'setSummaryOnMouseDownActivated'. Either include them or remove the dependency array. If 'setDocOnMouseDownActivated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["788"],"React Hook useEffect has missing dependencies: 'DocOnMouseDownID', 'StateMachineState', 'SummaryOnMouseDownID', 'checkIfLemmasMatch', 'doc_json', 'hoverActivatedDocOrSummary', 'isRedLettered', 'setDocJson', 'setSummaryJson', and 'summary_json'. Either include them or remove the dependency array. If 'setDocJson' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["789"],"React Hook useEffect has missing dependencies: 'guiding_msg', 'setGuidingMsg', and 'setGuidingMsgType'. Either include them or remove the dependency array. If 'setGuidingMsgType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["790"],"React Hook useEffect has missing dependencies: 'g_guided_annotation_history', 'g_setAnswerModalMsg', 'g_setGuidedAnnotationHistory', 'g_setStrikesCounter', 'g_strikes_counter', and 'getAnswerModalMsg'. Either include them or remove the dependency array. If 'g_setStrikesCounter' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["791"],"'next_step' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'doc_json' and 'g_setGuiderMsg'. Either include them or remove the dependency array. If 'g_setGuiderMsg' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["792"],"React Hook useEffect has missing dependencies: 'CurrSentInd', 'curr_alignment_guiding_msg_id', 'isAlignmentOk', 'isSummarySpanOk', and 'setIsGoodAlignment'. Either include them or remove the dependency array. If 'setIsGoodAlignment' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["793"],"'ResponsiveAppBar' is defined but never used.","'MuiAlert' is defined but never used.","'ArrowBackIosTwoTone' is defined but never used.","'ArrowForwardIosTwoTone' is defined but never used.","'Work' is defined but never used.","'SendIcon' is defined but never used.","'CheckCircleOutlined' is defined but never used.","'ExclamationCircleOutlined' is defined but never used.","'Fab' is defined but never used.","'CardHeader' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Box' is defined but never used.","'borderColor' is defined but never used.","'string_to_span' is defined but never used.","'get_span_groups' is defined but never used.","'StyledSliderHighlighting' is defined but never used.","'StyledSliderBolding' is defined but never used.","'DocMouseclickStartID' is assigned a value but never used.","'DocMouseclicked' is assigned a value but never used.","'SummaryMouseclickStartID' is assigned a value but never used.","'SummaryMouseclicked' is assigned a value but never used.","'toastVisible' is assigned a value but never used.","'setToastVisible' is assigned a value but never used.","'isDocSpanExist' is assigned a value but never used.","'get_range' is assigned a value but never used.","'getResponsiveAppBarTitle' is assigned a value but never used.","'BlackTextTypography' is assigned a value but never used.","'BoldingSliderTags' is assigned a value but never used.","'BoldingSliderDefaultValue' is assigned a value but never used.","'reminderText' is assigned a value but never used.","The ref value 'containerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'containerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'callbackFunction'. Either include it or remove the dependency array.",["794"],"React Hook useEffect has missing dependencies: 'StateMachineState', 'doc_json', 'summary_json', 'toggleDocSpanHighlight', and 'toggleSummarySpanHighlight'. Either include them or remove the dependency array. If 'toggleDocSpanHighlight' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["795"],"React Hook useEffect has missing dependencies: 'MachineStateHandlerWrapper', 'StateMachineState', 'SubmitHandler', and 'setNoAlignModalShow'. Either include them or remove the dependency array. If 'setNoAlignModalShow' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["796"],"React Hook useEffect has a missing dependency: 'setShowAlert'. Either include it or remove the dependency array. If 'setShowAlert' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["797"],"'ButtonGroup' is defined but never used.","'spacing' is defined but never used.","'pages' is assigned a value but never used.","'BackButton' is defined but never used.",["763"],["764"],["798","799"],["800","801"],["802","803"],["804","805"],["806","807"],["808","809"],["810","811"],["812","813"],["814","815"],["816","817"],["818","819"],["820","821"],["822","823"],["824","825"],["826","827"],["828","829"],["830","831"],["832","833"],["834","835"],["836","837"],["838","839"],["840","841"],["842","843"],["844","845"],["846","847"],["848","849"],["850","851"],["852","853"],["854","855"],["856","857"],["858","859"],["860","861"],["862","863"],["864","865"],["866","867"],["868","869"],["870","871"],["872","873"],["874","875"],["876","877"],["878","879"],["880","881"],["882","883"],["884","885"],["886","887"],["888","889"],["890","891"],["892","893"],["894","895"],["896","897"],["898","899"],["900","901"],["902","903"],["904","905"],["906","907"],["908","909"],["910","911"],["912","913"],["914","915"],["916","917"],["918","919"],["920","921"],["922","923"],["924","925"],["926","927"],["928","929"],["930","931"],["932","933"],["934","935"],["936","937"],["938","939"],["940","941"],"'Typography' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Button' is defined but never used.","'Slider' is defined but never used.","'padding' is defined but never used.","'styled' is defined but never used.","'OverlayTrigger' is defined but never used.","'Row' is defined but never used.","'OldHighlightingSliderTags' is assigned a value but never used.","'OldHighlightingSliderDefaultValue' is assigned a value but never used.","'renderTooltip' is assigned a value but never used.","'Alert' is defined but never used.","'Modal' is defined but never used.","'Toast' is defined but never used.","'ToastHeader' is defined but never used.","'ToastBody' is defined but never used.","'ToastContainer' is defined but never used.","'Carousel' is defined but never used.",["942","943"],["944","945"],["946","947"],["948","949"],["950","951"],["952","953"],"'Router' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'Snackbar' is defined but never used.","'Card' is defined but never used.","'DropdownButton' is defined but never used.","'Dropdown' is defined but never used.","'Col' is defined but never used.","'Player' is defined but never used.","'BigPlayButton' is defined but never used.","'TutorialCard' is defined but never used.","'t_StateMachineStateIdHandler' is defined but never used.","'getTutorialCardTitle' is defined but never used.","'getTutorialCardText' is defined but never used.","'error_message' is assigned a value but never used.","'Alert' is assigned a value but never used.","'handleErrorClose' is assigned a value but never used.",["954"],["955"],["956"],["957"],"React Hook useEffect has a missing dependency: 'doc_json'. Either include it or remove the dependency array.",["958"],["959"],"'turkSetAssignmentID' is defined but never used.","'Title' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"960","fix":"961"},{"desc":"962","fix":"963"},{"desc":"964","fix":"965"},{"desc":"966","fix":"967"},{"desc":"968","fix":"969"},{"desc":"970","fix":"971"},{"desc":"972","fix":"973"},{"messageId":"974","fix":"975","desc":"976"},{"messageId":"977","fix":"978","desc":"979"},{"messageId":"974","fix":"980","desc":"976"},{"messageId":"977","fix":"981","desc":"979"},{"messageId":"974","fix":"982","desc":"976"},{"messageId":"977","fix":"983","desc":"979"},{"messageId":"974","fix":"984","desc":"976"},{"messageId":"977","fix":"985","desc":"979"},{"messageId":"974","fix":"986","desc":"976"},{"messageId":"977","fix":"987","desc":"979"},{"messageId":"974","fix":"988","desc":"976"},{"messageId":"977","fix":"989","desc":"979"},{"desc":"990","fix":"991"},{"desc":"962","fix":"992"},{"desc":"993","fix":"994"},{"desc":"966","fix":"995"},{"desc":"996","fix":"997"},{"desc":"998","fix":"999"},{"desc":"1000","fix":"1001"},{"desc":"1002","fix":"1003"},{"desc":"1004","fix":"1005"},{"desc":"1006","fix":"1007"},{"desc":"1008","fix":"1009"},{"desc":"1010","fix":"1011"},{"desc":"1012","fix":"1013"},{"desc":"1014","fix":"1015"},{"messageId":"974","fix":"1016","desc":"976"},{"messageId":"977","fix":"1017","desc":"979"},{"messageId":"974","fix":"1018","desc":"976"},{"messageId":"977","fix":"1019","desc":"979"},{"messageId":"974","fix":"1020","desc":"976"},{"messageId":"977","fix":"1021","desc":"979"},{"messageId":"974","fix":"1022","desc":"976"},{"messageId":"977","fix":"1023","desc":"979"},{"messageId":"974","fix":"1024","desc":"976"},{"messageId":"977","fix":"1025","desc":"979"},{"messageId":"974","fix":"1026","desc":"976"},{"messageId":"977","fix":"1027","desc":"979"},{"messageId":"974","fix":"1028","desc":"976"},{"messageId":"977","fix":"1029","desc":"979"},{"messageId":"974","fix":"1030","desc":"976"},{"messageId":"977","fix":"1031","desc":"979"},{"messageId":"974","fix":"1032","desc":"976"},{"messageId":"977","fix":"1033","desc":"979"},{"messageId":"974","fix":"1034","desc":"976"},{"messageId":"977","fix":"1035","desc":"979"},{"messageId":"974","fix":"1036","desc":"976"},{"messageId":"977","fix":"1037","desc":"979"},{"messageId":"974","fix":"1038","desc":"976"},{"messageId":"977","fix":"1039","desc":"979"},{"messageId":"974","fix":"1040","desc":"976"},{"messageId":"977","fix":"1041","desc":"979"},{"messageId":"974","fix":"1042","desc":"976"},{"messageId":"977","fix":"1043","desc":"979"},{"messageId":"974","fix":"1044","desc":"976"},{"messageId":"977","fix":"1045","desc":"979"},{"messageId":"974","fix":"1046","desc":"976"},{"messageId":"977","fix":"1047","desc":"979"},{"messageId":"974","fix":"1048","desc":"976"},{"messageId":"977","fix":"1049","desc":"979"},{"messageId":"974","fix":"1050","desc":"976"},{"messageId":"977","fix":"1051","desc":"979"},{"messageId":"974","fix":"1052","desc":"976"},{"messageId":"977","fix":"1053","desc":"979"},{"messageId":"974","fix":"1054","desc":"976"},{"messageId":"977","fix":"1055","desc":"979"},{"messageId":"974","fix":"1056","desc":"976"},{"messageId":"977","fix":"1057","desc":"979"},{"messageId":"974","fix":"1058","desc":"976"},{"messageId":"977","fix":"1059","desc":"979"},{"messageId":"974","fix":"1060","desc":"976"},{"messageId":"977","fix":"1061","desc":"979"},{"messageId":"974","fix":"1062","desc":"976"},{"messageId":"977","fix":"1063","desc":"979"},{"messageId":"974","fix":"1064","desc":"976"},{"messageId":"977","fix":"1065","desc":"979"},{"messageId":"974","fix":"1066","desc":"976"},{"messageId":"977","fix":"1067","desc":"979"},{"messageId":"974","fix":"1068","desc":"976"},{"messageId":"977","fix":"1069","desc":"979"},{"messageId":"974","fix":"1070","desc":"976"},{"messageId":"977","fix":"1071","desc":"979"},{"messageId":"974","fix":"1072","desc":"976"},{"messageId":"977","fix":"1073","desc":"979"},{"messageId":"974","fix":"1074","desc":"976"},{"messageId":"977","fix":"1075","desc":"979"},{"messageId":"974","fix":"1076","desc":"976"},{"messageId":"977","fix":"1077","desc":"979"},{"messageId":"974","fix":"1078","desc":"976"},{"messageId":"977","fix":"1079","desc":"979"},{"messageId":"974","fix":"1080","desc":"976"},{"messageId":"977","fix":"1081","desc":"979"},{"messageId":"974","fix":"1082","desc":"976"},{"messageId":"977","fix":"1083","desc":"979"},{"messageId":"974","fix":"1084","desc":"976"},{"messageId":"977","fix":"1085","desc":"979"},{"messageId":"974","fix":"1086","desc":"976"},{"messageId":"977","fix":"1087","desc":"979"},{"messageId":"974","fix":"1088","desc":"976"},{"messageId":"977","fix":"1089","desc":"979"},{"messageId":"974","fix":"1090","desc":"976"},{"messageId":"977","fix":"1091","desc":"979"},{"messageId":"974","fix":"1092","desc":"976"},{"messageId":"977","fix":"1093","desc":"979"},{"messageId":"974","fix":"1094","desc":"976"},{"messageId":"977","fix":"1095","desc":"979"},{"messageId":"974","fix":"1096","desc":"976"},{"messageId":"977","fix":"1097","desc":"979"},{"messageId":"974","fix":"1098","desc":"976"},{"messageId":"977","fix":"1099","desc":"979"},{"messageId":"974","fix":"1100","desc":"976"},{"messageId":"977","fix":"1101","desc":"979"},{"messageId":"974","fix":"1102","desc":"976"},{"messageId":"977","fix":"1103","desc":"979"},{"messageId":"974","fix":"1104","desc":"976"},{"messageId":"977","fix":"1105","desc":"979"},{"messageId":"974","fix":"1106","desc":"976"},{"messageId":"977","fix":"1107","desc":"979"},{"messageId":"974","fix":"1108","desc":"976"},{"messageId":"977","fix":"1109","desc":"979"},{"messageId":"974","fix":"1110","desc":"976"},{"messageId":"977","fix":"1111","desc":"979"},{"messageId":"974","fix":"1112","desc":"976"},{"messageId":"977","fix":"1113","desc":"979"},{"messageId":"974","fix":"1114","desc":"976"},{"messageId":"977","fix":"1115","desc":"979"},{"messageId":"974","fix":"1116","desc":"976"},{"messageId":"977","fix":"1117","desc":"979"},{"messageId":"974","fix":"1118","desc":"976"},{"messageId":"977","fix":"1119","desc":"979"},{"messageId":"974","fix":"1120","desc":"976"},{"messageId":"977","fix":"1121","desc":"979"},{"messageId":"974","fix":"1122","desc":"976"},{"messageId":"977","fix":"1123","desc":"979"},{"messageId":"974","fix":"1124","desc":"976"},{"messageId":"977","fix":"1125","desc":"979"},{"messageId":"974","fix":"1126","desc":"976"},{"messageId":"977","fix":"1127","desc":"979"},{"messageId":"974","fix":"1128","desc":"976"},{"messageId":"977","fix":"1129","desc":"979"},{"messageId":"974","fix":"1130","desc":"976"},{"messageId":"977","fix":"1131","desc":"979"},{"messageId":"974","fix":"1132","desc":"976"},{"messageId":"977","fix":"1133","desc":"979"},{"messageId":"974","fix":"1134","desc":"976"},{"messageId":"977","fix":"1135","desc":"979"},{"messageId":"974","fix":"1136","desc":"976"},{"messageId":"977","fix":"1137","desc":"979"},{"messageId":"974","fix":"1138","desc":"976"},{"messageId":"977","fix":"1139","desc":"979"},{"messageId":"974","fix":"1140","desc":"976"},{"messageId":"977","fix":"1141","desc":"979"},{"messageId":"974","fix":"1142","desc":"976"},{"messageId":"977","fix":"1143","desc":"979"},{"messageId":"974","fix":"1144","desc":"976"},{"messageId":"977","fix":"1145","desc":"979"},{"messageId":"974","fix":"1146","desc":"976"},{"messageId":"977","fix":"1147","desc":"979"},{"messageId":"974","fix":"1148","desc":"976"},{"messageId":"977","fix":"1149","desc":"979"},{"messageId":"974","fix":"1150","desc":"976"},{"messageId":"977","fix":"1151","desc":"979"},{"messageId":"974","fix":"1152","desc":"976"},{"messageId":"977","fix":"1153","desc":"979"},{"messageId":"974","fix":"1154","desc":"976"},{"messageId":"977","fix":"1155","desc":"979"},{"messageId":"974","fix":"1156","desc":"976"},{"messageId":"977","fix":"1157","desc":"979"},{"messageId":"974","fix":"1158","desc":"976"},{"messageId":"977","fix":"1159","desc":"979"},{"messageId":"974","fix":"1160","desc":"976"},{"messageId":"977","fix":"1161","desc":"979"},{"messageId":"974","fix":"1162","desc":"976"},{"messageId":"977","fix":"1163","desc":"979"},{"messageId":"974","fix":"1164","desc":"976"},{"messageId":"977","fix":"1165","desc":"979"},{"messageId":"974","fix":"1166","desc":"976"},{"messageId":"977","fix":"1167","desc":"979"},{"messageId":"974","fix":"1168","desc":"976"},{"messageId":"977","fix":"1169","desc":"979"},{"messageId":"974","fix":"1170","desc":"976"},{"messageId":"977","fix":"1171","desc":"979"},{"desc":"960","fix":"1172"},{"desc":"962","fix":"1173"},{"desc":"993","fix":"1174"},{"desc":"966","fix":"1175"},{"desc":"1176","fix":"1177"},{"desc":"998","fix":"1178"},"Update the dependencies array to be: [CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",{"range":"1179","text":"1180"},"Update the dependencies array to be: [CurrSentInd, SetSummaryShadowAndUpdateHighlights]",{"range":"1181","text":"1182"},"Update the dependencies array to be: [StateMachineState, boldStateHandler, sliderBoldStateActivated]",{"range":"1183","text":"1184"},"Update the dependencies array to be: [StateMachineState, AlignmentCount, oldAlignmentStateHandler]",{"range":"1185","text":"1186"},"Update the dependencies array to be: [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",{"range":"1187","text":"1188"},"Update the dependencies array to be: [g_resetGuidedAnnotation]",{"range":"1189","text":"1190"},"Update the dependencies array to be: [assignmentId, doc_json, doc_paragraph_breaks, g_completed, g_guided_annotation_history, isFinished, summary_json, turkSubmitTo]",{"range":"1191","text":"1192"},"removeEscape",{"range":"1193","text":"1194"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1195","text":"1196"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1197","text":"1194"},{"range":"1198","text":"1196"},{"range":"1199","text":"1194"},{"range":"1200","text":"1196"},{"range":"1201","text":"1194"},{"range":"1202","text":"1196"},{"range":"1203","text":"1194"},{"range":"1204","text":"1196"},{"range":"1205","text":"1194"},{"range":"1206","text":"1196"},"Update the dependencies array to be: [CurrSentInd, MachineStateHandlerWrapper, StateMachineState, isPunct, summary_json]",{"range":"1207","text":"1208"},{"range":"1209","text":"1182"},"Update the dependencies array to be: [StateMachineState, CurrSentInd, AlignmentCount, summary_json, sliderBoldStateActivated, boldStateHandler]",{"range":"1210","text":"1211"},{"range":"1212","text":"1186"},"Update the dependencies array to be: [DocOnMouseDownID, SummaryOnMouseDownID, setDocOnMouseDownActivated, setSummaryOnMouseDownActivated]",{"range":"1213","text":"1214"},"Update the dependencies array to be: [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, setDocJson, doc_json, SummaryOnMouseDownID, setSummaryJson, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",{"range":"1215","text":"1216"},"Update the dependencies array to be: [guiding_msg, guiding_msg_type, setGuidingMsg, setGuidingMsgType]",{"range":"1217","text":"1218"},"Update the dependencies array to be: [g_guided_annotation_history, g_setAnswerModalMsg, g_setGuidedAnnotationHistory, g_setStrikesCounter, g_strikes_counter, getAnswerModalMsg, guiding_msg_type]",{"range":"1219","text":"1220"},"Update the dependencies array to be: [doc_json, g_setGuiderMsg, is_good_alignment]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [CurrSentInd, curr_alignment_guiding_msg_id, doc_json, isAlignmentOk, isSummarySpanOk, setIsGoodAlignment, summary_json]",{"range":"1223","text":"1224"},"Update the dependencies array to be: [callbackFunction, containerRef, options]",{"range":"1225","text":"1226"},"Update the dependencies array to be: [StateMachineState, ctrlButtonDown, doc_json, summary_json, toggleDocSpanHighlight, toggleSummarySpanHighlight]",{"range":"1227","text":"1228"},"Update the dependencies array to be: [MachineStateHandlerWrapper, StateMachineState, SubmitHandler, noAlignApproved, setNoAlignModalShow]",{"range":"1229","text":"1230"},"Update the dependencies array to be: [setShowAlert, showAlert]",{"range":"1231","text":"1232"},{"range":"1233","text":"1194"},{"range":"1234","text":"1196"},{"range":"1235","text":"1194"},{"range":"1236","text":"1196"},{"range":"1237","text":"1194"},{"range":"1238","text":"1196"},{"range":"1239","text":"1194"},{"range":"1240","text":"1196"},{"range":"1241","text":"1194"},{"range":"1242","text":"1196"},{"range":"1243","text":"1194"},{"range":"1244","text":"1196"},{"range":"1245","text":"1194"},{"range":"1246","text":"1196"},{"range":"1247","text":"1194"},{"range":"1248","text":"1196"},{"range":"1249","text":"1194"},{"range":"1250","text":"1196"},{"range":"1251","text":"1194"},{"range":"1252","text":"1196"},{"range":"1253","text":"1194"},{"range":"1254","text":"1196"},{"range":"1255","text":"1194"},{"range":"1256","text":"1196"},{"range":"1257","text":"1194"},{"range":"1258","text":"1196"},{"range":"1259","text":"1194"},{"range":"1260","text":"1196"},{"range":"1261","text":"1194"},{"range":"1262","text":"1196"},{"range":"1263","text":"1194"},{"range":"1264","text":"1196"},{"range":"1265","text":"1194"},{"range":"1266","text":"1196"},{"range":"1267","text":"1194"},{"range":"1268","text":"1196"},{"range":"1269","text":"1194"},{"range":"1270","text":"1196"},{"range":"1271","text":"1194"},{"range":"1272","text":"1196"},{"range":"1273","text":"1194"},{"range":"1274","text":"1196"},{"range":"1275","text":"1194"},{"range":"1276","text":"1196"},{"range":"1277","text":"1194"},{"range":"1278","text":"1196"},{"range":"1279","text":"1194"},{"range":"1280","text":"1196"},{"range":"1281","text":"1194"},{"range":"1282","text":"1196"},{"range":"1283","text":"1194"},{"range":"1284","text":"1196"},{"range":"1285","text":"1194"},{"range":"1286","text":"1196"},{"range":"1287","text":"1194"},{"range":"1288","text":"1196"},{"range":"1289","text":"1194"},{"range":"1290","text":"1196"},{"range":"1291","text":"1194"},{"range":"1292","text":"1196"},{"range":"1293","text":"1194"},{"range":"1294","text":"1196"},{"range":"1295","text":"1194"},{"range":"1296","text":"1196"},{"range":"1297","text":"1194"},{"range":"1298","text":"1196"},{"range":"1299","text":"1194"},{"range":"1300","text":"1196"},{"range":"1301","text":"1194"},{"range":"1302","text":"1196"},{"range":"1303","text":"1194"},{"range":"1304","text":"1196"},{"range":"1305","text":"1194"},{"range":"1306","text":"1196"},{"range":"1307","text":"1194"},{"range":"1308","text":"1196"},{"range":"1309","text":"1194"},{"range":"1310","text":"1196"},{"range":"1311","text":"1194"},{"range":"1312","text":"1196"},{"range":"1313","text":"1194"},{"range":"1314","text":"1196"},{"range":"1315","text":"1194"},{"range":"1316","text":"1196"},{"range":"1317","text":"1194"},{"range":"1318","text":"1196"},{"range":"1319","text":"1194"},{"range":"1320","text":"1196"},{"range":"1321","text":"1194"},{"range":"1322","text":"1196"},{"range":"1323","text":"1194"},{"range":"1324","text":"1196"},{"range":"1325","text":"1194"},{"range":"1326","text":"1196"},{"range":"1327","text":"1194"},{"range":"1328","text":"1196"},{"range":"1329","text":"1194"},{"range":"1330","text":"1196"},{"range":"1331","text":"1194"},{"range":"1332","text":"1196"},{"range":"1333","text":"1194"},{"range":"1334","text":"1196"},{"range":"1335","text":"1194"},{"range":"1336","text":"1196"},{"range":"1337","text":"1194"},{"range":"1338","text":"1196"},{"range":"1339","text":"1194"},{"range":"1340","text":"1196"},{"range":"1341","text":"1194"},{"range":"1342","text":"1196"},{"range":"1343","text":"1194"},{"range":"1344","text":"1196"},{"range":"1345","text":"1194"},{"range":"1346","text":"1196"},{"range":"1347","text":"1194"},{"range":"1348","text":"1196"},{"range":"1349","text":"1194"},{"range":"1350","text":"1196"},{"range":"1351","text":"1194"},{"range":"1352","text":"1196"},{"range":"1353","text":"1194"},{"range":"1354","text":"1196"},{"range":"1355","text":"1194"},{"range":"1356","text":"1196"},{"range":"1357","text":"1194"},{"range":"1358","text":"1196"},{"range":"1359","text":"1194"},{"range":"1360","text":"1196"},{"range":"1361","text":"1194"},{"range":"1362","text":"1196"},{"range":"1363","text":"1194"},{"range":"1364","text":"1196"},{"range":"1365","text":"1194"},{"range":"1366","text":"1196"},{"range":"1367","text":"1194"},{"range":"1368","text":"1196"},{"range":"1369","text":"1194"},{"range":"1370","text":"1196"},{"range":"1371","text":"1194"},{"range":"1372","text":"1196"},{"range":"1373","text":"1194"},{"range":"1374","text":"1196"},{"range":"1375","text":"1194"},{"range":"1376","text":"1196"},{"range":"1377","text":"1194"},{"range":"1378","text":"1196"},{"range":"1379","text":"1194"},{"range":"1380","text":"1196"},{"range":"1381","text":"1194"},{"range":"1382","text":"1196"},{"range":"1383","text":"1194"},{"range":"1384","text":"1196"},{"range":"1385","text":"1194"},{"range":"1386","text":"1196"},{"range":"1387","text":"1194"},{"range":"1388","text":"1196"},{"range":"1389","text":"1180"},{"range":"1390","text":"1182"},{"range":"1391","text":"1211"},{"range":"1392","text":"1186"},"Update the dependencies array to be: [doc_json]",{"range":"1393","text":"1394"},{"range":"1395","text":"1216"},[32169,32183],"[CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",[32451,32464],"[CurrSentInd, SetSummaryShadowAndUpdateHighlights]",[32994,32996],"[StateMachineState, boldStateHandler, sliderBoldStateActivated]",[33753,33788],"[StateMachineState, AlignmentCount, oldAlignmentStateHandler]",[37465,37537],"[docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",[41296,41298],"[g_resetGuidedAnnotation]",[42077,42089],"[assignmentId, doc_json, doc_paragraph_breaks, g_completed, g_guided_annotation_history, isFinished, summary_json, turkSubmitTo]",[46453,46454],"",[46453,46453],"\\",[46481,46482],[46481,46481],[48770,48771],[48770,48770],[48798,48799],[48798,48798],[49634,49635],[49634,49634],[49840,49841],[49840,49840],[53246,53260],"[CurrSentInd, MachineStateHandlerWrapper, StateMachineState, isPunct, summary_json]",[53622,53635],[54375,54437],"[StateMachineState, CurrSentInd, AlignmentCount, summary_json, sliderBoldStateActivated, boldStateHandler]",[55178,55213],[56775,56814],"[DocOnMouseDownID, SummaryOnMouseDownID, setDocOnMouseDownActivated, setSummaryOnMouseDownActivated]",[59319,59391],"[docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, setDocJson, doc_json, SummaryOnMouseDownID, setSummaryJson, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",[59629,59647],"[guiding_msg, guiding_msg_type, setGuidingMsg, setGuidingMsgType]",[60467,60485],"[g_guided_annotation_history, g_setAnswerModalMsg, g_setGuidedAnnotationHistory, g_setStrikesCounter, g_strikes_counter, getAnswerModalMsg, guiding_msg_type]",[61407,61426],"[doc_json, g_setGuiderMsg, is_good_alignment]",[62067,62091],"[CurrSentInd, curr_alignment_guiding_msg_id, doc_json, isAlignmentOk, isSummarySpanOk, setIsGoodAlignment, summary_json]",[28561,28584],"[callbackFunction, containerRef, options]",[29894,29910],"[StateMachineState, ctrlButtonDown, doc_json, summary_json, toggleDocSpanHighlight, toggleSummarySpanHighlight]",[30259,30276],"[MachineStateHandlerWrapper, StateMachineState, SubmitHandler, noAlignApproved, setNoAlignModalShow]",[30694,30705],"[setShowAlert, showAlert]",[851,852],[851,851],[865,866],[865,865],[1134,1135],[1134,1134],[1147,1148],[1147,1147],[1405,1406],[1405,1405],[1417,1418],[1417,1417],[1732,1733],[1732,1732],[1746,1747],[1746,1746],[2776,2777],[2776,2776],[2783,2784],[2783,2783],[2798,2799],[2798,2798],[2810,2811],[2810,2810],[3300,3301],[3300,3300],[3312,3313],[3312,3312],[3327,3328],[3327,3327],[3339,3340],[3339,3339],[4014,4015],[4014,4014],[4028,4029],[4028,4028],[4043,4044],[4043,4043],[4059,4060],[4059,4059],[4516,4517],[4516,4516],[4532,4533],[4532,4532],[4547,4548],[4547,4547],[4559,4560],[4559,4559],[4984,4985],[4984,4984],[4997,4998],[4997,4997],[5012,5013],[5012,5012],[5020,5021],[5020,5020],[5257,5258],[5257,5257],[5271,5272],[5271,5271],[5286,5287],[5286,5286],[5302,5303],[5302,5302],[5834,5835],[5834,5834],[5850,5851],[5850,5850],[5865,5866],[5865,5865],[5879,5880],[5879,5879],[6976,6977],[6976,6976],[6990,6991],[6990,6990],[7229,7230],[7229,7229],[7242,7243],[7242,7242],[7470,7471],[7470,7470],[7482,7483],[7482,7482],[7761,7762],[7761,7761],[7775,7776],[7775,7775],[8693,8694],[8693,8693],[8700,8701],[8700,8700],[8715,8716],[8715,8715],[8727,8728],[8727,8727],[9196,9197],[9196,9196],[9208,9209],[9208,9208],[9223,9224],[9223,9223],[9235,9236],[9235,9235],[9838,9839],[9838,9838],[9852,9853],[9852,9852],[9867,9868],[9867,9867],[9883,9884],[9883,9883],[10290,10291],[10290,10290],[10306,10307],[10306,10306],[10321,10322],[10321,10321],[10333,10334],[10333,10333],[10698,10699],[10698,10698],[10711,10712],[10711,10711],[10726,10727],[10726,10726],[10734,10735],[10734,10734],[10929,10930],[10929,10929],[10943,10944],[10943,10943],[10958,10959],[10958,10958],[10974,10975],[10974,10974],[11373,11374],[11373,11373],[11389,11390],[11389,11389],[11404,11405],[11404,11404],[11418,11419],[11418,11418],[712,713],[712,712],[732,733],[732,732],[819,820],[819,819],[845,846],[845,845],[931,932],[931,931],[950,951],[950,950],[20755,20769],[21037,21050],[21792,21854],[22609,22644],[22832,22834],"[doc_json]",[25812,25884]]