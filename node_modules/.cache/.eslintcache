[{"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js":"1","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js":"2","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js":"3","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\annotation.js":"4","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\guidedAnnotation.js":"5","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js":"6","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js":"7","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js":"8","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js":"9","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js":"10","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js":"11","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js":"12","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Header.js":"13","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ProgressButton.js":"14","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js":"15","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js":"16","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js":"17"},{"size":706,"mtime":1648124071610,"results":"18","hashOfConfig":"19"},{"size":60422,"mtime":1648476337467,"results":"20","hashOfConfig":"19"},{"size":375,"mtime":1645787016766,"results":"21","hashOfConfig":"19"},{"size":321,"mtime":1645793856078,"results":"22","hashOfConfig":"19"},{"size":384,"mtime":1645793793456,"results":"23","hashOfConfig":"19"},{"size":23723,"mtime":1648478541561,"results":"24","hashOfConfig":"19"},{"size":357,"mtime":1646318356436,"results":"25","hashOfConfig":"19"},{"size":439,"mtime":1646496707735,"results":"26","hashOfConfig":"19"},{"size":8185,"mtime":1647878501398,"results":"27","hashOfConfig":"19"},{"size":2508,"mtime":1647878770931,"results":"28","hashOfConfig":"19"},{"size":4835,"mtime":1648393288637,"results":"29","hashOfConfig":"19"},{"size":2305,"mtime":1648393239422,"results":"30","hashOfConfig":"19"},{"size":770,"mtime":1646492626118,"results":"31","hashOfConfig":"19"},{"size":480,"mtime":1646492608894,"results":"32","hashOfConfig":"19"},{"size":8595,"mtime":1648478835791,"results":"33","hashOfConfig":"19"},{"size":8360,"mtime":1647529233757,"results":"34","hashOfConfig":"19"},{"size":2272,"mtime":1648137057484,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"iqi5he",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"39"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"39"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"39"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"39"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js",[],[],["97","98"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],[],"import { useState, useEffect, useRef } from 'react'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\n\r\nimport StartPage from './components/StartPage'\r\nimport Instructions from './components/Instructions'\r\nimport GuidedAnnotation from './components/GuidedAnnotation'\r\nimport Annotation from './components/Annotation'\r\nimport json_file from './data/data_for_mturk.json'\r\nimport g_json_file from './data/guided_annotation/data_for_mturk.json'\r\nimport { MachineStateHandler } from './components/Annotation_event_handlers';\r\nimport _ from 'underscore';\r\n\r\n\r\nconst App = () => {\r\n\r\n  // AVIVSL: GUIDED_ANNOTATION\r\n  const [g_doc_json, g_setDocJson] = useState([]);\r\n  const [g_summary_json, g_setSummaryJson] = useState([]); \r\n  const [g_all_lemma_match_mtx, g_setAllLemmaMtx] = useState([]);\r\n  const [g_important_lemma_match_mtx, g_setImportantLemmaMtx] = useState([]);\r\n  const [g_doc_paragraph_breaks, g_setDocParagraphBreaks] = useState([]);\r\n  const [g_boldState, g_setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [g_oldAlignmentState, g_setOldAlignmentState] = useState(\"all\"); // for user to choose if want full highlighting history, only current sentence's highlighting history or no history (denoted as \"all\", \"sent\" and \"none\", accordingly)\r\n  const [g_StateMachineState, g_SetStateMachineState] = useState(\"START\");\r\n  const [g_error_message, g_setErrorMessage] = React.useState(\"\");\r\n  const [g_CurrSentInd, g_SetCurrSentInd] = useState(-1);\r\n  const [g_InfoMessage, g_SetInfoMessage] = useState(\"\");\r\n  const [g_AlignmentCount, g_SetAlignmentCount] = useState(0)\r\n  const [g_prevStateMachineState, g_setPrevStateMachineState] = useState(\"\")\r\n  \r\n  const [g_prevSummarySpanHighlights, g_setPrevSummarySpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [g_prevDocSpanHighlights, g_setPrevDocSpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [g_prevSummaryJsonRevise, g_setPrevSummaryJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [g_prevDocJsonRevise, g_setPrevDocJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n\r\n\r\n  const [g_DocOnMouseDownID, g_SetDocOnMouseDownID] = useState(\"-1\");\r\n  const [g_SummaryOnMouseDownID, g_SetSummaryOnMouseDownID] = useState(\"-1\");\r\n  const [g_docOnMouseDownActivated, g_setDocOnMouseDownActivated] = useState(false);\r\n  const [g_summaryOnMouseDownActivated, g_setSummaryOnMouseDownActivated] = useState(false);\r\n  const [g_hoverActivatedId, g_setHoverActivatedId] = useState(\"-1\"); // value will be of tkn_id of elem hovered over\r\n  const [g_hoverActivatedDocOrSummary, g_setHoverActivatedDocOrSummary] = useState(\"doc\"); // value will be of tkn_id of elem hovered over\r\n  const [g_sliderBoldStateActivated, g_setSliderBoldStateActivated] = useState(false);\r\n\r\n\r\n\r\n  // AVIVSL: ACTUAL ANNOTATION\r\n  const [task_id, setTaskID] = useState(\"-1\"); // default for task_id is -1\r\n  const [doc_json, setDocJson] = useState([]);\r\n  const [summary_json, setSummaryJson] = useState([]); \r\n  const [all_lemma_match_mtx, setAllLemmaMtx] = useState([]);\r\n  const [important_lemma_match_mtx, setImportantLemmaMtx] = useState([]);\r\n  const [doc_paragraph_breaks, setDocParagraphBreaks] = useState([]);\r\n  const [boldState, setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [oldAlignmentState, setOldAlignmentState] = useState(\"all\"); // for user to choose if want full highlighting history, only current sentence's highlighting history or no history (denoted as \"all\", \"sent\" and \"none\", accordingly)\r\n  const [StateMachineState, SetStateMachineState] = useState(\"START\");\r\n  const [error_message, setErrorMessage] = React.useState(\"\");\r\n  const [CurrSentInd, SetCurrSentInd] = useState(-1);\r\n  const [InfoMessage, SetInfoMessage] = useState(\"\");\r\n  const [AlignmentCount, SetAlignmentCount] = useState(0)\r\n\r\n  const [prevStateMachineState, setPrevStateMachineState] = useState(\"\")\r\n  \r\n  const [prevSummarySpanHighlights, setPrevSummarySpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevDocSpanHighlights, setPrevDocSpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevSummaryJsonRevise, setPrevSummaryJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [prevDocJsonRevise, setPrevDocJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n\r\n\r\n  const [DocOnMouseDownID, SetDocOnMouseDownID] = useState(\"-1\");\r\n  const [SummaryOnMouseDownID, SetSummaryOnMouseDownID] = useState(\"-1\");\r\n  const [docOnMouseDownActivated, setDocOnMouseDownActivated] = useState(false);\r\n  const [summaryOnMouseDownActivated, setSummaryOnMouseDownActivated] = useState(false);\r\n  const [hoverActivatedId, setHoverActivatedId] = useState(\"-1\"); // value will be of tkn_id of elem hovered over\r\n  const [hoverActivatedDocOrSummary, setHoverActivatedDocOrSummary] = useState(\"doc\"); // value will be of tkn_id of elem hovered over\r\n  const [sliderBoldStateActivated, setSliderBoldStateActivated] = useState(false);\r\n\r\n  /*************************************** error handling *************************************************/\r\n  const Alert = React.forwardRef(function Alert(props, ref) {return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;});\r\n  \r\n  // AVIVSL: GUIDED_ANNOTATION\r\n  const g_handleErrorOpen = ({ msg }) => { \r\n    g_setErrorMessage(msg); \r\n  };\r\n\r\n  const g_handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    g_setErrorMessage(\"\");\r\n  };\r\n\r\n  // AVIVSL: ACTUAL ANNOTATION\r\n  const handleErrorOpen = ({ msg }) => { \r\n    setErrorMessage(msg); \r\n  };\r\n\r\n  const handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n\r\n/************************************************************************************************************* */\r\n\r\n  const isPunct = (tkn_txt) => {\r\n    const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n    const result = tkn_txt.replace(regex, '').replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    return (result === '');\r\n  }\r\n\r\n  /************************************************************************************************* AVIVSL: GUIDED_ANNOTATION *****************************************************************************************/\r\n  function g_addDocWordComponents(doc) {\r\n    let updated_doc_json = [];\r\n    doc.forEach((word) => {\r\n      let boldfaced=false;\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      let red_color=false;\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, red_color, alignment_id}; \r\n      updated_doc_json = [...updated_doc_json, newWord];\r\n    })\r\n    g_setDocJson(updated_doc_json);\r\n  }\r\n\r\n  function g_addSummaryWordComponents(summary) {\r\n    let updated_summary_json = [];\r\n    summary.forEach((word) => {\r\n      let boldfaced=false;\r\n\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let shadowed=false;\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, shadowed, alignment_id}; \r\n      updated_summary_json = [...updated_summary_json, newWord];\r\n    })\r\n    g_setSummaryJson(updated_summary_json);\r\n  }\r\n\r\n  const g_toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    g_setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n    } else if (turn_off){\r\n        g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word))\r\n    } else {\r\n      g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n    }\r\n  }\r\n\r\n  g_toggleDocSpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const g_toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    g_setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n    } else if (turn_off){\r\n      g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word));\r\n    } else {\r\n      g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n    }\r\n  }\r\n\r\n  g_toggleSummarySpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const g_approveHighlightHandler = () => {\r\n    const doc_tkn_ids = g_doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    g_setDocJson(g_doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, g_AlignmentCount], span_highlighted: false } : word));\r\n\r\n\r\n    const summary_tkn_ids = g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    g_setSummaryJson(g_summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, g_AlignmentCount], span_highlighted: false } : word));    \r\n \r\n  }\r\n\r\n  const g_StartReviseStateHandler = (isBackBtn) => {\r\n    if (isBackBtn){\r\n      g_setDocJson(g_doc_json.map((word, ind) => {return {...word, all_highlighted: g_prevDocJsonRevise[ind].all_highlighted, span_highlighted: g_prevDocJsonRevise[ind].span_highlighted, alignment_id: g_prevDocJsonRevise[ind].alignment_id}}))\r\n      g_setSummaryJson(g_summary_json.map((word, ind) => {return {...word, all_highlighted: g_prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: g_prevSummaryJsonRevise[ind].span_highlighted, alignment_id: g_prevSummaryJsonRevise[ind].alignment_id}}))\r\n    } else{\r\n      g_setPrevStateMachineState(g_StateMachineState);\r\n      g_setPrevDocSpanHighlights(g_doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      g_setPrevSummarySpanHighlights(g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      g_setSummaryJson(g_summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n    }\r\n  }\r\n\r\n  const g_ExitReviseHandler = () => {\r\n    g_setDocJson(g_doc_json.map((word, ind) => g_prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n    g_setSummaryJson(g_summary_json.map((word, ind) => g_prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n    const prev_state = g_prevStateMachineState;\r\n    g_SetStateMachineState(g_prevStateMachineState);\r\n    g_setPrevStateMachineState(\"\");\r\n    g_setPrevSummarySpanHighlights([]);\r\n    g_setPrevDocSpanHighlights([]);\r\n    return prev_state\r\n  }\r\n\r\n  const g_RemoveAlignmentId = (word, chosen_align_id) => {\r\n    const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n    return new_alignment_id;\r\n  }\r\n\r\n  const g_ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n    g_setPrevSummaryJsonRevise(g_summary_json);\r\n    g_setPrevDocJsonRevise(g_doc_json);\r\n\r\n    const chosen_align_id = (clickedWordInfo[0] === 'doc') ? g_doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n    g_summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n\r\n    g_setSummaryJson(g_summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: g_RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    g_setDocJson(g_doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: g_RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n  }\r\n\r\n\r\n  const g_SetSummaryShadow = (sent_id) => {\r\n    g_setSummaryJson(g_summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const g_SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n    g_setSummaryJson(\r\n      g_summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n      (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n      )\r\n  }\r\n\r\n  const g_SetDocBoldface = (tkn_ids) => {\r\n    g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n\r\n\r\n\r\n  const g_checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n    const which_match_mtx = g_important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return g_all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const g_boldStateHandler = (event, newValue) => {\r\n    if (event !== undefined){\r\n      g_setSliderBoldStateActivated(true)\r\n    }\r\n    if (newValue=='1'){\r\n      g_setBoldState(\"none\");\r\n      g_SetDocBoldface([]);\r\n    } else if (newValue=='2'){\r\n      g_setBoldState(\"span\");\r\n      const summary_ids = g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      const isSpan = true;\r\n      const tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      g_SetDocBoldface(tkn_ids);\r\n    } else {\r\n      g_setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = g_summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      g_SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n\r\n  const g_SetDocOldHighlights = (tkn_ids) => {\r\n    g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const g_SetSummaryOldHighlights = (tkn_ids) => {\r\n    g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const g_FindDocAlignmentPerSent = (sent_ind) => {\r\n    let curr_sent_alignment_ids = g_summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n    curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n    const doc_ids = g_doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n    return doc_ids\r\n  }\r\n\r\n\r\n  const g_oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n\r\n    if (newValue=='1'){\r\n      g_setOldAlignmentState(\"none\");\r\n      g_SetDocOldHighlights([]);\r\n      g_SetSummaryOldHighlights([]);\r\n    } else if (newValue=='2'){\r\n      g_setOldAlignmentState(\"sent\");\r\n      sent_ind = (sent_ind===-1) ? g_CurrSentInd : sent_ind\r\n      const doc_ids = g_FindDocAlignmentPerSent(sent_ind)\r\n      const summary_ids = g_summary_json.filter((word) => {return (word.all_highlighted && word.sent_id === sent_ind)}).map((word) => {return word.tkn_id});\r\n      g_SetDocOldHighlights(doc_ids);\r\n      g_SetSummaryOldHighlights(summary_ids);\r\n    } else {\r\n      g_setOldAlignmentState(\"all\");\r\n      const doc_ids = g_doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      const summary_ids = g_summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      g_SetDocOldHighlights(doc_ids);\r\n      g_SetSummaryOldHighlights(summary_ids);\r\n    }\r\n  }\r\n\r\n  g_oldAlignmentStateHandler.defaultProps = {\r\n    sent_ind: -1\r\n  }\r\n\r\n\r\n\r\n  const g_hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    // onMouseEnter for \"REVISE HOVER\"\r\n    if (inOrOut === \"in\" && g_StateMachineState===\"REVISE HOVER\") { \r\n      g_setDocJson(g_doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      g_setSummaryJson(g_summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n    } \r\n    // onMouseLeave for \"REVISE HOVER\"\r\n    else if (inOrOut === \"out\" && g_StateMachineState===\"REVISE HOVER\") { \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      g_setSummaryJson(g_summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n    }\r\n    // onMouseLeave for all the alignments choosing states\r\n    else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState) && isSummary) { \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, red_color:false}}))\r\n    }\r\n\r\n  }\r\n\r\n  const g_isRedLettered = (summary_tkn_id) => {\r\n    if ((g_StateMachineState === \"REVISE CLICKED\") && (g_summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > g_CurrSentInd}).length !== 0)){\r\n      return false\r\n    } else if ((g_summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== g_CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState))) {\r\n      return false\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState)) {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const g_MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n    g_setSliderBoldStateActivated(false);\r\n    if (typeof forceState === 'string') {\r\n      console.log(`forceState situation with: state ${forceState}`);\r\n    }\r\n    else{\r\n      console.log(\"not a forceState situation...\");\r\n    }\r\n    MachineStateHandler(g_summary_json,\r\n                          g_StateMachineState, g_SetStateMachineState,\r\n                          g_SetInfoMessage, g_handleErrorOpen, isPunct,\r\n                          g_CurrSentInd, g_SetCurrSentInd, g_SetSummaryShadow,\r\n                          g_AlignmentCount, g_SetAlignmentCount,\r\n                          g_approveHighlightHandler,\r\n                          clickedWordInfo, forceState, \r\n                          g_StartReviseStateHandler, g_ExitReviseHandler,\r\n                          g_ReviseChooseAlignHandler, \r\n                          isBackBtn,\r\n                          g_setPrevSummaryJsonRevise, g_setPrevDocJsonRevise\r\n                         );\r\n  }\r\n\r\n  g_MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n    clickedWordInfo: [],\r\n    isBackBtn: false\r\n  }\r\n  /*********************************************************************************************************************************************************************************************************************/\r\n\r\n  \r\n  \r\n  /************************************ AVIVSL: ACTUAL ANNOTATION ********************************************** */\r\n\r\n\r\n\r\n  function addDocWordComponents(doc) {\r\n    let updated_doc_json = [];\r\n    doc.forEach((word) => {\r\n      let boldfaced=false;\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      let red_color=false;\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, red_color, alignment_id}; \r\n      updated_doc_json = [...updated_doc_json, newWord];\r\n    })\r\n    setDocJson(updated_doc_json);\r\n  }\r\n\r\n\r\n  function addSummaryWordComponents(summary) {\r\n    let updated_summary_json = [];\r\n    summary.forEach((word) => {\r\n      let boldfaced=false;\r\n\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let shadowed=false;\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, shadowed, alignment_id}; \r\n      updated_summary_json = [...updated_summary_json, newWord];\r\n    })\r\n    setSummaryJson(updated_summary_json);\r\n  }\r\n\r\n  const toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n    } else if (turn_off){\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word))\r\n    } else {\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n    }\r\n  }\r\n\r\n  toggleDocSpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    console.log(\"inside toggleSummarySpanHighlight:\")\r\n    console.log(tkn_ids)\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n    } else if (turn_off){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word));\r\n    } else {\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n    }\r\n  }\r\n\r\n  toggleSummarySpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n\r\n  const approveHighlightHandler = () => {\r\n    const doc_tkn_ids = doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));\r\n\r\n\r\n    const summary_tkn_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setSummaryJson(summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));    \r\n \r\n  }\r\n\r\n  const StartReviseStateHandler = (isBackBtn) => {\r\n    if (isBackBtn){\r\n      setDocJson(doc_json.map((word, ind) => {return {...word, all_highlighted: prevDocJsonRevise[ind].all_highlighted, span_highlighted: prevDocJsonRevise[ind].span_highlighted, alignment_id: prevDocJsonRevise[ind].alignment_id}}))\r\n      setSummaryJson(summary_json.map((word, ind) => {return {...word, all_highlighted: prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: prevSummaryJsonRevise[ind].span_highlighted, alignment_id: prevSummaryJsonRevise[ind].alignment_id}}))\r\n    } else{\r\n      setPrevStateMachineState(StateMachineState);\r\n      setPrevDocSpanHighlights(doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      setPrevSummarySpanHighlights(summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      \r\n      setDocJson(doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n    }\r\n  }\r\n\r\n  const ExitReviseHandler = () => {\r\n    setDocJson(doc_json.map((word, ind) => prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n    setSummaryJson(summary_json.map((word, ind) => prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n    const prev_state = prevStateMachineState;\r\n    SetStateMachineState(prevStateMachineState);\r\n    setPrevStateMachineState(\"\");\r\n    setPrevSummarySpanHighlights([]);\r\n    setPrevDocSpanHighlights([]);\r\n    return prev_state\r\n  }\r\n\r\n  const RemoveAlignmentId = (word, chosen_align_id) => {\r\n    const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n    return new_alignment_id;\r\n  }\r\n\r\n  const ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n    setPrevSummaryJsonRevise(summary_json);\r\n    setPrevDocJsonRevise(doc_json);\r\n\r\n    const chosen_align_id = (clickedWordInfo[0] === 'doc') ? doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n                                                             summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n\r\n    setSummaryJson(summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    setDocJson(doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n  }\r\n\r\n\r\n  const SetSummaryShadow = (sent_id) => {\r\n    setSummaryJson(summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n    setSummaryJson(\r\n      summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n      (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n      )\r\n  }\r\n\r\n  const SetDocBoldface = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n  const checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n    if (isHover){\r\n      console.log(\"AVIVSL: summary_ids are:\")\r\n      console.log(summary_ids)\r\n    }\r\n    const which_match_mtx = important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const boldStateHandler = (event, newValue) => {\r\n    if (event !== undefined){\r\n      setSliderBoldStateActivated(true)\r\n    }\r\n    if (newValue=='1'){\r\n      setBoldState(\"none\");\r\n      SetDocBoldface([]);\r\n    } else if (newValue=='2'){\r\n      setBoldState(\"span\");\r\n      const summary_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      const isSpan = true;\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      SetDocBoldface(tkn_ids);\r\n    } else {\r\n      setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n\r\n  const SetDocOldHighlights = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const SetSummaryOldHighlights = (tkn_ids) => {\r\n    setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const FindDocAlignmentPerSent = (sent_ind) => {\r\n    let curr_sent_alignment_ids = summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n    curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n    const doc_ids = doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n    return doc_ids\r\n  }\r\n\r\n\r\n  const oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n\r\n    if (newValue=='1'){\r\n      setOldAlignmentState(\"none\");\r\n      SetDocOldHighlights([]);\r\n      SetSummaryOldHighlights([]);\r\n    } else if (newValue=='2'){\r\n      setOldAlignmentState(\"sent\");\r\n      sent_ind = (sent_ind===-1) ? CurrSentInd : sent_ind\r\n      const doc_ids = FindDocAlignmentPerSent(sent_ind)\r\n      const summary_ids = summary_json.filter((word) => {return (word.all_highlighted && word.sent_id === sent_ind)}).map((word) => {return word.tkn_id});\r\n      SetDocOldHighlights(doc_ids);\r\n      SetSummaryOldHighlights(summary_ids);\r\n    } else {\r\n      setOldAlignmentState(\"all\");\r\n      const doc_ids = doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      const summary_ids = summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      SetDocOldHighlights(doc_ids);\r\n      SetSummaryOldHighlights(summary_ids);\r\n    }\r\n  }\r\n\r\n  oldAlignmentStateHandler.defaultProps = {\r\n    sent_ind: -1\r\n  }\r\n\r\n\r\n  \r\n  const hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    // onMouseEnter for \"REVISE HOVER\"\r\n    if (inOrOut === \"in\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      setSummaryJson(summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n    } \r\n    // onMouseLeave for \"REVISE HOVER\"\r\n    else if (inOrOut === \"out\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n    }\r\n    // onMouseEnter for all the alignments choosing states\r\n    // else if (inOrOut === \"in\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      // const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[tkn_id], isHover:true})});\r\n      // setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))\r\n    // } \r\n    // onMouseLeave for all the alignments choosing states\r\n    else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      setDocJson(doc_json.map((word) => {return {...word, red_color:false}}))\r\n    }\r\n\r\n  }\r\n\r\n  const isRedLettered = (summary_tkn_id) => {\r\n    if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > CurrSentInd}).length !== 0)){\r\n      return false\r\n    } else if ((summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))) {\r\n      return false\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n    setSliderBoldStateActivated(false);\r\n    if (typeof forceState === 'string') {\r\n      console.log(`forceState situation with: state ${forceState}`);\r\n    }\r\n    else{\r\n      console.log(\"not a forceState situation...\");\r\n    }\r\n    MachineStateHandler(summary_json,\r\n                          StateMachineState, SetStateMachineState,\r\n                          SetInfoMessage, handleErrorOpen, isPunct,\r\n                          CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                          AlignmentCount, SetAlignmentCount,\r\n                          approveHighlightHandler,\r\n                          clickedWordInfo, forceState, \r\n                          StartReviseStateHandler, ExitReviseHandler,\r\n                          ReviseChooseAlignHandler, \r\n                          isBackBtn,\r\n                          setPrevSummaryJsonRevise, setPrevDocJsonRevise\r\n                         );\r\n  }\r\n\r\n  MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n    clickedWordInfo: [],\r\n    isBackBtn: false\r\n  }\r\n\r\n/**************************************************************************************************************/\r\n\r\n\r\n\r\n\r\n/************************************************************************************************* AVIVSL: GUIDED_ANNOTATION *****************************************************************************************/\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const g_finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (g_StateMachineState !== \"START\" && g_summary_json.filter((word) => {return word.sent_id===g_CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (g_summary_json.filter((word) => { return word.sent_id===g_CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !g_finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState)) {\r\n      g_finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, g_summary_json.map(word => { return word.sent_id; })) === g_CurrSentInd)\r\n      if (isLastSent) {\r\n        g_MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        g_MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && g_finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState)) { \r\n      g_finishedSent.current = false;\r\n      g_MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [g_summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    g_SetSummaryShadowAndUpdateHighlights(g_CurrSentInd);\r\n  }, [g_CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(g_StateMachineState) && !g_sliderBoldStateActivated) {\r\n      const bold_state = (g_summary_json.filter((word) => {return word.span_highlighted}).length === 0) ? '3' : '2'; // if no span is current highlighted - bold everything, otherwise bold only currently highlighted span\r\n      g_boldStateHandler(undefined, bold_state);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState) && !g_sliderBoldStateActivated) {\r\n      g_boldStateHandler(undefined, '1');\r\n    }\r\n  }, [g_StateMachineState, g_summary_json]);\r\n  /********************************************************************************/\r\n\r\n   /***************************** old alignments controlling *****************************/ \r\n   const g_prevState = useRef(\"\")\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(g_StateMachineState)) {\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n     } else if (g_StateMachineState === \"REVISE CLICKED\"){\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n     } else if (g_StateMachineState === \"REVISE HOVER\"){\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n     }\r\n     g_prevState.current = g_StateMachineState;\r\n   }, [g_StateMachineState, g_AlignmentCount]);\r\n   /********************************************************************************/\r\n   useEffect(() => {\r\n     console.log(`g_CurrSentInd is updated and is now ${g_CurrSentInd}`)\r\n   }, [g_CurrSentInd]);\r\n   \r\n   \r\n   \r\n   /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n   useEffect(() => {\r\n     if (g_DocOnMouseDownID !== \"-1\"){\r\n       g_setDocOnMouseDownActivated(true)\r\n     } else if (g_DocOnMouseDownID === \"-1\"){\r\n       g_setDocOnMouseDownActivated(false)\r\n     } \r\n     \r\n     if (g_SummaryOnMouseDownID !== \"-1\") {\r\n       g_setSummaryOnMouseDownActivated(true)\r\n     } else {\r\n       g_setSummaryOnMouseDownActivated(false)\r\n     }\r\n   }, [g_DocOnMouseDownID,g_SummaryOnMouseDownID]);\r\n   \r\n   //AVIVSL: TODO: find way to reset the whole hovering process when the onMouseUp occurs outside of the text (maybe when g_docOnMouseDownActivated===false or g_summaryOnMouseDownActivated===false) --> maybe use a useRef to remember which one was the one activated - summary or doc?\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState)){\r\n       if(g_docOnMouseDownActivated) {\r\n         console.log(`g_DocOnMouseDownID is ${g_DocOnMouseDownID} and g_hoverActivatedId ia ${g_hoverActivatedId}`)\r\n         const min_ID =  (g_DocOnMouseDownID > g_hoverActivatedId) ? g_hoverActivatedId : g_DocOnMouseDownID;\r\n         const max_ID =  (g_DocOnMouseDownID > g_hoverActivatedId) ? g_DocOnMouseDownID : g_hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         g_setDocJson(g_doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!g_docOnMouseDownActivated){\r\n         g_setDocJson(g_doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n       }\r\n       if(g_summaryOnMouseDownActivated) {\r\n         console.log(`g_SummaryOnMouseDownID is ${g_SummaryOnMouseDownID} and g_hoverActivatedId ia ${g_hoverActivatedId}`)\r\n         const min_ID =  (g_SummaryOnMouseDownID > g_hoverActivatedId) ? g_hoverActivatedId : g_SummaryOnMouseDownID;\r\n         const max_ID =  (g_SummaryOnMouseDownID > g_hoverActivatedId) ? g_SummaryOnMouseDownID : g_hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         g_setSummaryJson(g_summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!g_summaryOnMouseDownActivated){\r\n         g_setSummaryJson(g_summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n         \r\n         if (g_isRedLettered(g_hoverActivatedId) && g_hoverActivatedDocOrSummary === \"summary\") {\r\n           const doc_tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:[g_hoverActivatedId], isHover:true})});\r\n\r\n           g_setDocJson(g_doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n         }  \r\n       }\r\n     }\r\n   }, [g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId]);\r\n   /********************************************************************************/ \r\n/*********************************************************************************************************************************************************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /************************************ AVIVSL: ACTUAL ANNOTATION *********************************************/\r\n\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (StateMachineState !== \"START\" && summary_json.filter((word) => {return word.sent_id===CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (summary_json.filter((word) => { return word.sent_id===CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) {\r\n      finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n      if (isLastSent) {\r\n        MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) { \r\n      console.log(`curr state is ${StateMachineState}`);\r\n      console.log(`curr CurrSentInd is ${CurrSentInd}`)\r\n      console.log(\"back to square one\");\r\n      finishedSent.current = false;\r\n      MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n\r\n  \r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    SetSummaryShadowAndUpdateHighlights(CurrSentInd);\r\n  }, [CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      const bold_state = (summary_json.filter((word) => {return word.span_highlighted}).length === 0) ? '3' : '2'; // if no span is current highlighted - bold everything, otherwise bold only currently highlighted span\r\n      boldStateHandler(undefined, bold_state);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, '1');\r\n    }\r\n  }, [StateMachineState, summary_json]);\r\n  /********************************************************************************/\r\n\r\n\r\n    /***************************** old alignments controlling *****************************/ \r\n    const prevState = useRef(\"\")\r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState)) {\r\n        oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE CLICKED\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE HOVER\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n      }\r\n      prevState.current = StateMachineState;\r\n    }, [StateMachineState, AlignmentCount]);\r\n    /********************************************************************************/\r\n    useEffect(() => {\r\n      console.log(`CurrSentInd is updated and is now ${CurrSentInd}`)\r\n    }, [CurrSentInd]);\r\n    \r\n    \r\n    \r\n    /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n    useEffect(() => {\r\n      if (DocOnMouseDownID !== \"-1\"){\r\n        setDocOnMouseDownActivated(true)\r\n      } else if (DocOnMouseDownID === \"-1\"){\r\n        setDocOnMouseDownActivated(false)\r\n      } \r\n      \r\n      if (SummaryOnMouseDownID !== \"-1\") {\r\n        setSummaryOnMouseDownActivated(true)\r\n      } else {\r\n        setSummaryOnMouseDownActivated(false)\r\n      }\r\n    }, [DocOnMouseDownID,SummaryOnMouseDownID]);\r\n    \r\n    //AVIVSL: TODO: find way to reset the whole hovering process when the onMouseUp occurs outside of the text (maybe when docOnMouseDownActivated===false or summaryOnMouseDownActivated===false) --> maybe use a useRef to remember which one was the one activated - summary or doc?\r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)){\r\n        if(docOnMouseDownActivated) {\r\n          console.log(`DocOnMouseDownID is ${DocOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (DocOnMouseDownID > hoverActivatedId) ? hoverActivatedId : DocOnMouseDownID;\r\n          const max_ID =  (DocOnMouseDownID > hoverActivatedId) ? DocOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setDocJson(doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!docOnMouseDownActivated){\r\n          setDocJson(doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n        }\r\n        if(summaryOnMouseDownActivated) {\r\n          console.log(`SummaryOnMouseDownID is ${SummaryOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? hoverActivatedId : SummaryOnMouseDownID;\r\n          const max_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? SummaryOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setSummaryJson(summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!summaryOnMouseDownActivated){\r\n          setSummaryJson(summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n          \r\n          if (isRedLettered(hoverActivatedId) && hoverActivatedDocOrSummary === \"summary\") {\r\n            const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[hoverActivatedId], isHover:true})});\r\n            \r\n            console.log(\"red is activated:\")\r\n            console.log(doc_json.filter((word) => {return doc_tkn_ids.includes(word.tkn_id)}).map((word) => {return word.word}))\r\n\r\n            setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n          }  \r\n        }\r\n      }\r\n    }, [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId]);\r\n    /********************************************************************************/ \r\n/**************************************************************************************************************/\r\n\r\n\r\n    useEffect(() => {\r\n\r\n      const g_getTasks = () => {\r\n        const curr_id = '0';\r\n\r\n        g_addDocWordComponents(g_json_file[curr_id][\"doc\"])\r\n        g_addSummaryWordComponents(g_json_file[curr_id][\"summary\"])\r\n        g_setAllLemmaMtx(g_json_file[curr_id][\"all_lemma_match_mtx\"]);\r\n        g_setImportantLemmaMtx(g_json_file[curr_id][\"important_lemma_match_mtx\"]);\r\n        g_setDocParagraphBreaks(g_json_file[curr_id][\"doc_paragraph_breaks\"])\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n          \r\n        }\r\n    \r\n\r\n\r\n      const getTasks = () => {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n\r\n        const curr_id = urlParams.get('id');\r\n        setTaskID(curr_id);\r\n\r\n        addDocWordComponents(json_file[curr_id][\"doc\"])\r\n        addSummaryWordComponents(json_file[curr_id][\"summary\"])\r\n        setAllLemmaMtx(json_file[curr_id][\"all_lemma_match_mtx\"]);\r\n        setImportantLemmaMtx(json_file[curr_id][\"important_lemma_match_mtx\"]);\r\n        setDocParagraphBreaks(json_file[curr_id][\"doc_paragraph_breaks\"])\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n          \r\n        }\r\n\r\n      g_getTasks();\r\n      getTasks();\r\n    }, [])\r\n\r\n\r\n    const SubmitHandler = (event) => {\r\n      console.log(event);\r\n      alert(\"Submitted!\");\r\n    }\r\n\r\n    const g_SubmitHandler = (event) => {\r\n      alert(\"Submitted!\");\r\n    }\r\n\r\n  return (\r\n    <Router>\r\n      <div className='container'>\r\n        <Routes>\r\n          {/* <Route path='/' element={<StartPage />} /> */}\r\n          {/* <Route path='/homepage' element={<StartPage />} /> */}\r\n          <Route path='/instructions' element={<Instructions />} />\r\n          <Route path='/guidedAnnotation' element={<Annotation\r\n                                              isGuidedAnnotation={true} \r\n                                              task_id={'0'}\r\n                                              doc_json = {g_doc_json}\r\n                                              summary_json = {g_summary_json}\r\n                                              all_lemma_match_mtx = {g_all_lemma_match_mtx}\r\n                                              important_lemma_match_mtx = {g_important_lemma_match_mtx}\r\n                                              doc_paragraph_breaks = {g_doc_paragraph_breaks}\r\n                                              StateMachineState = {g_StateMachineState}\r\n                                              SetStateMachineState = {g_SetStateMachineState}\r\n                                              handleErrorOpen = {g_handleErrorOpen}\r\n                                              isPunct = {isPunct}\r\n                                              toggleSummarySpanHighlight = {g_toggleSummarySpanHighlight}\r\n                                              toggleDocSpanHighlight = {g_toggleDocSpanHighlight}\r\n                                              boldState = {g_boldState}\r\n                                              boldStateHandler = {g_boldStateHandler}\r\n                                              SubmitHandler = {g_SubmitHandler}\r\n                                              CurrSentInd = {g_CurrSentInd}\r\n                                              InfoMessage = {g_InfoMessage}\r\n                                              MachineStateHandlerWrapper = {g_MachineStateHandlerWrapper}\r\n                                              AlignmentCount = {g_AlignmentCount} \r\n                                              SetAlignmentCount = {g_SetAlignmentCount}\r\n                                              oldAlignmentState = {g_oldAlignmentState}\r\n                                              oldAlignmentStateHandler = {g_oldAlignmentStateHandler}\r\n                                              hoverHandler = {g_hoverHandler}\r\n                                              DocOnMouseDownID = {g_DocOnMouseDownID}\r\n                                              SetDocOnMouseDownID = {g_SetDocOnMouseDownID}\r\n                                              SummaryOnMouseDownID = {g_SummaryOnMouseDownID}\r\n                                              SetSummaryOnMouseDownID = {g_SetSummaryOnMouseDownID}\r\n                                              setDocOnMouseDownActivated = {g_setDocOnMouseDownActivated}\r\n                                              docOnMouseDownActivated = {g_docOnMouseDownActivated}\r\n                                              setSummaryOnMouseDownActivated = {g_setSummaryOnMouseDownActivated}\r\n                                              summaryOnMouseDownActivated = {g_summaryOnMouseDownActivated}\r\n                                              setHoverActivatedId = {g_setHoverActivatedId}\r\n                                              setHoverActivatedDocOrSummary = {g_setHoverActivatedDocOrSummary}\r\n                                              />} \r\n            />\r\n\r\n          <Route path='/' element={<Annotation \r\n                                              isGuidedAnnotation={false} \r\n                                              task_id={task_id} \r\n                                              doc_json = {doc_json}\r\n                                              summary_json = {summary_json}\r\n                                              all_lemma_match_mtx = {all_lemma_match_mtx}\r\n                                              important_lemma_match_mtx = {important_lemma_match_mtx}\r\n                                              doc_paragraph_breaks = {doc_paragraph_breaks}\r\n                                              StateMachineState = {StateMachineState}\r\n                                              SetStateMachineState = {SetStateMachineState}\r\n                                              handleErrorOpen = {handleErrorOpen}\r\n                                              isPunct = {isPunct}\r\n                                              toggleSummarySpanHighlight = {toggleSummarySpanHighlight}\r\n                                              toggleDocSpanHighlight = {toggleDocSpanHighlight}\r\n                                              boldState = {boldState}\r\n                                              boldStateHandler = {boldStateHandler}\r\n                                              SubmitHandler = {SubmitHandler}\r\n                                              CurrSentInd = {CurrSentInd}\r\n                                              InfoMessage = {InfoMessage}\r\n                                              MachineStateHandlerWrapper = {MachineStateHandlerWrapper}\r\n                                              AlignmentCount = {AlignmentCount} \r\n                                              SetAlignmentCount = {SetAlignmentCount}\r\n                                              oldAlignmentState = {oldAlignmentState}\r\n                                              oldAlignmentStateHandler = {oldAlignmentStateHandler}\r\n                                              hoverHandler = {hoverHandler}\r\n                                              DocOnMouseDownID = {DocOnMouseDownID}\r\n                                              SetDocOnMouseDownID = {SetDocOnMouseDownID}\r\n                                              SummaryOnMouseDownID = {SummaryOnMouseDownID}\r\n                                              SetSummaryOnMouseDownID = {SetSummaryOnMouseDownID}\r\n                                              setDocOnMouseDownActivated = {setDocOnMouseDownActivated}\r\n                                              docOnMouseDownActivated = {docOnMouseDownActivated}\r\n                                              setSummaryOnMouseDownActivated = {setSummaryOnMouseDownActivated}\r\n                                              summaryOnMouseDownActivated = {summaryOnMouseDownActivated}\r\n                                              setHoverActivatedId = {setHoverActivatedId}\r\n                                              setHoverActivatedDocOrSummary = {setHoverActivatedDocOrSummary}\r\n                                              />} \r\n            />\r\n\r\n        </Routes>\r\n      </div>\r\n      <Snackbar open={error_message !== \"\"} autoHideDuration={6000} onClose={handleErrorClose}>\r\n        <Alert onClose={handleErrorClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {error_message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={g_error_message !== \"\"} autoHideDuration={6000} onClose={g_handleErrorClose}>\r\n        <Alert onClose={g_handleErrorClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {g_error_message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n",["126","127"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\annotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\guidedAnnotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148"],[],"import { useState, useEffect } from 'react';\r\nimport DocWord from './DocWord';\r\nimport SummaryWord from './SummaryWord';\r\nimport ResponsiveAppBar from './ResponsiveAppBar';\r\nimport { MachineStateHandler, DocMouseClickHandler, SummaryHighlightHandler } from './Annotation_event_handlers';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\nimport { ArrowBackIosTwoTone, ArrowForwardIosTwoTone } from '@mui/icons-material';\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport Typography from '@mui/material/Typography';\r\n\r\nimport Fab from '@mui/material/Fab';\r\n// import Card from '@mui/material/Card';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Button from '@mui/material/Button';\r\nimport Box from '@mui/material/Box';\r\nimport { borderColor } from '@mui/system';\r\n\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Alert from 'react-bootstrap/Alert'\r\nimport { ChevronLeft, ChevronRight, SendFill } from 'react-bootstrap-icons';\r\n\r\n// import Card from 'react-bootstrap/Card'\r\n// import { Container, Row, Col } from 'react-bootstrap';\r\n\r\n\r\nconst Annotation = ({isGuidedAnnotation, task_id, \r\n                    doc_json, summary_json, \r\n                    all_lemma_match_mtx, important_lemma_match_mtx, doc_paragraph_breaks,\r\n                    StateMachineState, SetStateMachineState,\r\n                    handleErrorOpen, isPunct,\r\n                    toggleSummarySpanHighlight, toggleDocSpanHighlight, \r\n                    boldState, boldStateHandler,\r\n                    SubmitHandler,\r\n                    CurrSentInd,\r\n                    InfoMessage,\r\n                    MachineStateHandlerWrapper,\r\n                    AlignmentCount, SetAlignmentCount,\r\n                    oldAlignmentState, oldAlignmentStateHandler,\r\n                    hoverHandler,\r\n                    DocOnMouseDownID, SetDocOnMouseDownID, SummaryOnMouseDownID, SetSummaryOnMouseDownID,\r\n                    setDocOnMouseDownActivated, docOnMouseDownActivated, setSummaryOnMouseDownActivated, summaryOnMouseDownActivated, setHoverActivatedId, setHoverActivatedDocOrSummary\r\n                   }) => {\r\n\r\n\r\n\r\n  const [DocMouseclickStartID, SetDocMouseDownStartID] = useState(\"-1\");\r\n  const [DocMouseclicked, SetDocMouseclicked] = useState(false);\r\n  const [SummaryMouseclickStartID, SetSummaryMouseDownStartID] = useState(\"-1\");\r\n  const [SummaryMouseclicked, SetSummaryMouseclicked] = useState(false);\r\n\r\n  const [summaryOnMouseDownInCorrectSent, setSummaryOnMouseDownInCorrectSent] = useState(true)\r\n  const [ctrlButtonDown, setCtrlButtonDown] = useState(false)\r\n\r\n\r\n\r\n  const nextButtonText = () => {\r\n    if(StateMachineState===\"START\"){return \"START\";}\r\n    if(StateMachineState===\"ANNOTATION\"){return \"CONFIRM\";}\r\n    if(StateMachineState===\"SENTENCE START\"){return \"CONFIRM\";}\r\n    if(StateMachineState===\"SENTENCE END\"){return \"NEXT SENTENCE\";}\r\n    if(StateMachineState===\"SUMMARY END\"){return \"SUBMIT\";}\r\n    if(StateMachineState===\"REVISE CLICKED\"){return \"CONFIRM\";}\r\n  }\r\n\r\n  const nextButtonID = () => {\r\n    if(StateMachineState===\"START\"){return \"state-START\";}\r\n    if(StateMachineState===\"ANNOTATION\"){return \"state-ANNOTATION\";}\r\n    if(StateMachineState===\"SENTENCE START\"){return \"state-SENTENCE-START\";}\r\n    if(StateMachineState===\"SENTENCE END\"){return \"state-SENTENCE-END\";}\r\n    if(StateMachineState===\"SUMMARY END\"){return \"state-SUMMARY-END\";}\r\n    if(StateMachineState===\"REVISE CLICKED\"){return \"state-REVISE-CLICKED\";}\r\n  };\r\n\r\n\r\n  // const Alert = React.forwardRef(function Alert(props, ref) {\r\n  //   return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n  // });\r\n\r\n  const getGuideAlertTitle = () => {\r\n    if(StateMachineState===\"ANNOTATION\"){return \"Find Alignments\"}\r\n    if(StateMachineState===\"SENTENCE START\"){return \"Find Alignments\";}\r\n    if(StateMachineState===\"SENTENCE END\"){return \"Finished Sentence\";}\r\n    if(StateMachineState===\"SUMMARY END\"){return \"Finished\";}\r\n    if(StateMachineState===\"REVISE HOVER\"){return \"Choose Alignment\";}\r\n    if(StateMachineState===\"REVISE CLICKED\"){return \"Adjust Alignments\";}\r\n  }\r\n\r\n\r\n  const GuideAlert = (InfoMessage) => {\r\n    return (\r\n      <Alert variant=\"info\">\r\n        <Alert.Heading>{getGuideAlertTitle()}</Alert.Heading>\r\n        <p className=\"mb-0\">\r\n          {InfoMessage}\r\n        </p>\r\n      </Alert>\r\n    )}\r\n\r\n\r\n\r\n\r\n  const DocOnMouseDownHandler = (tkn_id) => {\r\n    if (StateMachineState === \"START\"){ // during START state no highlighting\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n      SetDocOnMouseDownID(tkn_id);\r\n    }\r\n  }\r\n\r\n  const SummaryOnMouseDownHandler = (tkn_id) => {\r\n    if (StateMachineState === \"START\"){ // during START state no highlighting\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    } \r\n    else if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === tkn_id && word.sent_id > CurrSentInd}).length !== 0)) {\r\n      handleErrorOpen({ msg : \"Span chosen cannot be from future sentences. Only from current or past sentences\" });\r\n      setSummaryOnMouseDownInCorrectSent(false);\r\n    } \r\n    else if ((summary_json.filter((word) => {return word.tkn_id === tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))){ // check if span chosen is from the correct sentence first.\r\n      handleErrorOpen({ msg : \"Span chosen is not from the correct sentence.\" });\r\n      setSummaryOnMouseDownInCorrectSent(false);\r\n    } \r\n    else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n      SetSummaryOnMouseDownID(tkn_id);\r\n    }\r\n  }\r\n\r\n  const DocOnMouseUpHandler = () => {\r\n    if (StateMachineState === \"START\"){ // during START state no highlighting\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n        const chosen_IDs = doc_json.filter((word) => {return word.span_alignment_hover}).map((word) => {return word.tkn_id})\r\n        if (ctrlButtonDown) {\r\n          toggleDocSpanHighlight({tkn_ids:chosen_IDs, turn_off:true});\r\n        } else {\r\n            toggleDocSpanHighlight({tkn_ids:chosen_IDs, turn_on:true});\r\n        }\r\n        SetDocOnMouseDownID(\"-1\"); \r\n    }\r\n  }\r\n\r\n  const SummaryOnMouseUpHandler = () => {\r\n    if (StateMachineState == \"START\"){ // during start state no clicking is needed\r\n      handleErrorOpen({ msg : \"Can't highlight words yet. Press \\\"START\\\" to begin.\"});\r\n    }\r\n    else if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.span_alignment_hover && word.sent_id > CurrSentInd}).length !== 0)) {\r\n      handleErrorOpen({ msg : \"Span chosen cannot be from future sentences. Only from current or past sentences\" });\r\n    } \r\n    else if ((summary_json.filter((word) => {return word.span_alignment_hover && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))){ // check if span chosen is from the correct sentence first.\r\n      handleErrorOpen({ msg : \"Span chosen is not from the correct sentence.\" });\r\n    } \r\n    else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && summaryOnMouseDownInCorrectSent){   \r\n      const chosen_IDs = summary_json.filter((word) => {return word.span_alignment_hover}).map((word) => {return word.tkn_id})\r\n      if (ctrlButtonDown) {\r\n        toggleSummarySpanHighlight({tkn_ids:chosen_IDs, turn_off:true});\r\n      } else {\r\n        toggleSummarySpanHighlight({tkn_ids:chosen_IDs, turn_on:true});\r\n      }   \r\n      SetSummaryOnMouseDownID(\"-1\");\r\n     } \r\n     else {\r\n      if (summaryOnMouseDownInCorrectSent && StateMachineState !== \"REVISE HOVER\") {console.log(`AVIVSL: state is ${StateMachineState}`); alert(`state not defined yet! state: ${StateMachineState}`);}\r\n    }\r\n\r\n    // reset the states\r\n    setSummaryOnMouseDownInCorrectSent(true)\r\n    SetSummaryOnMouseDownID(\"-1\")\r\n  }\r\n\r\n\r\n\r\n  const DocMouseClickHandlerWrapper = (tkn_id) => {\r\n    if ((StateMachineState === \"REVISE HOVER\") && (doc_json.filter((word) => {return word.tkn_id === tkn_id})[0].alignment_id.length > 0)) {\r\n        MachineStateHandlerWrapper({clickedWordInfo:[\"doc\", tkn_id]});\r\n    }\r\n  }\r\n\r\n  const SummaryMouseClickHandlerWrapper = (tkn_id) => {\r\n  if ((StateMachineState === \"REVISE HOVER\") && (summary_json.filter((word) => {return word.tkn_id === tkn_id})[0].alignment_id.length > 0)) {\r\n        MachineStateHandlerWrapper({clickedWordInfo:[\"summary\", tkn_id]});\r\n    }\r\n  }\r\n\r\n  // for the \"REVISE HOVER\" state\r\n  const hoverHandlerWrapper = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === tkn_id && word.sent_id > CurrSentInd}).length !== 0)){\r\n      return\r\n    } else if ((summary_json.filter((word) => {return word.tkn_id === tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))) {\r\n      return\r\n    }\r\n    hoverHandler({inOrOut, curr_alignment_id, tkn_id, isSummary});\r\n  }\r\n\r\n  hoverHandlerWrapper.defaultProps = {\r\n    tkn_id: -1,\r\n    isSummary: false\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const getSummaryText = () => {\r\n\r\n    // when rebooting\r\n    if (summary_json.length === 0){\r\n      return\r\n    }\r\n\r\n    const max_sent_id = summary_json.map((word) =>{return word.sent_id}).reduce(function(a, b) {return Math.max(a, b)}, -Infinity);\r\n    const summary_per_sent_id = [...Array(max_sent_id+1).keys()].map((sent_id) => {return summary_json.filter((word) => {return word.sent_id===sent_id})})\r\n    return summary_per_sent_id.map((summary_words, index) => \r\n                                                      <div>\r\n                                                        <p  className={`${(index===CurrSentInd) ?  'bordered_sent': ''}`}>\r\n                                                          {summary_words.map((word_json, index) => (\r\n                                                            <SummaryWord key={index} word_json={word_json}  StateMachineState={StateMachineState} SummaryMouseClickHandlerWrapper={SummaryMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} SummaryOnMouseDownHandler={SummaryOnMouseDownHandler} SummaryOnMouseUpHandler={SummaryOnMouseUpHandler} setSummaryOnMouseDownActivated={setSummaryOnMouseDownActivated} summaryOnMouseDownActivated={summaryOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId}  ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/> \r\n                                                            ))}\r\n                                                        </p>\r\n                                                        <span className=\"br-class\"></span>\r\n                                                      </div>\r\n                                                      )\r\n  }\r\n\r\n\r\n\r\n  // reset clickings between states\r\n  useEffect(() => {\r\n    SetDocMouseDownStartID(\"-1\");\r\n    SetDocMouseclicked(false);\r\n    SetSummaryMouseDownStartID(\"-1\");\r\n    SetSummaryMouseclicked(false);\r\n  }, [StateMachineState]);\r\n\r\n  return (\r\n      <Container onKeyDown={(event) => {if (event.ctrlKey) {setCtrlButtonDown(true)}}}\r\n                 onKeyUp={() => {setCtrlButtonDown(false)}} \r\n                 tabIndex=\"0\"\r\n                 className='annotation-container'\r\n      >\r\n        <Row className='annotation-row'>\r\n          <Col>\r\n            <ResponsiveAppBar\r\n                  title={isGuidedAnnotation ? \"Guided Annotation\" : \"Annotation\"} \r\n                  StateMachineState = {StateMachineState} \r\n                  MachineStateHandlerWrapper={MachineStateHandlerWrapper}\r\n                  boldState={boldState}\r\n                  boldStateHandler={boldStateHandler}\r\n                  oldAlignmentState={oldAlignmentState}\r\n                  oldAlignmentStateHandler={oldAlignmentStateHandler}\r\n            />\r\n            {InfoMessage !== \"\" && (GuideAlert(InfoMessage))}\r\n          </Col>\r\n        </Row>\r\n\r\n        <Row className='annotation-row' id={`${(InfoMessage === \"\") ? 'doc-summary-row': ''}`}>\r\n          <Col md={ 8 }>\r\n            <Card border=\"secondary\" bg=\"light\"  id=\"doc-text\">\r\n                <Card.Header>Document</Card.Header>\r\n                <Card.Body>\r\n                  {doc_json.map((word_json, index) => (\r\n                      <DocWord key={index} word_json={word_json} doc_paragraph_breaks={doc_paragraph_breaks} StateMachineState={StateMachineState} DocMouseClickHandlerWrapper={DocMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} DocOnMouseDownHandler={DocOnMouseDownHandler} DocOnMouseUpHandler={DocOnMouseUpHandler} setDocOnMouseDownActivated={setDocOnMouseDownActivated} docOnMouseDownActivated={docOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId} ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/>\r\n                    ))};\r\n                </Card.Body>\r\n              </Card>\r\n          </Col>\r\n\r\n          <Col md={4}>\r\n            {/* <div id=\"summary-and-buttons\"> */}\r\n            <Row>\r\n              <Col>\r\n                <Card border=\"secondary\" bg=\"light\" id=\"summary-text\">\r\n                  <Card.Header>Summary</Card.Header>\r\n                  <Card.Body>\r\n                    {getSummaryText()}\r\n                    {/* {summary_json.map((word_json, index) => (\r\n                      <SummaryWord key={index} word_json={word_json}  StateMachineState={StateMachineState} SummaryMouseClickHandlerWrapper={SummaryMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} SummaryOnMouseDownHandler={SummaryOnMouseDownHandler} SummaryOnMouseUpHandler={SummaryOnMouseUpHandler} setSummaryOnMouseDownActivated={setSummaryOnMouseDownActivated} summaryOnMouseDownActivated={summaryOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId}  ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/> \r\n                    ))}; */}\r\n                  </Card.Body>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row className=\"justify-content-md-center\">\r\n                {[\"SUMMARY END\", \"SENTENCE END\", \"ANNOTATION\", \"SENTENCE START\"].includes(StateMachineState) && (\r\n                  <Col>\r\n                    <button type=\"button\" className=\"btn btn-dark btn-lg\" onClick={() => MachineStateHandlerWrapper({forceState:\"REVISE HOVER\"})}>REVISE</button>\r\n                  </Col>\r\n                )}\r\n\r\n                {StateMachineState === \"REVISE HOVER\" && (\r\n                  <Col>\r\n                    <button type=\"button\" className=\"btn btn-success btn-lg\" onClick={() => MachineStateHandlerWrapper({forceState:\"FINISH REVISION\"})}>FINISH</button>\r\n                  </Col>\r\n                )}\r\n\r\n              {StateMachineState === \"REVISE CLICKED\" && (\r\n                  <Col md={{span:4, offset:0}}>\r\n                    <button type=\"button\" className=\"btn btn-danger btn-lg\" onClick={() => MachineStateHandlerWrapper({forceState:\"REVISE HOVER\", isBackBtn:true })}>\r\n                    <ChevronLeft className=\"button-icon\"/>\r\n                    BACK\r\n                    </button>\r\n                  </Col>\r\n                )}\r\n\r\n              {![\"REVISE HOVER\", \"SUMMARY END\", \"SENTENCE END\", \"START\"].includes(StateMachineState) && (\r\n                  <Col md={{span:5, offset:3}}>\r\n                    <button type=\"button\" className=\"btn btn-primary btn-lg right-button\" onClick={MachineStateHandlerWrapper}>\r\n                      {nextButtonText()}\r\n                      <ChevronRight className=\"button-icon\"/>\r\n                    </button>\r\n                  </Col>\r\n              )}\r\n\r\n              {StateMachineState === \"START\"  && (\r\n                    <Col md={{span:3, offset:9}}>\r\n                      <button type=\"button\" className=\"btn btn-primary btn-lg right-button\" onClick={MachineStateHandlerWrapper}>\r\n                        {nextButtonText()}\r\n                      </button>\r\n                    </Col>\r\n                )}\r\n\r\n              {StateMachineState === \"SENTENCE END\"  && (\r\n                    <Col md={{span:7, offset:1}}>\r\n                      <button type=\"button\" className=\"btn btn-success btn-lg right-button\" onClick={MachineStateHandlerWrapper}>\r\n                        {nextButtonText()}\r\n                        {StateMachineState !== \"START\" && (<ChevronRight className=\"button-icon\"/>) }\r\n                      </button>\r\n                    </Col>\r\n                )}\r\n\r\n              {StateMachineState === \"SUMMARY END\" && (\r\n                <Col md={{span:5, offset:3}}>\r\n                  <button type=\"button\" className=\"btn btn-success btn-lg right-button\" onClick={SubmitHandler}>\r\n                    {nextButtonText()}\r\n                    {StateMachineState !== \"START\" && (<SendFill className=\"button-icon\"/>) }\r\n                  </button>\r\n                </Col>\r\n              )}\r\n\r\n\r\n            </Row>\r\n                {/* {StateMachineState === \"REVISE CLICKED\" && (\r\n                  // <Col md={{span:3, offset:9}}></Col>\r\n                  <Fab className='NextStateButton' id=\"REVISE-CLICKED-BACK-BTN\" color=\"secondary\" variant=\"extended\" onClick={() => MachineStateHandlerWrapper({forceState:\"REVISE HOVER\", isBackBtn:true })}>\r\n                    <ArrowBackIosTwoTone />\r\n                    BACK\r\n                  </Fab>\r\n                )} */}\r\n                {/* {![\"REVISE HOVER\", \"SUMMARY END\"].includes(StateMachineState) && (\r\n                  <Fab className='NextStateButton' id={nextButtonID()} color=\"success\" variant=\"extended\" onClick={MachineStateHandlerWrapper}>\r\n                    {nextButtonText()}\r\n                    {StateMachineState !== \"START\" && (<ArrowForwardIosTwoTone />) }\r\n                  </Fab>\r\n                )} */}\r\n                {/* {StateMachineState === \"SUMMARY END\" && (\r\n                  <Fab id=\"SubmitButton\" color=\"success\" variant=\"extended\" onClick={SubmitHandler}>\r\n                      {nextButtonText()}\r\n                      <SendIcon sx={{ margin: '10%' }}  />\r\n                  </Fab>\r\n                )} */}\r\n            {/* </div> */}\r\n          </Col>\r\n        </Row>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          {/* <Card  id=\"doc-text\" variant=\"outlined\" sx={{ backgroundColor:\"rgb(241, 238, 238)\" }}>\r\n            <CardHeader\r\n              title=\"Document\"\r\n            />\r\n            <CardContent>\r\n              <body>\r\n                {doc_json.map((word_json, index) => (\r\n                  <DocWord key={index} word_json={word_json} doc_paragraph_breaks={doc_paragraph_breaks} StateMachineState={StateMachineState} DocMouseClickHandlerWrapper={DocMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} DocOnMouseDownHandler={DocOnMouseDownHandler} DocOnMouseUpHandler={DocOnMouseUpHandler} setDocOnMouseDownActivated={setDocOnMouseDownActivated} docOnMouseDownActivated={docOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId} ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/>\r\n                ))};\r\n              </body>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card  id=\"summary-text\" variant=\"outlined\" sx={{ backgroundColor:\"rgb(241, 238, 238)\" }}>\r\n            <CardHeader\r\n              title=\"Summary\"\r\n            />\r\n            <CardContent>\r\n              <p>\r\n              {summary_json.map((word_json, index) => (\r\n                <SummaryWord key={index} word_json={word_json}  StateMachineState={StateMachineState} SummaryMouseClickHandlerWrapper={SummaryMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} SummaryOnMouseDownHandler={SummaryOnMouseDownHandler} SummaryOnMouseUpHandler={SummaryOnMouseUpHandler} setSummaryOnMouseDownActivated={setSummaryOnMouseDownActivated} summaryOnMouseDownActivated={summaryOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId}  ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/> \r\n              ))};\r\n              </p>\r\n            </CardContent>\r\n          </Card> */}\r\n          \r\n          \r\n          \r\n          \r\n{/*           \r\n          <div id=\"doc-text\">\r\n              <Typography variant=\"h4\" gutterBottom>\r\n                Document\r\n              </Typography>\r\n              <body>\r\n              {doc_json.map((word_json, index) => (\r\n                <DocWord key={index} word_json={word_json} doc_paragraph_breaks={doc_paragraph_breaks} StateMachineState={StateMachineState} DocMouseClickHandlerWrapper={DocMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} DocOnMouseDownHandler={DocOnMouseDownHandler} DocOnMouseUpHandler={DocOnMouseUpHandler} setDocOnMouseDownActivated={setDocOnMouseDownActivated} docOnMouseDownActivated={docOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId} ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/>\r\n              ))};\r\n              </body>\r\n          </div>\r\n          <div id=\"summary-text\">\r\n              <Typography variant=\"h4\" gutterBottom>\r\n                Summary\r\n              </Typography>\r\n              <p>\r\n              {summary_json.map((word_json, index) => (\r\n                <SummaryWord key={index} word_json={word_json}  StateMachineState={StateMachineState} SummaryMouseClickHandlerWrapper={SummaryMouseClickHandlerWrapper} hoverHandlerWrapper={hoverHandlerWrapper} SummaryOnMouseDownHandler={SummaryOnMouseDownHandler} SummaryOnMouseUpHandler={SummaryOnMouseUpHandler} setSummaryOnMouseDownActivated={setSummaryOnMouseDownActivated} summaryOnMouseDownActivated={summaryOnMouseDownActivated} setHoverActivatedId={setHoverActivatedId}  ctrlButtonDown={ctrlButtonDown} setHoverActivatedDocOrSummary={setHoverActivatedDocOrSummary}/> \r\n              ))};\r\n              </p>\r\n          </div> */}\r\n\r\n          {/* {StateMachineState === \"REVISE CLICKED\" && (\r\n            <Fab className='NextStateButton' id=\"REVISE-CLICKED-BACK-BTN\" color=\"secondary\" variant=\"extended\" onClick={() => MachineStateHandlerWrapper({forceState:\"REVISE HOVER\", isBackBtn:true })}>\r\n              <ArrowBackIosTwoTone />\r\n              BACK\r\n            </Fab>\r\n          )}\r\n          {![\"REVISE HOVER\", \"SUMMARY END\"].includes(StateMachineState) && (\r\n            <Fab className='NextStateButton' id={nextButtonID()} color=\"success\" variant=\"extended\" onClick={MachineStateHandlerWrapper}>\r\n              {nextButtonText()}\r\n              {StateMachineState !== \"START\" && (<ArrowForwardIosTwoTone />) }\r\n            </Fab>\r\n          )}\r\n          {StateMachineState === \"SUMMARY END\" && (\r\n            <Fab id=\"SubmitButton\" color=\"success\" variant=\"extended\" onClick={SubmitHandler}>\r\n                {nextButtonText()}\r\n                <SendIcon sx={{ margin: '10%' }}  />\r\n            </Fab>\r\n          )} */}\r\n      </Container>\r\n  )\r\n}\r\n\r\nexport default Annotation","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js",["149"],[],"import { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\n\r\nconst BackButton = ({ back_path }) => {\r\n    return (\r\n        <Button component={Link} to={back_path} startIcon={<ArrowBackIosNewIcon />}>\r\n              back\r\n        </Button>\r\n\r\n    )\r\n  }\r\n  \r\n  export default BackButton","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js",["150"],[],"import BackButton from './BackButton'\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\nimport start_window_img from '../data/Instructions_img/start.JPG'; // Tell webpack this JS file uses this image\r\nimport some_span_chosen_img from '../data/Instructions_img/some_span_chosen.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_img from '../data/Instructions_img/appbar.JPG'; // Tell webpack this JS file uses this image\r\nimport revise_hover_img from '../data/Instructions_img/revise_hover.png'; // Tell webpack this JS file uses this image\r\nimport revise_clicked_img from '../data/Instructions_img/revise_clicked.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_finish_revision_img from '../data/Instructions_img/appbar_finish_revision.JPG'; // Tell webpack this JS file uses this image\r\nimport submit_img from '../data/Instructions_img/submit.JPG'; // Tell webpack this JS file uses this image\r\n\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <>\r\n        <ResponsiveAppBar\r\n           title={\"Instructions\"}\r\n        />\r\n      <div>\r\n        <section  className=\"InstructionsBody\">\r\n          <h4>\r\n            In this task, you are presented with a document and its summary. \r\n            <br></br>\r\n            The summary was constructed by an expert summarizer who first highlighted important information in the document and then merged it in a coherent manner. \r\n            <br></br>\r\n            Your goal is to locate those spans the summarizer highlighted.\r\n            <br></br>\r\n            You will first be presented with the summary and document without any extra markings:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={start_window_img} alt=\"start\" />\r\n            <br></br>\r\n            We encourage you to skim through the summary so you are familiar with its content, before starting.\r\n            <br></br>\r\n            You will work sentence by sentence, where you will not be able to continue to the next sentence before \"highlighting\" all of the current sentence's words.\r\n            <br></br>\r\n            To help you focus, the sentence you need to work on will be in bold.\r\n            <br></br>\r\n            You goal is to choose alignments between the summary and the doc. To help you, when highlighting a span from the document,  all the words in the document who have identical or relating words to that span will be <text className=\"boldfaced-word\">boldfaced and increased:</text>\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={some_span_chosen_img} alt=\"some_span_chosen\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            If no span was chosen, all the words in the docoment who have identical or relating words in current sentence will be <text className=\"boldfaced-word\">boldfaced and increased</text>.\r\n            <br></br>\r\n            At any given time, you can adjust the level of bolding, using the slider at the top-right corner of the UI:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_img} alt=\"appbar\" />\r\n            <br></br>\r\n            with the following bolding options:\r\n            <ul>\r\n              <li >No bolding (leftmost)</li>\r\n              <li>Current span bolding (middle)</li>\r\n              <li>Current sentence bolding (rightmost)</li>\r\n            </ul>\r\n            <br></br>\r\n            You will work in iterations:\r\n            <ol>\r\n              <li>\r\n                Start by choosing a subspan of the summary sentence which contains at least one event (by highlighting it).\r\n                <br></br>\r\n                This will boldface all the words in the document identical or similar to those in the span.\r\n              </li>\r\n\r\n              <li>Then, highlight spans in the document aligning to the information in the span.</li>\r\n              <li>Before heading on to the next span, please make sure you covered all the span's information and only it. If needed, make adjustments to the highlightings.</li>\r\n            </ol>\r\n            When finishing all the summary document, wou would be able to continue to the next sentence.\r\n            You may follow these questions to help you decide what span to choose:\r\n            <ul>\r\n              <li>Is the information presented in the span missing something? Or is it self-informative?</li>\r\n              <li>Is the information presented in the span specific? Or is it too general?</li>\r\n            </ul>\r\n            For long sentences, we strongly advice against highlighting the full sentence all at once, as doing so could lead to missing small details.\r\n            <br></br>\r\n            Alternatively, if a sentence is short enough, aligning it all at once is acceptable.\r\n            <br></br>\r\n            When choosing a span, a general rule of thumb should be a span that when reading it, you manage to remember all the details in it.\r\n            <br></br>\r\n            For example, the sentence:\r\n          </h4>\r\n          \r\n          <h3>\r\n            Sixty Forest Service firefighters brought Michigan's four-day Hiawatha\r\n            <br></br> \r\n            National Forest fire under control after it burned 1100 acres of woodlands.\r\n          </h3>\r\n\r\n          <h4>\r\n            can be seperated like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought Michigan's four-day Hiawatha National Forest fire under control</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n\r\n            Or like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought ... fire under control</li>\r\n              <li>Michigan's four-day Hiawatha National Forest fire</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n            and shouldn't be handled all at once.\r\n            <br></br>\r\n            <b> Notice! Make sure that what you highlight in the document covers all the information in the summary and only it.</b>\r\n            <br></br>\r\n            After choosing and confirming alignments, they will be shown in light-gray color (in juxtaposition to currenly chosen alignments, which are in yellow).\r\n             At any given time, you can adjust how much of previously chosen alignments to see, using the slider adjacent to the bolding slider (see image above), with the following options:\r\n            <ul>\r\n              <li>No previous highlightings (leftmost)</li>\r\n              <li>Only Current sentence's previous highlightings (middle)</li>\r\n              <li>All previous highlightings (rightmost)</li>\r\n            </ul>\r\n            \r\n            In addition, you can also revise old highlightings, by clicking the \"REVISE\" button that is located on the right side of the app-bar (see image above). \r\n            <br></br>\r\n            When in \"Revise\" mode you can hover over old highlightings, and their alignments will show to help you choose:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_hover_img} alt=\"revise_hover\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            By clicking one of them, only the chosen alignment will stay, which you could then revise:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_clicked_img} alt=\"revise_clicked\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            When finishing revising, you will need to return to the main session to continue, by clicking the \"FINISH REVISION\" button at the top of the window:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_finish_revision_img} alt=\"appbar_finish_revision\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            Finally, after finishing the last summary sentence, you will be able to submit:\r\n            <img className=\"instruction_images\" src={submit_img} alt=\"submit\" />\r\n          </h4>\r\n        </section>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Instructions\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js",["151","152","153","154"],[],"import { Link } from 'react-router-dom';\r\nimport * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\n\r\n\r\nconst pages = {'Instructions': 'instructions', 'Guided Annotation': 'guidedAnnotation'}; \r\n\r\n\r\n\r\nconst StartPage = () => {\r\n  return (\r\n    <>\r\n      {/* <header className='GeneralPageHeader'>\r\n          <h2>Highlighting Extraction UI</h2>\r\n      </header> */}\r\n\r\n      <AppBar id=\"startPageAppBar\" position=\"static\">\r\n      <div>\r\n        <Container maxWidth=\"xl\">\r\n          <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ my: 2, flexGrow: 1, display: {xs: 'flex', md: 'none' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n          </Toolbar>\r\n        </Container>\r\n      </div>\r\n    </AppBar>\r\n\r\n    <div className=\"jumbotron text-center StartPageBody\" /*className='StartPageBody'*/>\r\n        <div className='StartPageText'>\r\n          <p id=\"StartPageTitle\">\r\n            Welcome to\r\n            <br></br>\r\n            the Highlight Extraction UI\r\n          </p>\r\n          <p id=\"StartPageContent\">Before starting annotating, please read the Instructions first and practice using the Guided Annotation option.</p>\r\n\r\n          <div id=\"ButtonGroupBox\">\r\n            {/* <ButtonGroup> */}\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"primary\" component={Link} to={'/instructions'} >Instructions</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"secondary\" component={Link} to={'/guidedAnnotation'}>Guided<br></br>Annotation</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"success\" component={Link} to={'/annotation'}>Annotation</Button>\r\n            {/* </ButtonGroup> */}\r\n          </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StartPage","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js",["155"],[],"import Typography from '@mui/material/Typography';\r\n\r\nconst DocWord = ({ word_json, doc_paragraph_breaks, StateMachineState, DocMouseClickHandlerWrapper, hoverHandlerWrapper, DocOnMouseDownHandler, DocOnMouseUpHandler, setDocOnMouseDownActivated, docOnMouseDownActivated, setHoverActivatedId, ctrlButtonDown, setHoverActivatedDocOrSummary }) => {\r\n    // const XOR = (a,b) => {\r\n    //   return ( ( a && !b ) || ( !a && b ) )\r\n    // }\r\n\r\n    // const is_span_highlighted = () => {\r\n    //   if (ctrlButtonDown) {\r\n    //     return word_json.span_highlighted && !word_json.span_alignment_hover\r\n    //   } \r\n    //   else {\r\n    //     return word_json.span_highlighted\r\n    //   }\r\n    // }\r\n\r\n    const show_word = () => {\r\n      if (word_json.word !== \"\\n\"){\r\n        return word_json.word\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n  \r\n    // the \"&nbsp;\" is to add space after word\r\n    return (\r\n      <div>\r\n        {/* {(word_json.word !== \"\\n\") && (\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted) ? 'old-aligned-word': ''}\r\n                        ${word_json.boldfaced ? 'boldfaced-word': 'normal-sized-word'}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\") ? 'cursor-span' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        ${(word_json.red_color) ? 'red-color-word': 'text-muted'}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"0\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {word_json.word}\r\n              </nobr>&nbsp;\r\n          </div>\r\n        )}\r\n\r\n        {(word_json.word === \"\\n\") && (\r\n          <span className=\"br-class\"></span>\r\n        )} */}\r\n\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted) ? 'old-aligned-word': ''}\r\n                        ${(word_json.red_color && !docOnMouseDownActivated) ? 'red-color-word': ''}\r\n                        ${(word_json.boldfaced && !word_json.red_color) ? 'boldfaced-word': ''}\r\n                        ${(!word_json.boldfaced && !word_json.red_color) ? 'text-muted': ''}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\") ? 'cursor-span-doc' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"1\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => {setHoverActivatedId(-1); hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {show_word()}\r\n              </nobr>&nbsp;\r\n          </div>\r\n\r\n          {(doc_paragraph_breaks.includes(word_json.tkn_id)) && (\r\n          <span className=\"br-class\"></span>\r\n        )}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default DocWord","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Header.js",[],[],["156","157"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ProgressButton.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js",["158","159","160","161","162","163","164","165"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js",["166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204"],[],"import { useState, useEffect } from 'react'\r\n\r\nconst DocMouseClickHandler = ({tkn_id, toggleDocSpanHighlight, DocMouseclickStartID, DocMouseclicked, SetDocMouseDownStartID, SetDocMouseclicked}) => {\r\n    const update_mouse_tkn = DocMouseclicked ? \"-1\" : tkn_id;\r\n    if (DocMouseclicked){\r\n      const min_ID =  (DocMouseclickStartID > tkn_id) ? tkn_id : DocMouseclickStartID;\r\n      const max_ID =  (DocMouseclickStartID > tkn_id) ? DocMouseclickStartID : tkn_id;\r\n      let chosen_IDs = [];\r\n      for(let i=min_ID; i<=max_ID; i++){\r\n        chosen_IDs.push(i);\r\n      }\r\n      toggleDocSpanHighlight(chosen_IDs);     \r\n    }\r\n    SetDocMouseDownStartID(update_mouse_tkn);\r\n    SetDocMouseclicked(!DocMouseclicked);\r\n  }\r\n\r\n\r\n  const SummaryHighlightHandler = ({summary_json, tkn_id, toggleSummarySpanHighlight, SummaryMouseclickStartID, SummaryMouseclicked, SetSummaryMouseDownStartID, SetSummaryMouseclicked}) => {  \r\n    const update_mouse_tkn = SummaryMouseclicked ? \"-1\" : tkn_id;\r\n    if (SummaryMouseclicked){\r\n      const min_ID =  (SummaryMouseclickStartID > tkn_id) ? tkn_id : SummaryMouseclickStartID;\r\n      const max_ID =  (SummaryMouseclickStartID > tkn_id) ? SummaryMouseclickStartID : tkn_id;\r\n      let chosen_IDs = [];\r\n      for(let i=min_ID; i<=max_ID; i++){\r\n        chosen_IDs.push(i);\r\n      }\r\n      toggleSummarySpanHighlight(chosen_IDs);\r\n    }\r\n    SetSummaryMouseDownStartID(update_mouse_tkn);\r\n    SetSummaryMouseclicked(!SummaryMouseclicked);\r\n  }\r\n\r\n\r\n  const allSentHighlighted = (summary_json, CurrSentInd, isPunct) => {\r\n    console.log(summary_json.filter((word) => { return (word.sent_id === CurrSentInd) && (!word.highlighted) && (!isPunct(word.word))}));\r\n    return (summary_json.filter((word) => { return (word.sent_id === CurrSentInd) && (!word.highlighted) && (!isPunct(word.word))}).length === 0);\r\n  }\r\n\r\n  const allSummaryHighlighted = (summary_json, CurrSentInd, isPunct) => {\r\n    const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n    return (allSentHighlighted(summary_json, CurrSentInd, isPunct) && isLastSent)\r\n  }\r\n\r\n\r\n\r\n  const MachineStateHandler = (summary_json,\r\n                                 StateMachineState, SetStateMachineState,\r\n                                 SetInfoMessage, handleErrorOpen, isPunct,\r\n                                 CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                                 AlignmentCount, SetAlignmentCount,\r\n                                 approveHighlightHandler,\r\n                                 clickedWordInfo, forceState, \r\n                                 StartReviseStateHandler, ExitReviseHandler,\r\n                                 ReviseChooseAlignHandler,\r\n                                 isBackBtn,\r\n                                 setPrevSummaryJsonRevise, setPrevDocJsonRevise) => {\r\n\r\n\r\n\r\n    // forceState: \"SENTENCE END\"\r\n    if (forceState === \"SENTENCE END\"){\r\n      console.log(`forceState: \\\"SENTENCE END\\\"`);\r\n      SetStateMachineState(\"SENTENCE END\");\r\n      SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"APPROVE ALIGNMENT & NEXT SENTENCE\\\".\");\r\n    }\r\n\r\n    // forceState: \"SUMMARY END\"\r\n    else if (forceState === \"SUMMARY END\"){\r\n      console.log(`forceState: \\\"SUMMARY END\\\"`);\r\n      SetStateMachineState(\"SUMMARY END\");\r\n      SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n    }\r\n\r\n    // forceState: \"ANNOTATION\"\r\n    else if (forceState === \"ANNOTATION\"){\r\n      console.log(`forceState: \\\"ANNOTATION\\\"`);\r\n      SetStateMachineState(\"ANNOTATION\");\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n    }\r\n\r\n    // forceState: \"REVISE HOVER\"\r\n    else if (forceState === \"REVISE HOVER\"){\r\n      StartReviseStateHandler(isBackBtn);\r\n      console.log(`forceState: \\\"REVISE HOVER\\\"`);\r\n      SetStateMachineState(\"REVISE HOVER\");\r\n      SetInfoMessage(\"Choose alignment to revise.\");\r\n    }\r\n\r\n    // forceState: \"FINISH REVISION\" --> namely go back to state before revision with all-highlighted updated\r\n    else if (forceState === \"FINISH REVISION\"){\r\n      const prev_state = ExitReviseHandler();\r\n      if ([\"ANNOTATION\", \"SENTENCE START\".includes(prev_state)]) {\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n      } else if (prev_state === \"SENTENCE END\"){\r\n        SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"APPROVE ALIGNMENT & NEXT SENTENCE\\\".\");\r\n      } else if (prev_state === \"SUMMARY END\") {\r\n        SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n      } else{\r\n        alert(`Coming back from Revision to an unsupported state... state is ${prev_state}`);\r\n      }\r\n    }\r\n\r\n    // \"START\" state --> \"ANNOTATION\" state\r\n    else if (StateMachineState === \"START\"){\r\n        console.log(`Old state: \\\"START\\\"; New state: \\\"ANNOTATION\\\" with SentInd=${CurrSentInd+1}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        SetSummaryShadow(CurrSentInd+1);\r\n        SetCurrSentInd(CurrSentInd+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n    }\r\n    \r\n    // \"ANNOTATION\" state --> \"ANNOTATION\" with next alignment\r\n    else if (StateMachineState === \"ANNOTATION\"){\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      console.log(`Old state: \\\"ANNOTATION\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n    }\r\n\r\n    // \"SENTENCE END\" state --> \"SENTENCE START\" \r\n    else if (StateMachineState === \"SENTENCE END\"){\r\n      // adding last sentence alignment\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n\r\n      // moving to next sentence\r\n      // update of summary sentence shadow is done in App.js in a designated useEffect\r\n      console.log(`Old state: \\\"SENTENCE END\\\"; New state: \\\"SENTENCE START\\\" with SentInd=${CurrSentInd+1}.`);\r\n      SetStateMachineState(\"SENTENCE START\");\r\n      SetCurrSentInd(CurrSentInd+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n    }\r\n      // \"SENTENCE START\" state --> \"ANNOTATION\" with next alignment \r\n      else if (StateMachineState === \"SENTENCE START\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"SENTENCE START\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"APPROVE ALIGNMENT\\\".\");\r\n  \r\n      }\r\n      // \"SUMMARY END\" state --> \"SUBMIT\" state \r\n      else if (StateMachineState === \"SUMMARY END\"){\r\n        console.log(`Old state: \\\"SUMMARY END\\\"; New state: \\\"SUBMIT\\\"`);\r\n        SetStateMachineState(\"SUBMIT\");\r\n        SetInfoMessage(\"\");\r\n      }\r\n\r\n      // \"REVISE HOVER\" state --> \"REVISE CLICKED\" state \r\n      else if (StateMachineState === \"REVISE HOVER\"){\r\n        console.log(`Old state: \\\"REVISE HOVER\\\"; New state: \\\"REVISE CLICKED\\\"`);\r\n        ReviseChooseAlignHandler(clickedWordInfo);\r\n        SetStateMachineState(\"REVISE CLICKED\");\r\n        SetInfoMessage(\"\");\r\n      }\r\n\r\n      // \"REVISE CLICKED\" state --> \"REVISE HOVER\" state \r\n      else if (StateMachineState === \"REVISE CLICKED\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"REVISE CLICKED\\\"; New state: \\\"REVISE HOVER\\\"`);\r\n        SetStateMachineState(\"REVISE HOVER\");\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Choose alignment to revise.\");\r\n        setPrevSummaryJsonRevise([]);\r\n        setPrevDocJsonRevise([]);\r\n      }\r\n  }\r\n\r\n  MachineStateHandler.defaultProps = {\r\n    forceState: '',\r\n    isBackBtn: false\r\n  }\r\n  \r\n\r\n\r\n  export { MachineStateHandler, DocMouseClickHandler, SummaryHighlightHandler }\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js",[],[],{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":7,"column":8,"nodeType":"211","messageId":"212","endLine":7,"endColumn":17},{"ruleId":"209","severity":1,"message":"213","line":9,"column":8,"nodeType":"211","messageId":"212","endLine":9,"endColumn":24},{"ruleId":"209","severity":1,"message":"214","line":14,"column":8,"nodeType":"211","messageId":"212","endLine":14,"endColumn":9},{"ruleId":"209","severity":1,"message":"215","line":259,"column":11,"nodeType":"211","messageId":"212","endLine":259,"endColumn":26},{"ruleId":"216","severity":1,"message":"217","line":268,"column":17,"nodeType":"218","messageId":"219","endLine":268,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":271,"column":24,"nodeType":"218","messageId":"219","endLine":271,"endColumn":26},{"ruleId":"209","severity":1,"message":"220","line":274,"column":13,"nodeType":"211","messageId":"212","endLine":274,"endColumn":19},{"ruleId":"209","severity":1,"message":"220","line":279,"column":13,"nodeType":"211","messageId":"212","endLine":279,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":305,"column":17,"nodeType":"218","messageId":"219","endLine":305,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":309,"column":24,"nodeType":"218","messageId":"219","endLine":309,"endColumn":26},{"ruleId":"209","severity":1,"message":"215","line":541,"column":11,"nodeType":"211","messageId":"212","endLine":541,"endColumn":26},{"ruleId":"216","severity":1,"message":"217","line":550,"column":17,"nodeType":"218","messageId":"219","endLine":550,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":553,"column":24,"nodeType":"218","messageId":"219","endLine":553,"endColumn":26},{"ruleId":"209","severity":1,"message":"220","line":556,"column":13,"nodeType":"211","messageId":"212","endLine":556,"endColumn":19},{"ruleId":"209","severity":1,"message":"220","line":561,"column":13,"nodeType":"211","messageId":"212","endLine":561,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":587,"column":17,"nodeType":"218","messageId":"219","endLine":587,"endColumn":19},{"ruleId":"216","severity":1,"message":"217","line":591,"column":24,"nodeType":"218","messageId":"219","endLine":591,"endColumn":26},{"ruleId":"221","severity":1,"message":"222","line":706,"column":6,"nodeType":"223","endLine":706,"endColumn":22,"suggestions":"224"},{"ruleId":"221","severity":1,"message":"225","line":712,"column":6,"nodeType":"223","endLine":712,"endColumn":21,"suggestions":"226"},{"ruleId":"221","severity":1,"message":"227","line":724,"column":6,"nodeType":"223","endLine":724,"endColumn":43,"suggestions":"228"},{"ruleId":"221","severity":1,"message":"229","line":738,"column":7,"nodeType":"223","endLine":738,"endColumn":46,"suggestions":"230"},{"ruleId":"221","severity":1,"message":"231","line":797,"column":7,"nodeType":"223","endLine":797,"endColumn":85,"suggestions":"232"},{"ruleId":"221","severity":1,"message":"233","line":844,"column":6,"nodeType":"223","endLine":844,"endColumn":20,"suggestions":"234"},{"ruleId":"221","severity":1,"message":"235","line":852,"column":6,"nodeType":"223","endLine":852,"endColumn":19,"suggestions":"236"},{"ruleId":"221","severity":1,"message":"237","line":865,"column":6,"nodeType":"223","endLine":865,"endColumn":39,"suggestions":"238"},{"ruleId":"221","severity":1,"message":"239","line":880,"column":8,"nodeType":"223","endLine":880,"endColumn":43,"suggestions":"240"},{"ruleId":"221","severity":1,"message":"241","line":942,"column":8,"nodeType":"223","endLine":942,"endColumn":80,"suggestions":"242"},{"ruleId":"205","replacedBy":"243"},{"ruleId":"207","replacedBy":"244"},{"ruleId":"209","severity":1,"message":"245","line":5,"column":10,"nodeType":"211","messageId":"212","endLine":5,"endColumn":29},{"ruleId":"209","severity":1,"message":"246","line":5,"column":31,"nodeType":"211","messageId":"212","endLine":5,"endColumn":51},{"ruleId":"209","severity":1,"message":"247","line":5,"column":53,"nodeType":"211","messageId":"212","endLine":5,"endColumn":76},{"ruleId":"209","severity":1,"message":"248","line":6,"column":8,"nodeType":"211","messageId":"212","endLine":6,"endColumn":16},{"ruleId":"209","severity":1,"message":"249","line":8,"column":10,"nodeType":"211","messageId":"212","endLine":8,"endColumn":29},{"ruleId":"209","severity":1,"message":"250","line":8,"column":31,"nodeType":"211","messageId":"212","endLine":8,"endColumn":53},{"ruleId":"209","severity":1,"message":"251","line":9,"column":8,"nodeType":"211","messageId":"212","endLine":9,"endColumn":16},{"ruleId":"209","severity":1,"message":"252","line":10,"column":8,"nodeType":"211","messageId":"212","endLine":10,"endColumn":18},{"ruleId":"209","severity":1,"message":"253","line":12,"column":8,"nodeType":"211","messageId":"212","endLine":12,"endColumn":11},{"ruleId":"209","severity":1,"message":"254","line":16,"column":8,"nodeType":"211","messageId":"212","endLine":16,"endColumn":18},{"ruleId":"209","severity":1,"message":"255","line":17,"column":8,"nodeType":"211","messageId":"212","endLine":17,"endColumn":19},{"ruleId":"209","severity":1,"message":"256","line":18,"column":8,"nodeType":"211","messageId":"212","endLine":18,"endColumn":19},{"ruleId":"209","severity":1,"message":"257","line":19,"column":8,"nodeType":"211","messageId":"212","endLine":19,"endColumn":14},{"ruleId":"209","severity":1,"message":"258","line":20,"column":8,"nodeType":"211","messageId":"212","endLine":20,"endColumn":11},{"ruleId":"209","severity":1,"message":"259","line":21,"column":10,"nodeType":"211","messageId":"212","endLine":21,"endColumn":21},{"ruleId":"209","severity":1,"message":"260","line":54,"column":10,"nodeType":"211","messageId":"212","endLine":54,"endColumn":30},{"ruleId":"209","severity":1,"message":"261","line":55,"column":10,"nodeType":"211","messageId":"212","endLine":55,"endColumn":25},{"ruleId":"209","severity":1,"message":"262","line":56,"column":10,"nodeType":"211","messageId":"212","endLine":56,"endColumn":34},{"ruleId":"209","severity":1,"message":"263","line":57,"column":10,"nodeType":"211","messageId":"212","endLine":57,"endColumn":29},{"ruleId":"209","severity":1,"message":"264","line":73,"column":9,"nodeType":"211","messageId":"212","endLine":73,"endColumn":21},{"ruleId":"216","severity":1,"message":"217","line":150,"column":27,"nodeType":"218","messageId":"219","endLine":150,"endColumn":29},{"ruleId":"209","severity":1,"message":"265","line":4,"column":8,"nodeType":"211","messageId":"212","endLine":4,"endColumn":24},{"ruleId":"209","severity":1,"message":"266","line":1,"column":8,"nodeType":"211","messageId":"212","endLine":1,"endColumn":18},{"ruleId":"209","severity":1,"message":"258","line":7,"column":8,"nodeType":"211","messageId":"212","endLine":7,"endColumn":11},{"ruleId":"209","severity":1,"message":"267","line":9,"column":8,"nodeType":"211","messageId":"212","endLine":9,"endColumn":19},{"ruleId":"209","severity":1,"message":"268","line":10,"column":10,"nodeType":"211","messageId":"212","endLine":10,"endColumn":17},{"ruleId":"209","severity":1,"message":"269","line":14,"column":7,"nodeType":"211","messageId":"212","endLine":14,"endColumn":12},{"ruleId":"209","severity":1,"message":"252","line":1,"column":8,"nodeType":"211","messageId":"212","endLine":1,"endColumn":18},{"ruleId":"205","replacedBy":"270"},{"ruleId":"207","replacedBy":"271"},{"ruleId":"209","severity":1,"message":"272","line":2,"column":8,"nodeType":"211","messageId":"212","endLine":2,"endColumn":14},{"ruleId":"209","severity":1,"message":"258","line":3,"column":8,"nodeType":"211","messageId":"212","endLine":3,"endColumn":11},{"ruleId":"209","severity":1,"message":"273","line":4,"column":8,"nodeType":"211","messageId":"212","endLine":4,"endColumn":15},{"ruleId":"209","severity":1,"message":"257","line":7,"column":8,"nodeType":"211","messageId":"212","endLine":7,"endColumn":14},{"ruleId":"209","severity":1,"message":"250","line":9,"column":10,"nodeType":"211","messageId":"212","endLine":9,"endColumn":32},{"ruleId":"209","severity":1,"message":"274","line":10,"column":8,"nodeType":"211","messageId":"212","endLine":10,"endColumn":14},{"ruleId":"209","severity":1,"message":"275","line":12,"column":10,"nodeType":"211","messageId":"212","endLine":12,"endColumn":17},{"ruleId":"209","severity":1,"message":"276","line":13,"column":10,"nodeType":"211","messageId":"212","endLine":13,"endColumn":16},{"ruleId":"209","severity":1,"message":"277","line":1,"column":10,"nodeType":"211","messageId":"212","endLine":1,"endColumn":18},{"ruleId":"209","severity":1,"message":"278","line":1,"column":20,"nodeType":"211","messageId":"212","endLine":1,"endColumn":29},{"ruleId":"209","severity":1,"message":"279","line":40,"column":9,"nodeType":"211","messageId":"212","endLine":40,"endColumn":30},{"ruleId":"280","severity":1,"message":"281","line":63,"column":32,"nodeType":"282","messageId":"283","endLine":63,"endColumn":33,"suggestions":"284"},{"ruleId":"280","severity":1,"message":"281","line":63,"column":46,"nodeType":"282","messageId":"283","endLine":63,"endColumn":47,"suggestions":"285"},{"ruleId":"280","severity":1,"message":"281","line":70,"column":32,"nodeType":"282","messageId":"283","endLine":70,"endColumn":33,"suggestions":"286"},{"ruleId":"280","severity":1,"message":"281","line":70,"column":45,"nodeType":"282","messageId":"283","endLine":70,"endColumn":46,"suggestions":"287"},{"ruleId":"280","severity":1,"message":"281","line":77,"column":32,"nodeType":"282","messageId":"283","endLine":77,"endColumn":33,"suggestions":"288"},{"ruleId":"280","severity":1,"message":"281","line":77,"column":44,"nodeType":"282","messageId":"283","endLine":77,"endColumn":45,"suggestions":"289"},{"ruleId":"280","severity":1,"message":"281","line":85,"column":32,"nodeType":"282","messageId":"283","endLine":85,"endColumn":33,"suggestions":"290"},{"ruleId":"280","severity":1,"message":"281","line":85,"column":46,"nodeType":"282","messageId":"283","endLine":85,"endColumn":47,"suggestions":"291"},{"ruleId":"280","severity":1,"message":"281","line":106,"column":33,"nodeType":"282","messageId":"283","endLine":106,"endColumn":34,"suggestions":"292"},{"ruleId":"280","severity":1,"message":"281","line":106,"column":40,"nodeType":"282","messageId":"283","endLine":106,"endColumn":41,"suggestions":"293"},{"ruleId":"280","severity":1,"message":"281","line":106,"column":55,"nodeType":"282","messageId":"283","endLine":106,"endColumn":56,"suggestions":"294"},{"ruleId":"280","severity":1,"message":"281","line":106,"column":67,"nodeType":"282","messageId":"283","endLine":106,"endColumn":68,"suggestions":"295"},{"ruleId":"280","severity":1,"message":"281","line":116,"column":31,"nodeType":"282","messageId":"283","endLine":116,"endColumn":32,"suggestions":"296"},{"ruleId":"280","severity":1,"message":"281","line":116,"column":43,"nodeType":"282","messageId":"283","endLine":116,"endColumn":44,"suggestions":"297"},{"ruleId":"280","severity":1,"message":"281","line":116,"column":58,"nodeType":"282","messageId":"283","endLine":116,"endColumn":59,"suggestions":"298"},{"ruleId":"280","severity":1,"message":"281","line":116,"column":70,"nodeType":"282","messageId":"283","endLine":116,"endColumn":71,"suggestions":"299"},{"ruleId":"280","severity":1,"message":"281","line":131,"column":31,"nodeType":"282","messageId":"283","endLine":131,"endColumn":32,"suggestions":"300"},{"ruleId":"280","severity":1,"message":"281","line":131,"column":45,"nodeType":"282","messageId":"283","endLine":131,"endColumn":46,"suggestions":"301"},{"ruleId":"280","severity":1,"message":"281","line":131,"column":60,"nodeType":"282","messageId":"283","endLine":131,"endColumn":61,"suggestions":"302"},{"ruleId":"280","severity":1,"message":"281","line":131,"column":76,"nodeType":"282","messageId":"283","endLine":131,"endColumn":77,"suggestions":"303"},{"ruleId":"280","severity":1,"message":"281","line":139,"column":33,"nodeType":"282","messageId":"283","endLine":139,"endColumn":34,"suggestions":"304"},{"ruleId":"280","severity":1,"message":"281","line":139,"column":49,"nodeType":"282","messageId":"283","endLine":139,"endColumn":50,"suggestions":"305"},{"ruleId":"280","severity":1,"message":"281","line":139,"column":64,"nodeType":"282","messageId":"283","endLine":139,"endColumn":65,"suggestions":"306"},{"ruleId":"280","severity":1,"message":"281","line":139,"column":76,"nodeType":"282","messageId":"283","endLine":139,"endColumn":77,"suggestions":"307"},{"ruleId":"280","severity":1,"message":"281","line":148,"column":33,"nodeType":"282","messageId":"283","endLine":148,"endColumn":34,"suggestions":"308"},{"ruleId":"280","severity":1,"message":"281","line":148,"column":46,"nodeType":"282","messageId":"283","endLine":148,"endColumn":47,"suggestions":"309"},{"ruleId":"280","severity":1,"message":"281","line":148,"column":61,"nodeType":"282","messageId":"283","endLine":148,"endColumn":62,"suggestions":"310"},{"ruleId":"280","severity":1,"message":"281","line":148,"column":69,"nodeType":"282","messageId":"283","endLine":148,"endColumn":70,"suggestions":"311"},{"ruleId":"280","severity":1,"message":"281","line":155,"column":33,"nodeType":"282","messageId":"283","endLine":155,"endColumn":34,"suggestions":"312"},{"ruleId":"280","severity":1,"message":"281","line":155,"column":47,"nodeType":"282","messageId":"283","endLine":155,"endColumn":48,"suggestions":"313"},{"ruleId":"280","severity":1,"message":"281","line":155,"column":62,"nodeType":"282","messageId":"283","endLine":155,"endColumn":63,"suggestions":"314"},{"ruleId":"280","severity":1,"message":"281","line":155,"column":78,"nodeType":"282","messageId":"283","endLine":155,"endColumn":79,"suggestions":"315"},{"ruleId":"280","severity":1,"message":"281","line":164,"column":33,"nodeType":"282","messageId":"283","endLine":164,"endColumn":34,"suggestions":"316"},{"ruleId":"280","severity":1,"message":"281","line":164,"column":49,"nodeType":"282","messageId":"283","endLine":164,"endColumn":50,"suggestions":"317"},{"ruleId":"280","severity":1,"message":"281","line":164,"column":64,"nodeType":"282","messageId":"283","endLine":164,"endColumn":65,"suggestions":"318"},{"ruleId":"280","severity":1,"message":"281","line":164,"column":78,"nodeType":"282","messageId":"283","endLine":164,"endColumn":79,"suggestions":"319"},"no-native-reassign",["320"],"no-negated-in-lhs",["321"],"no-unused-vars","'StartPage' is defined but never used.","Identifier","unusedVar","'GuidedAnnotation' is defined but never used.","'_' is defined but never used.","'which_match_mtx' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isSpan' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'g_CurrSentInd', 'g_MachineStateHandlerWrapper', and 'g_StateMachineState'. Either include them or remove the dependency array.","ArrayExpression",["322"],"React Hook useEffect has a missing dependency: 'g_SetSummaryShadowAndUpdateHighlights'. Either include it or remove the dependency array.",["323"],"React Hook useEffect has missing dependencies: 'g_boldStateHandler' and 'g_sliderBoldStateActivated'. Either include them or remove the dependency array.",["324"],"React Hook useEffect has a missing dependency: 'g_oldAlignmentStateHandler'. Either include it or remove the dependency array.",["325"],"React Hook useEffect has missing dependencies: 'g_DocOnMouseDownID', 'g_StateMachineState', 'g_SummaryOnMouseDownID', 'g_checkIfLemmasMatch', 'g_doc_json', 'g_hoverActivatedDocOrSummary', 'g_isRedLettered', and 'g_summary_json'. Either include them or remove the dependency array. You can also do a functional update 'g_setDocJson(g => ...)' if you only need 'g_doc_json' in the 'g_setDocJson' call.",["326"],"React Hook useEffect has missing dependencies: 'CurrSentInd', 'MachineStateHandlerWrapper', and 'StateMachineState'. Either include them or remove the dependency array.",["327"],"React Hook useEffect has a missing dependency: 'SetSummaryShadowAndUpdateHighlights'. Either include it or remove the dependency array.",["328"],"React Hook useEffect has missing dependencies: 'boldStateHandler' and 'sliderBoldStateActivated'. Either include them or remove the dependency array.",["329"],"React Hook useEffect has a missing dependency: 'oldAlignmentStateHandler'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has missing dependencies: 'DocOnMouseDownID', 'StateMachineState', 'SummaryOnMouseDownID', 'checkIfLemmasMatch', 'doc_json', 'hoverActivatedDocOrSummary', 'isRedLettered', and 'summary_json'. Either include them or remove the dependency array. You can also do a functional update 'setDocJson(d => ...)' if you only need 'doc_json' in the 'setDocJson' call.",["331"],["320"],["321"],"'MachineStateHandler' is defined but never used.","'DocMouseClickHandler' is defined but never used.","'SummaryHighlightHandler' is defined but never used.","'MuiAlert' is defined but never used.","'ArrowBackIosTwoTone' is defined but never used.","'ArrowForwardIosTwoTone' is defined but never used.","'SendIcon' is defined but never used.","'Typography' is defined but never used.","'Fab' is defined but never used.","'CardHeader' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'borderColor' is defined but never used.","'DocMouseclickStartID' is assigned a value but never used.","'DocMouseclicked' is assigned a value but never used.","'SummaryMouseclickStartID' is assigned a value but never used.","'SummaryMouseclicked' is assigned a value but never used.","'nextButtonID' is assigned a value but never used.","'ResponsiveAppBar' is defined but never used.","'BackButton' is defined but never used.","'ButtonGroup' is defined but never used.","'spacing' is defined but never used.","'pages' is assigned a value but never used.",["320"],["321"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Slider' is defined but never used.","'padding' is defined but never used.","'styled' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'allSummaryHighlighted' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["332","333"],["334","335"],["336","337"],["338","339"],["340","341"],["342","343"],["344","345"],["346","347"],["348","349"],["350","351"],["352","353"],["354","355"],["356","357"],["358","359"],["360","361"],["362","363"],["364","365"],["366","367"],["368","369"],["370","371"],["372","373"],["374","375"],["376","377"],["378","379"],["380","381"],["382","383"],["384","385"],["386","387"],["388","389"],["390","391"],["392","393"],["394","395"],["396","397"],["398","399"],["400","401"],["402","403"],"no-global-assign","no-unsafe-negation",{"desc":"404","fix":"405"},{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"messageId":"424","fix":"425","desc":"426"},{"messageId":"427","fix":"428","desc":"429"},{"messageId":"424","fix":"430","desc":"426"},{"messageId":"427","fix":"431","desc":"429"},{"messageId":"424","fix":"432","desc":"426"},{"messageId":"427","fix":"433","desc":"429"},{"messageId":"424","fix":"434","desc":"426"},{"messageId":"427","fix":"435","desc":"429"},{"messageId":"424","fix":"436","desc":"426"},{"messageId":"427","fix":"437","desc":"429"},{"messageId":"424","fix":"438","desc":"426"},{"messageId":"427","fix":"439","desc":"429"},{"messageId":"424","fix":"440","desc":"426"},{"messageId":"427","fix":"441","desc":"429"},{"messageId":"424","fix":"442","desc":"426"},{"messageId":"427","fix":"443","desc":"429"},{"messageId":"424","fix":"444","desc":"426"},{"messageId":"427","fix":"445","desc":"429"},{"messageId":"424","fix":"446","desc":"426"},{"messageId":"427","fix":"447","desc":"429"},{"messageId":"424","fix":"448","desc":"426"},{"messageId":"427","fix":"449","desc":"429"},{"messageId":"424","fix":"450","desc":"426"},{"messageId":"427","fix":"451","desc":"429"},{"messageId":"424","fix":"452","desc":"426"},{"messageId":"427","fix":"453","desc":"429"},{"messageId":"424","fix":"454","desc":"426"},{"messageId":"427","fix":"455","desc":"429"},{"messageId":"424","fix":"456","desc":"426"},{"messageId":"427","fix":"457","desc":"429"},{"messageId":"424","fix":"458","desc":"426"},{"messageId":"427","fix":"459","desc":"429"},{"messageId":"424","fix":"460","desc":"426"},{"messageId":"427","fix":"461","desc":"429"},{"messageId":"424","fix":"462","desc":"426"},{"messageId":"427","fix":"463","desc":"429"},{"messageId":"424","fix":"464","desc":"426"},{"messageId":"427","fix":"465","desc":"429"},{"messageId":"424","fix":"466","desc":"426"},{"messageId":"427","fix":"467","desc":"429"},{"messageId":"424","fix":"468","desc":"426"},{"messageId":"427","fix":"469","desc":"429"},{"messageId":"424","fix":"470","desc":"426"},{"messageId":"427","fix":"471","desc":"429"},{"messageId":"424","fix":"472","desc":"426"},{"messageId":"427","fix":"473","desc":"429"},{"messageId":"424","fix":"474","desc":"426"},{"messageId":"427","fix":"475","desc":"429"},{"messageId":"424","fix":"476","desc":"426"},{"messageId":"427","fix":"477","desc":"429"},{"messageId":"424","fix":"478","desc":"426"},{"messageId":"427","fix":"479","desc":"429"},{"messageId":"424","fix":"480","desc":"426"},{"messageId":"427","fix":"481","desc":"429"},{"messageId":"424","fix":"482","desc":"426"},{"messageId":"427","fix":"483","desc":"429"},{"messageId":"424","fix":"484","desc":"426"},{"messageId":"427","fix":"485","desc":"429"},{"messageId":"424","fix":"486","desc":"426"},{"messageId":"427","fix":"487","desc":"429"},{"messageId":"424","fix":"488","desc":"426"},{"messageId":"427","fix":"489","desc":"429"},{"messageId":"424","fix":"490","desc":"426"},{"messageId":"427","fix":"491","desc":"429"},{"messageId":"424","fix":"492","desc":"426"},{"messageId":"427","fix":"493","desc":"429"},{"messageId":"424","fix":"494","desc":"426"},{"messageId":"427","fix":"495","desc":"429"},{"messageId":"424","fix":"496","desc":"426"},{"messageId":"427","fix":"497","desc":"429"},{"messageId":"424","fix":"498","desc":"426"},{"messageId":"427","fix":"499","desc":"429"},"Update the dependencies array to be: [g_CurrSentInd, g_MachineStateHandlerWrapper, g_StateMachineState, g_summary_json]",{"range":"500","text":"501"},"Update the dependencies array to be: [g_CurrSentInd, g_SetSummaryShadowAndUpdateHighlights]",{"range":"502","text":"503"},"Update the dependencies array to be: [g_StateMachineState, g_boldStateHandler, g_sliderBoldStateActivated, g_summary_json]",{"range":"504","text":"505"},"Update the dependencies array to be: [g_StateMachineState, g_AlignmentCount, g_oldAlignmentStateHandler]",{"range":"506","text":"507"},"Update the dependencies array to be: [g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId, g_StateMachineState, g_DocOnMouseDownID, g_doc_json, g_SummaryOnMouseDownID, g_summary_json, g_isRedLettered, g_hoverActivatedDocOrSummary, g_checkIfLemmasMatch]",{"range":"508","text":"509"},"Update the dependencies array to be: [CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",{"range":"510","text":"511"},"Update the dependencies array to be: [CurrSentInd, SetSummaryShadowAndUpdateHighlights]",{"range":"512","text":"513"},"Update the dependencies array to be: [StateMachineState, boldStateHandler, sliderBoldStateActivated, summary_json]",{"range":"514","text":"515"},"Update the dependencies array to be: [StateMachineState, AlignmentCount, oldAlignmentStateHandler]",{"range":"516","text":"517"},"Update the dependencies array to be: [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",{"range":"518","text":"519"},"removeEscape",{"range":"520","text":"521"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"522","text":"523"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"524","text":"521"},{"range":"525","text":"523"},{"range":"526","text":"521"},{"range":"527","text":"523"},{"range":"528","text":"521"},{"range":"529","text":"523"},{"range":"530","text":"521"},{"range":"531","text":"523"},{"range":"532","text":"521"},{"range":"533","text":"523"},{"range":"534","text":"521"},{"range":"535","text":"523"},{"range":"536","text":"521"},{"range":"537","text":"523"},{"range":"538","text":"521"},{"range":"539","text":"523"},{"range":"540","text":"521"},{"range":"541","text":"523"},{"range":"542","text":"521"},{"range":"543","text":"523"},{"range":"544","text":"521"},{"range":"545","text":"523"},{"range":"546","text":"521"},{"range":"547","text":"523"},{"range":"548","text":"521"},{"range":"549","text":"523"},{"range":"550","text":"521"},{"range":"551","text":"523"},{"range":"552","text":"521"},{"range":"553","text":"523"},{"range":"554","text":"521"},{"range":"555","text":"523"},{"range":"556","text":"521"},{"range":"557","text":"523"},{"range":"558","text":"521"},{"range":"559","text":"523"},{"range":"560","text":"521"},{"range":"561","text":"523"},{"range":"562","text":"521"},{"range":"563","text":"523"},{"range":"564","text":"521"},{"range":"565","text":"523"},{"range":"566","text":"521"},{"range":"567","text":"523"},{"range":"568","text":"521"},{"range":"569","text":"523"},{"range":"570","text":"521"},{"range":"571","text":"523"},{"range":"572","text":"521"},{"range":"573","text":"523"},{"range":"574","text":"521"},{"range":"575","text":"523"},{"range":"576","text":"521"},{"range":"577","text":"523"},{"range":"578","text":"521"},{"range":"579","text":"523"},{"range":"580","text":"521"},{"range":"581","text":"523"},{"range":"582","text":"521"},{"range":"583","text":"523"},{"range":"584","text":"521"},{"range":"585","text":"523"},{"range":"586","text":"521"},{"range":"587","text":"523"},{"range":"588","text":"521"},{"range":"589","text":"523"},{"range":"590","text":"521"},{"range":"591","text":"523"},{"range":"592","text":"521"},{"range":"593","text":"523"},[38361,38377],"[g_CurrSentInd, g_MachineStateHandlerWrapper, g_StateMachineState, g_summary_json]",[38643,38658],"[g_CurrSentInd, g_SetSummaryShadowAndUpdateHighlights]",[39635,39672],"[g_StateMachineState, g_boldStateHandler, g_sliderBoldStateActivated, g_summary_json]",[40431,40470],"[g_StateMachineState, g_AlignmentCount, g_oldAlignmentStateHandler]",[43807,43885],"[g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId, g_StateMachineState, g_DocOnMouseDownID, g_doc_json, g_SummaryOnMouseDownID, g_summary_json, g_isRedLettered, g_hoverActivatedDocOrSummary, g_checkIfLemmasMatch]",[45911,45925],"[CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",[46193,46206],"[CurrSentInd, SetSummaryShadowAndUpdateHighlights]",[47171,47204],"[StateMachineState, boldStateHandler, sliderBoldStateActivated, summary_json]",[47959,47994],"[StateMachineState, AlignmentCount, oldAlignmentStateHandler]",[51459,51531],"[docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",[2988,2989],"",[2988,2988],"\\",[3002,3003],[3002,3002],[3288,3289],[3288,3288],[3301,3302],[3301,3301],[3556,3557],[3556,3556],[3568,3569],[3568,3568],[3887,3888],[3887,3887],[3901,3902],[3901,3901],[4955,4956],[4955,4955],[4962,4963],[4962,4962],[4977,4978],[4977,4977],[4989,4990],[4989,4989],[5483,5484],[5483,5483],[5495,5496],[5495,5495],[5510,5511],[5510,5510],[5522,5523],[5522,5522],[6201,6202],[6201,6201],[6215,6216],[6215,6215],[6230,6231],[6230,6230],[6246,6247],[6246,6246],[6707,6708],[6707,6707],[6723,6724],[6723,6723],[6738,6739],[6738,6738],[6750,6751],[6750,6750],[7179,7180],[7179,7179],[7192,7193],[7192,7192],[7207,7208],[7207,7207],[7215,7216],[7215,7215],[7449,7450],[7449,7449],[7463,7464],[7463,7463],[7478,7479],[7478,7478],[7494,7495],[7494,7494],[7856,7857],[7856,7856],[7872,7873],[7872,7872],[7887,7888],[7887,7887],[7901,7902],[7901,7901]]