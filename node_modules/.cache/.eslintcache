[{"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js":"1","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js":"2","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js":"3","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js":"4","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js":"5","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js":"6","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js":"7","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js":"8","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js":"9","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js":"10","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js":"11","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js":"12","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js":"13","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation_utils.js":"14","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial.js":"15","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial_utils.js":"16"},{"size":706,"mtime":1648483402725,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1645787016766,"results":"19","hashOfConfig":"18"},{"size":70980,"mtime":1648803801178,"results":"20","hashOfConfig":"18"},{"size":357,"mtime":1646318356436,"results":"21","hashOfConfig":"18"},{"size":22892,"mtime":1648889956698,"results":"22","hashOfConfig":"18"},{"size":2508,"mtime":1647878770931,"results":"23","hashOfConfig":"18"},{"size":8185,"mtime":1648741136201,"results":"24","hashOfConfig":"18"},{"size":11460,"mtime":1648659290796,"results":"25","hashOfConfig":"18"},{"size":4835,"mtime":1648393288637,"results":"26","hashOfConfig":"18"},{"size":8951,"mtime":1648838608451,"results":"27","hashOfConfig":"18"},{"size":439,"mtime":1646496707735,"results":"28","hashOfConfig":"18"},{"size":2305,"mtime":1648393239422,"results":"29","hashOfConfig":"18"},{"size":2272,"mtime":1648137057484,"results":"30","hashOfConfig":"18"},{"size":4838,"mtime":1648664170213,"results":"31","hashOfConfig":"18"},{"size":30143,"mtime":1648890763437,"results":"32","hashOfConfig":"18"},{"size":5128,"mtime":1648890322373,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"iqi5he",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":72,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"37"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\index.js",[],[],["90","91"],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\App.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],[],"import { useState, useEffect, useRef } from 'react'\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport * as React from 'react';\r\n\r\nimport StartPage from './components/StartPage';\r\nimport Tutorial from './components/Tutorial';\r\nimport Instructions from './components/Instructions';\r\nimport GuidedAnnotation from './components/GuidedAnnotation';\r\n\r\nimport Annotation from './components/Annotation';\r\nimport json_file from './data/data_for_mturk.json';\r\nimport g_json_file from './data/guided_annotation/data_for_mturk.json';\r\n\r\n\r\n\r\nimport t_start_json_file from './data/tutorial/tutorial_start.json';\r\nimport t_middle_json_file from './data/tutorial/tutorial_middle.json';\r\nimport t_sent_end_json_file from './data/tutorial/tutorial_sent_end.json';\r\nimport t_submit_json_file from './data/tutorial/tutorial_submit.json';\r\n\r\n\r\n\r\n\r\nimport tutorial_state_messages from './data/tutorial/tutorial_state_messages.json'\r\n\r\nimport { MachineStateHandler, g_MachineStateHandler } from './components/Annotation_event_handlers';\r\nimport { summarySpanIsOk, g_StateMachineStateIndexHandler } from './components/GuidedAnnotation_utils';\r\nimport _ from 'underscore';\r\n\r\n\r\nconst App = () => {\r\n\r\n  // AVIVSL: TUTORIAL_ANNOTATION\r\n  const [t_doc_json, t_setDocJson] = useState([]);\r\n  const [t_summary_json, t_setSummaryJson] = useState([]); \r\n  const [t_start_doc_json, t_setStartDocJson] = useState([]);\r\n  const [t_start_summary_json, t_setStartSummaryJson] = useState([]); \r\n  const [t_middle_doc_json, t_setMiddleDocJson] = useState([]);\r\n  const [t_middle_summary_json, t_setMiddleSummaryJson] = useState([]); \r\n  const [t_sent_end_doc_json, t_setSentEndDocJson] = useState([]);\r\n  const [t_sent_end_summary_json, t_setSentEndSummaryJson] = useState([]); \r\n  const [t_submit_doc_json, t_setSubmitDocJson] = useState([]);\r\n  const [t_submit_summary_json, t_setSubmitSummaryJson] = useState([]); \r\n  \r\n  const [t_all_lemma_match_mtx, t_setAllLemmaMtx] = useState([]);\r\n  const [t_important_lemma_match_mtx, t_setImportantLemmaMtx] = useState([]);\r\n  const [t_doc_paragraph_breaks, t_setDocParagraphBreaks] = useState([]);\r\n  const [t_state_messages, t_setStateMessages] = useState([]);\r\n\r\n  // AVIVSL: GUIDED_ANNOTATION\r\n  const [g_doc_json, g_setDocJson] = useState([]);\r\n  const [g_summary_json, g_setSummaryJson] = useState([]); \r\n  const [g_all_lemma_match_mtx, g_setAllLemmaMtx] = useState([]);\r\n  const [g_important_lemma_match_mtx, g_setImportantLemmaMtx] = useState([]);\r\n  const [g_doc_paragraph_breaks, g_setDocParagraphBreaks] = useState([]);\r\n  const [g_boldState, g_setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [g_oldAlignmentState, g_setOldAlignmentState] = useState(\"all\"); // for user to choose if want full highlighting history, only current sentence's highlighting history or no history (denoted as \"all\", \"sent\" and \"none\", accordingly)\r\n  const [g_StateMachineState, g_SetStateMachineState] = useState(\"START\");\r\n  const [g_error_message, g_setErrorMessage] = React.useState(\"\");\r\n  const [g_CurrSentInd, g_SetCurrSentInd] = useState(-1);\r\n  const [g_InfoMessage, g_SetInfoMessage] = useState(\"\");\r\n  const [g_AlignmentCount, g_SetAlignmentCount] = useState(0)\r\n  const [g_prevStateMachineState, g_setPrevStateMachineState] = useState(\"\")\r\n  \r\n  const [g_prevSummarySpanHighlights, g_setPrevSummarySpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [g_prevDocSpanHighlights, g_setPrevDocSpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [g_prevSummaryJsonRevise, g_setPrevSummaryJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [g_prevDocJsonRevise, g_setPrevDocJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n\r\n\r\n  const [g_DocOnMouseDownID, g_SetDocOnMouseDownID] = useState(\"-1\");\r\n  const [g_SummaryOnMouseDownID, g_SetSummaryOnMouseDownID] = useState(\"-1\");\r\n  const [g_docOnMouseDownActivated, g_setDocOnMouseDownActivated] = useState(false);\r\n  const [g_summaryOnMouseDownActivated, g_setSummaryOnMouseDownActivated] = useState(false);\r\n  const [g_hoverActivatedId, g_setHoverActivatedId] = useState(\"-1\"); // value will be of tkn_id of elem hovered over\r\n  const [g_hoverActivatedDocOrSummary, g_setHoverActivatedDocOrSummary] = useState(\"doc\"); // value will be of tkn_id of elem hovered over\r\n  const [g_sliderBoldStateActivated, g_setSliderBoldStateActivated] = useState(false);\r\n  const [g_StateMachineStateIndex, g_setStateMachineStateIndex] = useState(0) // for specific states messages \r\n\r\n  const [guidingAnnotationAlertText, setGuidingAnnotationAlertText] = useState(\"\")\r\n  const [guidingAnnotationAlertTitle, setGuidingAnnotationAlertTitle] = useState(\"\")\r\n  const [guidingAnnotationAlertType, setGuidingAnnotationAlertType] = useState(\"success\") // can be either \"success\" or \"danger\"\r\n  // const [guidingAnnotationAlertShow, setGuidingAnnotationAlertShow] = useState(true)\r\n\r\n\r\n  // AVIVSL: ACTUAL ANNOTATION\r\n  const [task_id, setTaskID] = useState(\"-1\"); // default for task_id is -1\r\n  const [doc_json, setDocJson] = useState([]);\r\n  const [summary_json, setSummaryJson] = useState([]); \r\n  const [all_lemma_match_mtx, setAllLemmaMtx] = useState([]);\r\n  const [important_lemma_match_mtx, setImportantLemmaMtx] = useState([]);\r\n  const [doc_paragraph_breaks, setDocParagraphBreaks] = useState([]);\r\n  const [boldState, setBoldState] = useState(\"sent\"); // for user to choose if want full sentence, span or no lemma matching (denoted as \"sent\", \"span\" and \"none\", accordingly)\r\n  const [oldAlignmentState, setOldAlignmentState] = useState(\"all\"); // for user to choose if want full highlighting history, only current sentence's highlighting history or no history (denoted as \"all\", \"sent\" and \"none\", accordingly)\r\n  const [StateMachineState, SetStateMachineState] = useState(\"START\");\r\n  const [error_message, setErrorMessage] = React.useState(\"\");\r\n  const [CurrSentInd, SetCurrSentInd] = useState(-1);\r\n  const [InfoMessage, SetInfoMessage] = useState(\"\");\r\n  const [AlignmentCount, SetAlignmentCount] = useState(0)\r\n\r\n  const [prevStateMachineState, setPrevStateMachineState] = useState(\"\")\r\n  \r\n  const [prevSummarySpanHighlights, setPrevSummarySpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevDocSpanHighlights, setPrevDocSpanHighlights] = useState([]) // relevant for restoring span alignments before going to \"revise\" mode\r\n  const [prevSummaryJsonRevise, setPrevSummaryJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n  const [prevDocJsonRevise, setPrevDocJsonRevise] = useState([]) // relevant for restoring All alignments before choosing an alignment in revise mode so can be restored if pressing the back button\r\n\r\n\r\n  const [DocOnMouseDownID, SetDocOnMouseDownID] = useState(\"-1\");\r\n  const [SummaryOnMouseDownID, SetSummaryOnMouseDownID] = useState(\"-1\");\r\n  const [docOnMouseDownActivated, setDocOnMouseDownActivated] = useState(false);\r\n  const [summaryOnMouseDownActivated, setSummaryOnMouseDownActivated] = useState(false);\r\n  const [hoverActivatedId, setHoverActivatedId] = useState(\"-1\"); // value will be of tkn_id of elem hovered over\r\n  const [hoverActivatedDocOrSummary, setHoverActivatedDocOrSummary] = useState(\"doc\"); // value will be of tkn_id of elem hovered over\r\n  const [sliderBoldStateActivated, setSliderBoldStateActivated] = useState(false);\r\n\r\n  /*************************************** error handling *************************************************/\r\n  const Alert = React.forwardRef(function Alert(props, ref) {return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;});\r\n  \r\n  // AVIVSL: GUIDED_ANNOTATION\r\n  const g_handleErrorOpen = ({ msg }) => { \r\n    g_setErrorMessage(msg); \r\n  };\r\n\r\n  const g_handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    g_setErrorMessage(\"\");\r\n  };\r\n\r\n  // AVIVSL: ACTUAL ANNOTATION\r\n  const handleErrorOpen = ({ msg }) => { \r\n    setErrorMessage(msg); \r\n  };\r\n\r\n  const handleErrorClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setErrorMessage(\"\");\r\n  };\r\n\r\n\r\n/************************************************************************************************************* */\r\n\r\n  const isPunct = (tkn_txt) => {\r\n    const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n    const result = tkn_txt.replace(regex, '').replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    return (result === '');\r\n  }\r\n\r\n  /************************************************************************************************* AVIVSL: GUIDED_ANNOTATION *****************************************************************************************/\r\n  \r\n  function g_addDocWordComponents(doc) {\r\n    let updated_doc_json = [];\r\n    doc.forEach((word) => {\r\n      let boldfaced=false;\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      let red_color=false;\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, red_color, alignment_id}; \r\n      updated_doc_json = [...updated_doc_json, newWord];\r\n    })\r\n    g_setDocJson(updated_doc_json);\r\n  }\r\n\r\n  function g_addSummaryWordComponents(summary) {\r\n    let updated_summary_json = [];\r\n    summary.forEach((word) => {\r\n      let boldfaced=false;\r\n\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let shadowed=false;\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, shadowed, alignment_id}; \r\n      updated_summary_json = [...updated_summary_json, newWord];\r\n    })\r\n    g_setSummaryJson(updated_summary_json);\r\n  }\r\n\r\n  const g_toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    g_setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n    } else if (turn_off){\r\n        g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word))\r\n    } else {\r\n      g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n    }\r\n  }\r\n\r\n  g_toggleDocSpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const update_GuidingAnnotationAlertText = ({alert_title, alert_text, alert_type}) => {\r\n    setGuidingAnnotationAlertTitle(alert_title)\r\n    setGuidingAnnotationAlertText(alert_text)\r\n    setGuidingAnnotationAlertType(alert_type)\r\n  }\r\n  \r\n  const closeGuidingAnnotationAlert = () => {\r\n    update_GuidingAnnotationAlertText({alert_title:\"\", alert_text:\"\", alert_type:\"danger\"})\r\n  }\r\n\r\n  const g_toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    g_setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      if (summarySpanIsOk(g_StateMachineStateIndex, tkn_ids) == \"too long\") {\r\n        update_GuidingAnnotationAlertText({alert_title:\"Span too long\", alert_text:\"The span chosen is too long, which can cause missing out little details. Please try again.\", alert_type:\"danger\"})\r\n      } else if (summarySpanIsOk(g_StateMachineStateIndex, tkn_ids) == \"too short\") {\r\n        update_GuidingAnnotationAlertText({alert_title:\"Span too short\", alert_text:\"The span chosen is too short and doesn't cover full events. please try again.\", alert_type:\"danger\"})\r\n      } else {\r\n        g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n        if(g_StateMachineStateIndex===1.0){\r\n          update_GuidingAnnotationAlertText({alert_title:\"Good Job!\", alert_text:\"The span chosen is not too long and also covers full events. Well done!\", alert_type:\"success\"})\r\n          g_StateMachineStateIndexHandler(g_StateMachineStateIndex, g_setStateMachineStateIndex);\r\n        }\r\n      }\r\n    } else if (turn_off){\r\n      g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word));\r\n    } else {\r\n      g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n    }\r\n  }\r\n\r\n  g_toggleSummarySpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const g_approveHighlightHandler = () => {\r\n    const doc_tkn_ids = g_doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    g_setDocJson(g_doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, g_AlignmentCount], span_highlighted: false } : word));\r\n\r\n\r\n    const summary_tkn_ids = g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    g_setSummaryJson(g_summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, g_AlignmentCount], span_highlighted: false } : word));    \r\n \r\n  }\r\n\r\n  const g_StartReviseStateHandler = (isBackBtn) => {\r\n    if (isBackBtn){\r\n      g_setDocJson(g_doc_json.map((word, ind) => {return {...word, all_highlighted: g_prevDocJsonRevise[ind].all_highlighted, span_highlighted: g_prevDocJsonRevise[ind].span_highlighted, alignment_id: g_prevDocJsonRevise[ind].alignment_id}}))\r\n      g_setSummaryJson(g_summary_json.map((word, ind) => {return {...word, all_highlighted: g_prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: g_prevSummaryJsonRevise[ind].span_highlighted, alignment_id: g_prevSummaryJsonRevise[ind].alignment_id}}))\r\n    } else{\r\n      g_setPrevStateMachineState(g_StateMachineState);\r\n      g_setPrevDocSpanHighlights(g_doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      g_setPrevSummarySpanHighlights(g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      g_setSummaryJson(g_summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n    }\r\n  }\r\n\r\n  const g_ExitReviseHandler = () => {\r\n    g_setDocJson(g_doc_json.map((word, ind) => g_prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n    g_setSummaryJson(g_summary_json.map((word, ind) => g_prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n    const prev_state = g_prevStateMachineState;\r\n    g_SetStateMachineState(g_prevStateMachineState);\r\n    g_setPrevStateMachineState(\"\");\r\n    g_setPrevSummarySpanHighlights([]);\r\n    g_setPrevDocSpanHighlights([]);\r\n    return prev_state\r\n  }\r\n\r\n  const g_RemoveAlignmentId = (word, chosen_align_id) => {\r\n    const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n    return new_alignment_id;\r\n  }\r\n\r\n  const g_ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n    g_setPrevSummaryJsonRevise(g_summary_json);\r\n    g_setPrevDocJsonRevise(g_doc_json);\r\n\r\n    const chosen_align_id = (clickedWordInfo[0] === 'doc') ? g_doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n    g_summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n\r\n    g_setSummaryJson(g_summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: g_RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    g_setDocJson(g_doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: g_RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n  }\r\n\r\n\r\n  const g_SetSummaryShadow = (sent_id) => {\r\n    g_setSummaryJson(g_summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const g_SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n    g_setSummaryJson(\r\n      g_summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n      (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n      )\r\n  }\r\n\r\n  const g_SetDocBoldface = (tkn_ids) => {\r\n    g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n\r\n\r\n\r\n  const g_checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n    const which_match_mtx = g_important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return g_all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const g_boldStateHandler = (event, newValue) => {\r\n    if (event !== undefined){\r\n      g_setSliderBoldStateActivated(true)\r\n      if (g_StateMachineStateIndex===1.1){\r\n        g_StateMachineStateIndexHandler(g_StateMachineStateIndex, g_setStateMachineStateIndex)\r\n      }\r\n    }\r\n    if (newValue=='1'){\r\n      g_setBoldState(\"none\");\r\n      g_SetDocBoldface([]);\r\n    } else if (newValue=='2'){\r\n      g_setBoldState(\"span\");\r\n      const summary_ids = g_summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      const isSpan = true;\r\n      const tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      g_SetDocBoldface(tkn_ids);\r\n    } else {\r\n      g_setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = g_summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      g_SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n\r\n  const g_SetDocOldHighlights = (tkn_ids) => {\r\n    g_setDocJson(g_doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const g_SetSummaryOldHighlights = (tkn_ids) => {\r\n    g_setSummaryJson(g_summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const g_FindDocAlignmentPerSent = (sent_ind) => {\r\n    let curr_sent_alignment_ids = g_summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n    curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n    const doc_ids = g_doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n    return doc_ids\r\n  }\r\n\r\n\r\n  const g_oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n\r\n    if (newValue=='1'){\r\n      g_setOldAlignmentState(\"none\");\r\n      g_SetDocOldHighlights([]);\r\n      g_SetSummaryOldHighlights([]);\r\n    } else if (newValue=='2'){\r\n      g_setOldAlignmentState(\"sent\");\r\n      sent_ind = (sent_ind===-1) ? g_CurrSentInd : sent_ind\r\n      const doc_ids = g_FindDocAlignmentPerSent(sent_ind)\r\n      const summary_ids = g_summary_json.filter((word) => {return (word.all_highlighted && word.sent_id === sent_ind)}).map((word) => {return word.tkn_id});\r\n      g_SetDocOldHighlights(doc_ids);\r\n      g_SetSummaryOldHighlights(summary_ids);\r\n    } else {\r\n      g_setOldAlignmentState(\"all\");\r\n      const doc_ids = g_doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      const summary_ids = g_summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      g_SetDocOldHighlights(doc_ids);\r\n      g_SetSummaryOldHighlights(summary_ids);\r\n    }\r\n  }\r\n\r\n  g_oldAlignmentStateHandler.defaultProps = {\r\n    sent_ind: -1\r\n  }\r\n\r\n\r\n\r\n  const g_hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    // onMouseEnter for \"REVISE HOVER\"\r\n    if (inOrOut === \"in\" && g_StateMachineState===\"REVISE HOVER\") { \r\n      g_setDocJson(g_doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      g_setSummaryJson(g_summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n    } \r\n    // onMouseLeave for \"REVISE HOVER\"\r\n    else if (inOrOut === \"out\" && g_StateMachineState===\"REVISE HOVER\") { \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      g_setSummaryJson(g_summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n    }\r\n    // onMouseLeave for all the alignments choosing states\r\n    else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState) && isSummary) { \r\n      g_setDocJson(g_doc_json.map((word) => {return {...word, red_color:false}}))\r\n    }\r\n\r\n  }\r\n\r\n  const g_isRedLettered = (summary_tkn_id) => {\r\n    if ((g_StateMachineState === \"REVISE CLICKED\") && (g_summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > g_CurrSentInd}).length !== 0)){\r\n      return false\r\n    } else if ((g_summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== g_CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState))) {\r\n      return false\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState)) {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const g_MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n    g_setSliderBoldStateActivated(false);\r\n    g_StateMachineStateIndexHandler(g_StateMachineStateIndex, g_setStateMachineStateIndex);\r\n    g_MachineStateHandler(g_summary_json,\r\n                          g_StateMachineState, g_SetStateMachineState,\r\n                          g_SetInfoMessage, g_handleErrorOpen, isPunct,\r\n                          g_CurrSentInd, g_SetCurrSentInd, g_SetSummaryShadow,\r\n                          g_AlignmentCount, g_SetAlignmentCount,\r\n                          g_approveHighlightHandler,\r\n                          clickedWordInfo, forceState, \r\n                          g_StartReviseStateHandler, g_ExitReviseHandler,\r\n                          g_ReviseChooseAlignHandler, \r\n                          isBackBtn,\r\n                          g_setPrevSummaryJsonRevise, g_setPrevDocJsonRevise,\r\n                          g_StateMachineStateIndex, g_setStateMachineStateIndex\r\n                         );\r\n  }\r\n\r\n  g_MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n    clickedWordInfo: [],\r\n    isBackBtn: false\r\n  }\r\n  /*********************************************************************************************************************************************************************************************************************/\r\n\r\n  \r\n  \r\n  /************************************ AVIVSL: ACTUAL ANNOTATION ********************************************** */\r\n\r\n\r\n\r\n  function addDocWordComponents(doc) {\r\n    let updated_doc_json = [];\r\n    doc.forEach((word) => {\r\n      let boldfaced=false;\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      let red_color=false;\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, red_color, alignment_id}; \r\n      updated_doc_json = [...updated_doc_json, newWord];\r\n    })\r\n    setDocJson(updated_doc_json);\r\n  }\r\n\r\n\r\n  function addSummaryWordComponents(summary) {\r\n    let updated_summary_json = [];\r\n    summary.forEach((word) => {\r\n      let boldfaced=false;\r\n\r\n      let all_highlighted=false; // all the doc's highlights so far\r\n      let span_highlighted=false; // all the span's highlights so far\r\n      let old_alignments=false; // old highlighting control (goes between all, sentences and none) --> how much of all_highlighted to highlight\r\n      let shadowed=false;\r\n      let alignment_id=[];\r\n      let old_alignment_hover=false; // to pop when hovering over words during \"REVISE HOVER\" state\r\n      let span_alignment_hover=false; // to ease the process of choosing spans (while pressing the mouse - make simultaneous highlighting)\r\n      const newWord = {...word, boldfaced, span_highlighted, all_highlighted, old_alignments, old_alignment_hover, span_alignment_hover, shadowed, alignment_id}; \r\n      updated_summary_json = [...updated_summary_json, newWord];\r\n    })\r\n    setSummaryJson(updated_summary_json);\r\n  }\r\n\r\n  const toggleDocSpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word))\r\n    } else if (turn_off){\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word))\r\n    } else {\r\n        setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word))\r\n    }\r\n  }\r\n\r\n  toggleDocSpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n  const toggleSummarySpanHighlight = ({tkn_ids, turn_on, turn_off}) => {\r\n    console.log(\"inside toggleSummarySpanHighlight:\")\r\n    console.log(tkn_ids)\r\n    setSliderBoldStateActivated(false)\r\n    if (turn_on){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: true } : word));\r\n    } else if (turn_off){\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: false } : word));\r\n    } else {\r\n      setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, span_highlighted: !word.span_highlighted } : word));\r\n    }\r\n  }\r\n\r\n  toggleSummarySpanHighlight.defaultProps = {\r\n    turn_on: false,\r\n    turn_off: false\r\n  }\r\n\r\n\r\n  const approveHighlightHandler = () => {\r\n    const doc_tkn_ids = doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));\r\n\r\n\r\n    const summary_tkn_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n    setSummaryJson(summary_json.map((word) => summary_tkn_ids.includes(word.tkn_id) ? { ...word, all_highlighted: true, alignment_id: [...word.alignment_id, AlignmentCount], span_highlighted: false } : word));    \r\n \r\n  }\r\n\r\n  const StartReviseStateHandler = (isBackBtn) => {\r\n    if (isBackBtn){\r\n      setDocJson(doc_json.map((word, ind) => {return {...word, all_highlighted: prevDocJsonRevise[ind].all_highlighted, span_highlighted: prevDocJsonRevise[ind].span_highlighted, alignment_id: prevDocJsonRevise[ind].alignment_id}}))\r\n      setSummaryJson(summary_json.map((word, ind) => {return {...word, all_highlighted: prevSummaryJsonRevise[ind].all_highlighted, span_highlighted: prevSummaryJsonRevise[ind].span_highlighted, alignment_id: prevSummaryJsonRevise[ind].alignment_id}}))\r\n    } else{\r\n      setPrevStateMachineState(StateMachineState);\r\n      setPrevDocSpanHighlights(doc_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      setPrevSummarySpanHighlights(summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id}));\r\n      \r\n      setDocJson(doc_json.map((word) => {return {...word, span_highlighted: false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, span_highlighted: false}}))\r\n    }\r\n  }\r\n\r\n  const ExitReviseHandler = () => {\r\n    setDocJson(doc_json.map((word, ind) => prevDocSpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))\r\n    setSummaryJson(summary_json.map((word, ind) => prevSummarySpanHighlights.includes(word.tkn_id) ? {...word, span_highlighted: true}:{...word, span_highlighted: false}))               \r\n    const prev_state = prevStateMachineState;\r\n    SetStateMachineState(prevStateMachineState);\r\n    setPrevStateMachineState(\"\");\r\n    setPrevSummarySpanHighlights([]);\r\n    setPrevDocSpanHighlights([]);\r\n    return prev_state\r\n  }\r\n\r\n  const RemoveAlignmentId = (word, chosen_align_id) => {\r\n    const new_alignment_id = word.alignment_id.filter((elem) => {return elem !== chosen_align_id});\r\n    return new_alignment_id;\r\n  }\r\n\r\n  const ReviseChooseAlignHandler = (clickedWordInfo) => {\r\n    setPrevSummaryJsonRevise(summary_json);\r\n    setPrevDocJsonRevise(doc_json);\r\n\r\n    const chosen_align_id = (clickedWordInfo[0] === 'doc') ? doc_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0] : \r\n                                                             summary_json.filter((word) => {return word.tkn_id === clickedWordInfo[1]})[0].alignment_id[0]\r\n\r\n    setSummaryJson(summary_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n    setDocJson(doc_json.map((word) => word.alignment_id.includes(chosen_align_id) ? {...word, span_highlighted: true, all_highlighted: false, old_alignments: false, old_alignment_hover:false, alignment_id: RemoveAlignmentId(word, chosen_align_id)} : {...word, span_highlighted: false}))\r\n  }\r\n\r\n\r\n  const SetSummaryShadow = (sent_id) => {\r\n    setSummaryJson(summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }))\r\n  }\r\n\r\n\r\n  const SetSummaryShadowAndUpdateHighlights = (sent_id) => {\r\n    setSummaryJson(\r\n      summary_json.map((word) => word.sent_id === sent_id ? { ...word, shadowed: true } : { ...word, shadowed: false }).map(\r\n      (word) => word.span_highlighted ? {...word, span_highlighted: false, all_highlighted:true} : word)\r\n      )\r\n  }\r\n\r\n  const SetDocBoldface = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, boldfaced: true } : { ...word, boldfaced: false }))\r\n  }\r\n\r\n  const checkIfLemmasMatch = ({doc_id, summary_ids, isHover}) => {\r\n    // if (isHover){\r\n    //   console.log(\"AVIVSL: summary_ids are:\")\r\n    //   console.log(summary_ids)\r\n    // }\r\n    const which_match_mtx = important_lemma_match_mtx;\r\n    const matching_summary_ids = summary_ids.filter((summary_id) => {return all_lemma_match_mtx[doc_id][summary_id] === 1;})\r\n    return matching_summary_ids.length > 0\r\n  }\r\n\r\n  const boldStateHandler = (event, newValue) => {\r\n    if (event !== undefined){\r\n      setSliderBoldStateActivated(true)\r\n    }\r\n    if (newValue=='1'){\r\n      setBoldState(\"none\");\r\n      SetDocBoldface([]);\r\n    } else if (newValue=='2'){\r\n      setBoldState(\"span\");\r\n      const summary_ids = summary_json.filter((word) => {return word.span_highlighted}).map((word) => {return word.tkn_id});\r\n      const isSpan = true;\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      SetDocBoldface(tkn_ids);\r\n    } else {\r\n      setBoldState(\"sent\");\r\n      const isSpan = false;\r\n      const summary_ids = summary_json.filter((word) => {return word.shadowed}).map((word) => {return word.tkn_id});\r\n      const tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:summary_ids, isHover:false})});\r\n      SetDocBoldface(tkn_ids);\r\n    }\r\n  }\r\n\r\n\r\n  const SetDocOldHighlights = (tkn_ids) => {\r\n    setDocJson(doc_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const SetSummaryOldHighlights = (tkn_ids) => {\r\n    setSummaryJson(summary_json.map((word) => tkn_ids.includes(word.tkn_id) ? { ...word, old_alignments: true } : { ...word, old_alignments: false }))\r\n  }\r\n\r\n  const FindDocAlignmentPerSent = (sent_ind) => {\r\n    let curr_sent_alignment_ids = summary_json.map((word) => {return (word.sent_id===sent_ind) ? word.alignment_id : []});\r\n    curr_sent_alignment_ids = [].concat.apply([], curr_sent_alignment_ids); // merge into a single array (before was an array of arrays)\r\n    const doc_ids = doc_json.filter((word) => {return word.alignment_id.some(r=> curr_sent_alignment_ids.includes(r))}).map((word) => {return word.tkn_id});\r\n    return doc_ids\r\n  }\r\n\r\n\r\n  const oldAlignmentStateHandler = ({event, newValue, sent_ind}) => {\r\n\r\n    if (newValue=='1'){\r\n      setOldAlignmentState(\"none\");\r\n      SetDocOldHighlights([]);\r\n      SetSummaryOldHighlights([]);\r\n    } else if (newValue=='2'){\r\n      setOldAlignmentState(\"sent\");\r\n      sent_ind = (sent_ind===-1) ? CurrSentInd : sent_ind\r\n      const doc_ids = FindDocAlignmentPerSent(sent_ind)\r\n      const summary_ids = summary_json.filter((word) => {return (word.all_highlighted && word.sent_id === sent_ind)}).map((word) => {return word.tkn_id});\r\n      SetDocOldHighlights(doc_ids);\r\n      SetSummaryOldHighlights(summary_ids);\r\n    } else {\r\n      setOldAlignmentState(\"all\");\r\n      const doc_ids = doc_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      const summary_ids = summary_json.filter((word) => {return word.all_highlighted}).map((word) => {return word.tkn_id});\r\n      SetDocOldHighlights(doc_ids);\r\n      SetSummaryOldHighlights(summary_ids);\r\n    }\r\n  }\r\n\r\n  oldAlignmentStateHandler.defaultProps = {\r\n    sent_ind: -1\r\n  }\r\n\r\n\r\n  \r\n  const hoverHandler = ({inOrOut, curr_alignment_id, tkn_id, isSummary}) => {\r\n    // onMouseEnter for \"REVISE HOVER\"\r\n    if (inOrOut === \"in\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n      setSummaryJson(summary_json.map((word) => word.alignment_id.includes(curr_alignment_id) ? {...word, old_alignment_hover: true} : {...word, old_alignment_hover: false}))\r\n    } \r\n    // onMouseLeave for \"REVISE HOVER\"\r\n    else if (inOrOut === \"out\" && StateMachineState===\"REVISE HOVER\") { \r\n      setDocJson(doc_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n      setSummaryJson(summary_json.map((word) => {return {...word, old_alignment_hover:false}}))\r\n    }\r\n    // onMouseEnter for all the alignments choosing states\r\n    // else if (inOrOut === \"in\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      // const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[tkn_id], isHover:true})});\r\n      // setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))\r\n    // } \r\n    // onMouseLeave for all the alignments choosing states\r\n    else if (inOrOut === \"out\" && [\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState) && isSummary) { \r\n      setDocJson(doc_json.map((word) => {return {...word, red_color:false}}))\r\n    }\r\n\r\n  }\r\n\r\n  const isRedLettered = (summary_tkn_id) => {\r\n    if ((StateMachineState === \"REVISE CLICKED\") && (summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id > CurrSentInd}).length !== 0)){\r\n      return false\r\n    } else if ((summary_json.filter((word) => {return word.tkn_id === summary_tkn_id && word.sent_id !== CurrSentInd}).length !== 0) && !([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState))) {\r\n      return false\r\n    } else if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)) {\r\n      return true\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  const MachineStateHandlerWrapper = ({clickedWordInfo, forceState, isBackBtn}) => {\r\n    setSliderBoldStateActivated(false);\r\n    if (typeof forceState === 'string') {\r\n      console.log(`forceState situation with: state ${forceState}`);\r\n    }\r\n    else{\r\n      console.log(\"not a forceState situation...\");\r\n    }\r\n    MachineStateHandler(summary_json,\r\n                          StateMachineState, SetStateMachineState,\r\n                          SetInfoMessage, handleErrorOpen, isPunct,\r\n                          CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                          AlignmentCount, SetAlignmentCount,\r\n                          approveHighlightHandler,\r\n                          clickedWordInfo, forceState, \r\n                          StartReviseStateHandler, ExitReviseHandler,\r\n                          ReviseChooseAlignHandler, \r\n                          isBackBtn,\r\n                          setPrevSummaryJsonRevise, setPrevDocJsonRevise\r\n                         );\r\n  }\r\n\r\n  MachineStateHandlerWrapper.defaultProps = {\r\n    forceState: '',\r\n    clickedWordInfo: [],\r\n    isBackBtn: false\r\n  }\r\n\r\n/**************************************************************************************************************/\r\n\r\n\r\n\r\n\r\n/************************************************************************************************* AVIVSL: GUIDED_ANNOTATION *****************************************************************************************/\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const g_finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (g_StateMachineState !== \"START\" && g_summary_json.filter((word) => {return word.sent_id===g_CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (g_summary_json.filter((word) => { return word.sent_id===g_CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !g_finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState)) {\r\n      g_finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, g_summary_json.map(word => { return word.sent_id; })) === g_CurrSentInd)\r\n      if (isLastSent) {\r\n        g_MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        g_MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && g_finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState)) { \r\n      g_finishedSent.current = false;\r\n      g_MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [g_summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    g_SetSummaryShadowAndUpdateHighlights(g_CurrSentInd);\r\n  }, [g_CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(g_StateMachineState) && !g_sliderBoldStateActivated) {\r\n      const bold_state = (g_summary_json.filter((word) => {return word.span_highlighted}).length === 0) ? '3' : '2'; // if no span is current highlighted - bold everything, otherwise bold only currently highlighted span\r\n      g_boldStateHandler(undefined, bold_state);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(g_StateMachineState) && !g_sliderBoldStateActivated) {\r\n      g_boldStateHandler(undefined, '1');\r\n    }\r\n  }, [g_StateMachineState, g_summary_json]);\r\n  /********************************************************************************/\r\n\r\n   /***************************** old alignments controlling *****************************/ \r\n   const g_prevState = useRef(\"\")\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(g_StateMachineState)) {\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n     } else if (g_StateMachineState === \"REVISE CLICKED\"){\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n     } else if (g_StateMachineState === \"REVISE HOVER\"){\r\n       g_oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n     }\r\n     g_prevState.current = g_StateMachineState;\r\n   }, [g_StateMachineState, g_AlignmentCount]);\r\n   /********************************************************************************/\r\n   useEffect(() => {\r\n     console.log(`g_CurrSentInd is updated and is now ${g_CurrSentInd}`)\r\n   }, [g_CurrSentInd]);\r\n   \r\n   \r\n   \r\n   /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n   useEffect(() => {\r\n     if (g_DocOnMouseDownID !== \"-1\"){\r\n       g_setDocOnMouseDownActivated(true)\r\n     } else if (g_DocOnMouseDownID === \"-1\"){\r\n       g_setDocOnMouseDownActivated(false)\r\n     } \r\n     \r\n     if (g_SummaryOnMouseDownID !== \"-1\") {\r\n       g_setSummaryOnMouseDownActivated(true)\r\n     } else {\r\n       g_setSummaryOnMouseDownActivated(false)\r\n     }\r\n   }, [g_DocOnMouseDownID,g_SummaryOnMouseDownID]);\r\n   \r\n   //AVIVSL: TODO: find way to reset the whole hovering process when the onMouseUp occurs outside of the text (maybe when g_docOnMouseDownActivated===false or g_summaryOnMouseDownActivated===false) --> maybe use a useRef to remember which one was the one activated - summary or doc?\r\n   useEffect(() => {\r\n     if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(g_StateMachineState)){\r\n       if(g_docOnMouseDownActivated) {\r\n         console.log(`g_DocOnMouseDownID is ${g_DocOnMouseDownID} and g_hoverActivatedId ia ${g_hoverActivatedId}`)\r\n         const min_ID =  (g_DocOnMouseDownID > g_hoverActivatedId) ? g_hoverActivatedId : g_DocOnMouseDownID;\r\n         const max_ID =  (g_DocOnMouseDownID > g_hoverActivatedId) ? g_DocOnMouseDownID : g_hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         g_setDocJson(g_doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!g_docOnMouseDownActivated){\r\n         g_setDocJson(g_doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n       }\r\n       if(g_summaryOnMouseDownActivated) {\r\n         console.log(`g_SummaryOnMouseDownID is ${g_SummaryOnMouseDownID} and g_hoverActivatedId ia ${g_hoverActivatedId}`)\r\n         const min_ID =  (g_SummaryOnMouseDownID > g_hoverActivatedId) ? g_hoverActivatedId : g_SummaryOnMouseDownID;\r\n         const max_ID =  (g_SummaryOnMouseDownID > g_hoverActivatedId) ? g_SummaryOnMouseDownID : g_hoverActivatedId;\r\n         let chosen_IDs = [];\r\n         for(let i=min_ID; i<=max_ID; i++){\r\n           chosen_IDs.push(i);\r\n         }\r\n         g_setSummaryJson(g_summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n       } else if (!g_summaryOnMouseDownActivated){\r\n         g_setSummaryJson(g_summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n         \r\n         if (g_isRedLettered(g_hoverActivatedId) && g_hoverActivatedDocOrSummary === \"summary\") {\r\n           const doc_tkn_ids = g_doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return g_checkIfLemmasMatch({doc_id:doc_id, summary_ids:[g_hoverActivatedId], isHover:true})});\r\n\r\n           g_setDocJson(g_doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n         }  \r\n       }\r\n     }\r\n   }, [g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId]);\r\n   /********************************************************************************/ \r\n\r\n\r\n\r\n\r\n/*********************************************************************************************************************************************************************************************************************/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /************************************ AVIVSL: ACTUAL ANNOTATION *********************************************/\r\n\r\n  /*******  useState for smooth transition to \"SENTENCE END\" or \"SUMMARY END\" *******/\r\n  const finishedSent = useRef(false);\r\n\r\n  useEffect(() => {\r\n    const isNotStart = (StateMachineState !== \"START\" && summary_json.filter((word) => {return word.sent_id===CurrSentInd && word.shadowed}).length !== 0);\r\n    const isAllSentHighlighted = (summary_json.filter((word) => { return word.sent_id===CurrSentInd && !(word.all_highlighted || word.span_highlighted) && !isPunct(word.word)}).length === 0); // need \"isNotStart\" because also for \"START\" state isAllSentHighlighted=true because no sentence is span-highlighted yet \r\n    if (isAllSentHighlighted && isNotStart && !finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) {\r\n      finishedSent.current = true;\r\n\r\n\r\n      const isLastSent = (Math.max.apply(Math, summary_json.map(word => { return word.sent_id; })) === CurrSentInd)\r\n      if (isLastSent) {\r\n        MachineStateHandlerWrapper({forceState:\"SUMMARY END\"});   \r\n      } else {\r\n        MachineStateHandlerWrapper({forceState:\"SENTENCE END\"});   \r\n      }\r\n    }\r\n\r\n    // if regretted summary highlighting\r\n    else if(!isAllSentHighlighted && isNotStart && finishedSent.current && ![\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState)) { \r\n      console.log(`curr state is ${StateMachineState}`);\r\n      console.log(`curr CurrSentInd is ${CurrSentInd}`)\r\n      console.log(\"back to square one\");\r\n      finishedSent.current = false;\r\n      MachineStateHandlerWrapper({forceState:\"ANNOTATION\"});\r\n    }\r\n  }, [summary_json]);\r\n  /*********************************************************************************/ \r\n\r\n\r\n  \r\n  /*********** useState to update the summary shadow when next sentence ***********/ \r\n  useEffect(() => {\r\n    SetSummaryShadowAndUpdateHighlights(CurrSentInd);\r\n  }, [CurrSentInd]);\r\n  /********************************************************************************/\r\n\r\n\r\n  /***************************** bolding controlling *****************************/ \r\n  useEffect(() => {\r\n    // when choosing a span - if nothing is span_highlighted then all sent matches are in bold, otherwise only span_highlighted matches (when highlighting - something must be span-highlighted so automatically is '2')\r\n    if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      const bold_state = (summary_json.filter((word) => {return word.span_highlighted}).length === 0) ? '3' : '2'; // if no span is current highlighted - bold everything, otherwise bold only currently highlighted span\r\n      boldStateHandler(undefined, bold_state);\r\n    } else if ([\"REVISE HOVER\", \"REVISE CLICKED\"].includes(StateMachineState) && !sliderBoldStateActivated) {\r\n      boldStateHandler(undefined, '1');\r\n    }\r\n  }, [StateMachineState, summary_json]);\r\n  /********************************************************************************/\r\n\r\n\r\n    /***************************** old alignments controlling *****************************/ \r\n    const prevState = useRef(\"\")\r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\"].includes(StateMachineState)) {\r\n        oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE CLICKED\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'1', sent_ind:-1});\r\n      } else if (StateMachineState === \"REVISE HOVER\"){\r\n        oldAlignmentStateHandler({event:undefined, newValue:'3', sent_ind:-1});\r\n      }\r\n      prevState.current = StateMachineState;\r\n    }, [StateMachineState, AlignmentCount]);\r\n    /********************************************************************************/\r\n    useEffect(() => {\r\n      console.log(`CurrSentInd is updated and is now ${CurrSentInd}`)\r\n      console.log('doc_json:')\r\n      console.log(doc_json)\r\n      console.log('t_doc_json:')\r\n      console.log(t_doc_json)\r\n    }, [CurrSentInd]);\r\n    \r\n    \r\n    \r\n    /******************* highlighting while choosing spans to help *******************/ \r\n\r\n\r\n    useEffect(() => {\r\n      if (DocOnMouseDownID !== \"-1\"){\r\n        setDocOnMouseDownActivated(true)\r\n      } else if (DocOnMouseDownID === \"-1\"){\r\n        setDocOnMouseDownActivated(false)\r\n      } \r\n      \r\n      if (SummaryOnMouseDownID !== \"-1\") {\r\n        setSummaryOnMouseDownActivated(true)\r\n      } else {\r\n        setSummaryOnMouseDownActivated(false)\r\n      }\r\n    }, [DocOnMouseDownID,SummaryOnMouseDownID]);\r\n    \r\n    //AVIVSL: TODO: find way to reset the whole hovering process when the onMouseUp occurs outside of the text (maybe when docOnMouseDownActivated===false or summaryOnMouseDownActivated===false) --> maybe use a useRef to remember which one was the one activated - summary or doc?\r\n    useEffect(() => {\r\n      if ([\"ANNOTATION\", \"SENTENCE END\", \"SUMMARY END\", \"REVISE CLICKED\", \"SENTENCE START\"].includes(StateMachineState)){\r\n        if(docOnMouseDownActivated) {\r\n          console.log(`DocOnMouseDownID is ${DocOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (DocOnMouseDownID > hoverActivatedId) ? hoverActivatedId : DocOnMouseDownID;\r\n          const max_ID =  (DocOnMouseDownID > hoverActivatedId) ? DocOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setDocJson(doc_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!docOnMouseDownActivated){\r\n          setDocJson(doc_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n        }\r\n        if(summaryOnMouseDownActivated) {\r\n          console.log(`SummaryOnMouseDownID is ${SummaryOnMouseDownID} and hoverActivatedId ia ${hoverActivatedId}`)\r\n          const min_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? hoverActivatedId : SummaryOnMouseDownID;\r\n          const max_ID =  (SummaryOnMouseDownID > hoverActivatedId) ? SummaryOnMouseDownID : hoverActivatedId;\r\n          let chosen_IDs = [];\r\n          for(let i=min_ID; i<=max_ID; i++){\r\n            chosen_IDs.push(i);\r\n          }\r\n          setSummaryJson(summary_json.map((word) => chosen_IDs.includes(word.tkn_id)? {...word, span_alignment_hover:true}:{...word, span_alignment_hover:false}))\r\n        } else if (!summaryOnMouseDownActivated){\r\n          setSummaryJson(summary_json.map((word) => {return {...word, span_alignment_hover:false}}))\r\n          \r\n          if (isRedLettered(hoverActivatedId) && hoverActivatedDocOrSummary === \"summary\") {\r\n            const doc_tkn_ids = doc_json.map((word) => {return word.tkn_id}).filter((doc_id) => {return checkIfLemmasMatch({doc_id:doc_id, summary_ids:[hoverActivatedId], isHover:true})});\r\n            \r\n            console.log(\"red is activated:\")\r\n            console.log(doc_json.filter((word) => {return doc_tkn_ids.includes(word.tkn_id)}).map((word) => {return word.word}))\r\n\r\n            setDocJson(doc_json.map((word) => doc_tkn_ids.includes(word.tkn_id) ? {...word, red_color:true} : {...word, red_color:false}))  \r\n          }  \r\n        }\r\n      }\r\n    }, [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId]);\r\n    /********************************************************************************/ \r\n/**************************************************************************************************************/\r\n\r\n\r\n    useEffect(() => {\r\n\r\n      const t_addWordComponents = (setJson, input_json) => {\r\n        let new_json = [];\r\n        input_json.forEach((word) => {new_json = [...new_json, word];})\r\n        setJson(new_json)\r\n      }\r\n\r\n\r\n      const t_getTasks = () => {\r\n      \r\n\r\n\r\n        // get doc_jsons\r\n        t_addWordComponents(t_setDocJson, t_start_json_file[\"doc\"])\r\n        t_addWordComponents(t_setStartDocJson, t_start_json_file[\"doc\"])\r\n        t_addWordComponents(t_setMiddleDocJson, t_middle_json_file[\"doc\"])\r\n        t_addWordComponents(t_setSentEndDocJson, t_sent_end_json_file[\"doc\"])\r\n        t_addWordComponents(t_setSubmitDocJson, t_submit_json_file[\"doc\"])\r\n        // get summary_jsons\r\n        t_addWordComponents(t_setSummaryJson, t_start_json_file[\"summary\"])\r\n        t_addWordComponents(t_setStartSummaryJson, t_start_json_file[\"summary\"])\r\n        t_addWordComponents(t_setMiddleSummaryJson, t_middle_json_file[\"summary\"])\r\n        t_addWordComponents(t_setSentEndSummaryJson, t_sent_end_json_file[\"summary\"])\r\n        t_addWordComponents(t_setSubmitSummaryJson, t_submit_json_file[\"summary\"])\r\n\r\n\r\n        // let updated_doc_json = [];\r\n        // t_json_file[\"doc\"].forEach((word) => {updated_doc_json = [...updated_doc_json, word];})\r\n        \r\n        \r\n        \r\n        // t_setDocJson(updated_doc_json);\r\n        // t_setOriginDocJson(updated_doc_json);\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        // // get summary_json\r\n        // let updated_summary_json = [];\r\n        // t_json_file[\"summary\"].forEach((word) => {updated_summary_json = [...updated_summary_json, word];})\r\n        // t_setSummaryJson(updated_summary_json);\r\n        // t_setOriginSummaryJson(updated_summary_json);\r\n        // get all the matrices and the paragraph breaks\r\n        t_setAllLemmaMtx(t_start_json_file[\"all_lemma_match_mtx\"]);\r\n        t_setImportantLemmaMtx(t_start_json_file[\"important_lemma_match_mtx\"]);\r\n        t_setDocParagraphBreaks(t_start_json_file[\"doc_paragraph_breaks\"])\r\n        \r\n        \r\n        // get state messages\r\n        t_setStateMessages(tutorial_state_messages)\r\n\r\n        // let updated_state_messages_json = [];\r\n        // tutorial_state_messages.forEach((t_state) => {updated_doc_json = [...updated_doc_json, t_state];})\r\n        // t_setStateMessages(updated_state_messages_json)\r\n        // console.log(\"tutorial_state_messages is:\")\r\n        // console.log(tutorial_state_messages)\r\n\r\n\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n      const g_getTasks = () => {\r\n        const curr_id = '0';\r\n\r\n        g_addDocWordComponents(g_json_file[curr_id][\"doc\"])\r\n        g_addSummaryWordComponents(g_json_file[curr_id][\"summary\"])\r\n        g_setAllLemmaMtx(g_json_file[curr_id][\"all_lemma_match_mtx\"]);\r\n        g_setImportantLemmaMtx(g_json_file[curr_id][\"important_lemma_match_mtx\"]);\r\n        g_setDocParagraphBreaks(g_json_file[curr_id][\"doc_paragraph_breaks\"])\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n          \r\n        }\r\n    \r\n\r\n\r\n      const getTasks = () => {\r\n        const queryString = window.location.search;\r\n        const urlParams = new URLSearchParams(queryString);\r\n\r\n        const curr_id = urlParams.get('id');\r\n        setTaskID(curr_id);\r\n\r\n        addDocWordComponents(json_file[curr_id][\"doc\"])\r\n        addSummaryWordComponents(json_file[curr_id][\"summary\"])\r\n        setAllLemmaMtx(json_file[curr_id][\"all_lemma_match_mtx\"]);\r\n        setImportantLemmaMtx(json_file[curr_id][\"important_lemma_match_mtx\"]);\r\n        setDocParagraphBreaks(json_file[curr_id][\"doc_paragraph_breaks\"])\r\n        fetch(`/`).then(\r\n          res => console.log(res)\r\n        )\r\n          \r\n        }\r\n      t_getTasks();\r\n      g_getTasks();\r\n      getTasks();\r\n    }, [])\r\n\r\n\r\n    const SubmitHandler = (event) => {\r\n      console.log(event);\r\n      alert(\"Submitted!\");\r\n    }\r\n\r\n    const g_SubmitHandler = (event) => {\r\n      alert(\"Submitted!\");\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /*********************************** TO SAVE THE JSONS ******************************** */ \r\n    // function export2txt(words, dir) {\r\n    //   const a = document.createElement(\"a\");\r\n    //   a.href = URL.createObjectURL(new Blob([JSON.stringify(words, null, 2)], {\r\n    //     type: \"text/plain\"\r\n    //   }));\r\n    //   a.setAttribute(\"download\", dir);\r\n    //   document.body.appendChild(a);\r\n    //   a.click();\r\n    //   document.body.removeChild(a);\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //   console.log(\"saving current values\")\r\n\r\n\r\n    //   export2txt({\"doc\":doc_json, \"summary\":summary_json, \"all_lemma_match_mtx\":all_lemma_match_mtx, \"important_lemma_match_mtx\":important_lemma_match_mtx, \"doc_paragraph_breaks\":doc_paragraph_breaks}, \"tutorial_half_way_data_for_mturk.json\")\r\n\r\n    //    // export2txt(doc_json, \"doc_json.json\")\r\n    //    // export2txt(summary_json, \"summary_json.json\")\r\n    // }, [StateMachineState]);\r\n    /*************************************************************************************** */\r\n\r\n\r\n\r\n  return (\r\n    <Router>\r\n      <div className='container-background'>\r\n        <Routes>\r\n          {/* <Route path='/' element={<StartPage />} /> */}\r\n          {/* <Route path='/homepage' element={<StartPage />} /> */}\r\n          <Route path='/instructions' element={<Instructions />} />\r\n          <Route path='/tutorial' element=  {<Tutorial doc_json = {t_doc_json} \r\n                                                       setDocJson = {t_setDocJson}\r\n                                                       t_start_doc_json = {t_start_doc_json} \r\n                                                       t_middle_doc_json = {t_middle_doc_json}\r\n                                                       t_sent_end_doc_json = {t_sent_end_doc_json}\r\n                                                       t_submit_doc_json = {t_submit_doc_json}\r\n                                                       summary_json = {t_summary_json} \r\n                                                       setSummaryJson = {t_setSummaryJson}\r\n                                                       t_start_summary_json = {t_start_summary_json}\r\n                                                       t_middle_summary_json = {t_middle_summary_json}\r\n                                                       t_sent_end_summary_json = {t_sent_end_summary_json}\r\n                                                       t_submit_summary_json = {t_submit_summary_json}\r\n                                                       all_lemma_match_mtx = {t_all_lemma_match_mtx} \r\n                                                       setAllLemmaMtx = {t_setAllLemmaMtx}\r\n                                                       important_lemma_match_mtx = {t_important_lemma_match_mtx} \r\n                                                       setImportantLemmaMtx = {t_setImportantLemmaMtx}\r\n                                                       doc_paragraph_breaks = {t_doc_paragraph_breaks} \r\n                                                       setDocParagraphBreaks = {t_setDocParagraphBreaks} \r\n                                                       t_state_messages = {t_state_messages} \r\n                                              />}\r\n          />\r\n\r\n\r\n\r\n\r\n          <Route path='/guidedAnnotation' element={<Annotation\r\n                                              isTutorial={false}\r\n                                              isGuidedAnnotation={true} \r\n                                              task_id={'0'}\r\n                                              doc_json = {g_doc_json}\r\n                                              summary_json = {g_summary_json}\r\n                                              all_lemma_match_mtx = {g_all_lemma_match_mtx}\r\n                                              important_lemma_match_mtx = {g_important_lemma_match_mtx}\r\n                                              doc_paragraph_breaks = {g_doc_paragraph_breaks}\r\n                                              StateMachineState = {g_StateMachineState}\r\n                                              SetStateMachineState = {g_SetStateMachineState}\r\n                                              handleErrorOpen = {g_handleErrorOpen}\r\n                                              isPunct = {isPunct}\r\n                                              toggleSummarySpanHighlight = {g_toggleSummarySpanHighlight}\r\n                                              toggleDocSpanHighlight = {g_toggleDocSpanHighlight}\r\n                                              boldState = {g_boldState}\r\n                                              boldStateHandler = {g_boldStateHandler}\r\n                                              SubmitHandler = {g_SubmitHandler}\r\n                                              CurrSentInd = {g_CurrSentInd}\r\n                                              InfoMessage = {g_InfoMessage}\r\n                                              MachineStateHandlerWrapper = {g_MachineStateHandlerWrapper}\r\n                                              AlignmentCount = {g_AlignmentCount} \r\n                                              SetAlignmentCount = {g_SetAlignmentCount}\r\n                                              oldAlignmentState = {g_oldAlignmentState}\r\n                                              oldAlignmentStateHandler = {g_oldAlignmentStateHandler}\r\n                                              hoverHandler = {g_hoverHandler}\r\n                                              DocOnMouseDownID = {g_DocOnMouseDownID}\r\n                                              SetDocOnMouseDownID = {g_SetDocOnMouseDownID}\r\n                                              SummaryOnMouseDownID = {g_SummaryOnMouseDownID}\r\n                                              SetSummaryOnMouseDownID = {g_SetSummaryOnMouseDownID}\r\n                                              setDocOnMouseDownActivated = {g_setDocOnMouseDownActivated}\r\n                                              docOnMouseDownActivated = {g_docOnMouseDownActivated}\r\n                                              setSummaryOnMouseDownActivated = {g_setSummaryOnMouseDownActivated}\r\n                                              summaryOnMouseDownActivated = {g_summaryOnMouseDownActivated}\r\n                                              setHoverActivatedId = {g_setHoverActivatedId}\r\n                                              setHoverActivatedDocOrSummary = {g_setHoverActivatedDocOrSummary}\r\n                                              g_StateMachineStateIndex = {g_StateMachineStateIndex}\r\n                                              guidingAnnotationAlertText = {guidingAnnotationAlertText}\r\n                                              guidingAnnotationAlertTitle = {guidingAnnotationAlertTitle} \r\n                                              guidingAnnotationAlertType = {guidingAnnotationAlertType}\r\n                                              closeGuidingAnnotationAlert = {closeGuidingAnnotationAlert}\r\n                                              t_StateMachineStateId = {undefined}\r\n                                              />} \r\n            />\r\n\r\n          <Route path='/' element={<Annotation \r\n                                              isTutorial={false}\r\n                                              isGuidedAnnotation={false} \r\n                                              task_id={task_id} \r\n                                              doc_json = {doc_json}\r\n                                              summary_json = {summary_json}\r\n                                              all_lemma_match_mtx = {all_lemma_match_mtx}\r\n                                              important_lemma_match_mtx = {important_lemma_match_mtx}\r\n                                              doc_paragraph_breaks = {doc_paragraph_breaks}\r\n                                              StateMachineState = {StateMachineState}\r\n                                              SetStateMachineState = {SetStateMachineState}\r\n                                              handleErrorOpen = {handleErrorOpen}\r\n                                              isPunct = {isPunct}\r\n                                              toggleSummarySpanHighlight = {toggleSummarySpanHighlight}\r\n                                              toggleDocSpanHighlight = {toggleDocSpanHighlight}\r\n                                              boldState = {boldState}\r\n                                              boldStateHandler = {boldStateHandler}\r\n                                              SubmitHandler = {SubmitHandler}\r\n                                              CurrSentInd = {CurrSentInd}\r\n                                              InfoMessage = {InfoMessage}\r\n                                              MachineStateHandlerWrapper = {MachineStateHandlerWrapper}\r\n                                              AlignmentCount = {AlignmentCount} \r\n                                              SetAlignmentCount = {SetAlignmentCount}\r\n                                              oldAlignmentState = {oldAlignmentState}\r\n                                              oldAlignmentStateHandler = {oldAlignmentStateHandler}\r\n                                              hoverHandler = {hoverHandler}\r\n                                              DocOnMouseDownID = {DocOnMouseDownID}\r\n                                              SetDocOnMouseDownID = {SetDocOnMouseDownID}\r\n                                              SummaryOnMouseDownID = {SummaryOnMouseDownID}\r\n                                              SetSummaryOnMouseDownID = {SetSummaryOnMouseDownID}\r\n                                              setDocOnMouseDownActivated = {setDocOnMouseDownActivated}\r\n                                              docOnMouseDownActivated = {docOnMouseDownActivated}\r\n                                              setSummaryOnMouseDownActivated = {setSummaryOnMouseDownActivated}\r\n                                              summaryOnMouseDownActivated = {summaryOnMouseDownActivated}\r\n                                              setHoverActivatedId = {setHoverActivatedId}\r\n                                              setHoverActivatedDocOrSummary = {setHoverActivatedDocOrSummary}\r\n                                              g_StateMachineStateIndex = {g_StateMachineStateIndex}\r\n                                              guidingAnnotationAlertText = {guidingAnnotationAlertText}\r\n                                              guidingAnnotationAlertTitle = {guidingAnnotationAlertTitle} \r\n                                              guidingAnnotationAlertType = {guidingAnnotationAlertType}\r\n                                              closeGuidingAnnotationAlert = {closeGuidingAnnotationAlert}\r\n                                              t_StateMachineStateId = {undefined}\r\n                                              />} \r\n            />\r\n\r\n        </Routes>\r\n      </div>\r\n      <Snackbar open={error_message !== \"\"} autoHideDuration={6000} onClose={handleErrorClose}>\r\n        <Alert onClose={handleErrorClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {error_message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={g_error_message !== \"\"} autoHideDuration={6000} onClose={g_handleErrorClose}>\r\n        <Alert onClose={g_handleErrorClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {g_error_message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation.js",["122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\StartPage.js",["145","146","147","148"],[],"import { Link } from 'react-router-dom';\r\nimport * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\n\r\n\r\nconst pages = {'Instructions': 'instructions', 'Guided Annotation': 'guidedAnnotation'}; \r\n\r\n\r\n\r\nconst StartPage = () => {\r\n  return (\r\n    <>\r\n      {/* <header className='GeneralPageHeader'>\r\n          <h2>Highlighting Extraction UI</h2>\r\n      </header> */}\r\n\r\n      <AppBar id=\"startPageAppBar\" position=\"static\">\r\n      <div>\r\n        <Container maxWidth=\"xl\">\r\n          <Toolbar disableGutters>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            sx={{ my: 2, flexGrow: 1, display: {xs: 'flex', md: 'none' } }}\r\n          >\r\n            Highlighting Extraction UI\r\n          </Typography>\r\n          </Toolbar>\r\n        </Container>\r\n      </div>\r\n    </AppBar>\r\n\r\n    <div className=\"jumbotron text-center StartPageBody\" /*className='StartPageBody'*/>\r\n        <div className='StartPageText'>\r\n          <p id=\"StartPageTitle\">\r\n            Welcome to\r\n            <br></br>\r\n            the Highlight Extraction UI\r\n          </p>\r\n          <p id=\"StartPageContent\">Before starting annotating, please read the Instructions first and practice using the Guided Annotation option.</p>\r\n\r\n          <div id=\"ButtonGroupBox\">\r\n            {/* <ButtonGroup> */}\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"primary\" component={Link} to={'/instructions'} >Instructions</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"secondary\" component={Link} to={'/guidedAnnotation'}>Guided<br></br>Annotation</Button>\r\n              <Button className=\"StartPageButton\" variant=\"contained\" color=\"success\" component={Link} to={'/annotation'}>Annotation</Button>\r\n            {/* </ButtonGroup> */}\r\n          </div>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StartPage","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Instructions.js",["149"],[],"import BackButton from './BackButton'\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\nimport start_window_img from '../data/Instructions_img/start.JPG'; // Tell webpack this JS file uses this image\r\nimport some_span_chosen_img from '../data/Instructions_img/some_span_chosen.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_img from '../data/Instructions_img/appbar.JPG'; // Tell webpack this JS file uses this image\r\nimport revise_hover_img from '../data/Instructions_img/revise_hover.png'; // Tell webpack this JS file uses this image\r\nimport revise_clicked_img from '../data/Instructions_img/revise_clicked.JPG'; // Tell webpack this JS file uses this image\r\nimport appbar_finish_revision_img from '../data/Instructions_img/appbar_finish_revision.JPG'; // Tell webpack this JS file uses this image\r\nimport submit_img from '../data/Instructions_img/submit.JPG'; // Tell webpack this JS file uses this image\r\n\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <>\r\n        <ResponsiveAppBar\r\n           title={\"Instructions\"}\r\n        />\r\n      <div>\r\n        <section  className=\"InstructionsBody\">\r\n          <h4>\r\n            In this task, you are presented with a document and its summary. \r\n            <br></br>\r\n            The summary was constructed by an expert summarizer who first highlighted important information in the document and then merged it in a coherent manner. \r\n            <br></br>\r\n            Your goal is to locate those spans the summarizer highlighted.\r\n            <br></br>\r\n            You will first be presented with the summary and document without any extra markings:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={start_window_img} alt=\"start\" />\r\n            <br></br>\r\n            We encourage you to skim through the summary so you are familiar with its content, before starting.\r\n            <br></br>\r\n            You will work sentence by sentence, where you will not be able to continue to the next sentence before \"highlighting\" all of the current sentence's words.\r\n            <br></br>\r\n            To help you focus, the sentence you need to work on will be in bold.\r\n            <br></br>\r\n            You goal is to choose alignments between the summary and the doc. To help you, when highlighting a span from the document,  all the words in the document who have identical or relating words to that span will be <text className=\"boldfaced-word\">boldfaced and increased:</text>\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={some_span_chosen_img} alt=\"some_span_chosen\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            If no span was chosen, all the words in the document who have identical or relating words in current sentence will be <text className=\"boldfaced-word\">boldfaced and increased</text>.\r\n            <br></br>\r\n            At any given time, you can adjust the level of bolding, using the slider at the top-right corner of the UI:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_img} alt=\"appbar\" />\r\n            <br></br>\r\n            with the following bolding options:\r\n            <ul>\r\n              <li >No bolding (leftmost)</li>\r\n              <li>Current span bolding (middle)</li>\r\n              <li>Current sentence bolding (rightmost)</li>\r\n            </ul>\r\n            <br></br>\r\n            You will work in iterations:\r\n            <ol>\r\n              <li>\r\n                Start by choosing a subspan of the summary sentence which contains at least one event (by highlighting it).\r\n                <br></br>\r\n                This will boldface all the words in the document identical or similar to those in the span.\r\n              </li>\r\n\r\n              <li>Then, highlight spans in the document aligning to the information in the span.</li>\r\n              <li>Before heading on to the next span, please make sure you covered all the span's information and only it. If needed, make adjustments to the highlightings.</li>\r\n            </ol>\r\n            When finishing all the summary document, wou would be able to continue to the next sentence.\r\n            You may follow these questions to help you decide what span to choose:\r\n            <ul>\r\n              <li>Is the information presented in the span missing something? Or is it self-informative?</li>\r\n              <li>Is the information presented in the span specific? Or is it too general?</li>\r\n            </ul>\r\n            For long sentences, we strongly advice against highlighting the full sentence all at once, as doing so could lead to missing small details.\r\n            <br></br>\r\n            Alternatively, if a sentence is short enough, aligning it all at once is acceptable.\r\n            <br></br>\r\n            When choosing a span, a general rule of thumb should be a span that when reading it, you manage to remember all the details in it.\r\n            <br></br>\r\n            For example, the sentence:\r\n          </h4>\r\n          \r\n          <h3>\r\n            Sixty Forest Service firefighters brought Michigan's four-day Hiawatha\r\n            <br></br> \r\n            National Forest fire under control after it burned 1100 acres of woodlands.\r\n          </h3>\r\n\r\n          <h4>\r\n            can be seperated like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought Michigan's four-day Hiawatha National Forest fire under control</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n\r\n            Or like this:\r\n\r\n            <ol>\r\n              <li>Sixty Forest Service firefighters brought ... fire under control</li>\r\n              <li>Michigan's four-day Hiawatha National Forest fire</li>\r\n              <li>fire under control after it burned 1100 acres of woodlands.</li>\r\n            </ol>\r\n            and shouldn't be handled all at once.\r\n            <br></br>\r\n            <b> Notice! Make sure that what you highlight in the document covers all the information in the summary and only it.</b>\r\n            <br></br>\r\n            After choosing and confirming alignments, they will be shown in light-gray color (in juxtaposition to currenly chosen alignments, which are in yellow).\r\n             At any given time, you can adjust how much of previously chosen alignments to see, using the slider adjacent to the bolding slider (see image above), with the following options:\r\n            <ul>\r\n              <li>No previous highlightings (leftmost)</li>\r\n              <li>Only Current sentence's previous highlightings (middle)</li>\r\n              <li>All previous highlightings (rightmost)</li>\r\n            </ul>\r\n            \r\n            In addition, you can also revise old highlightings, by clicking the \"REVISE\" button that is located on the right side of the app-bar (see image above). \r\n            <br></br>\r\n            When in \"Revise\" mode you can hover over old highlightings, and their alignments will show to help you choose:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_hover_img} alt=\"revise_hover\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            By clicking one of them, only the chosen alignment will stay, which you could then revise:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={revise_clicked_img} alt=\"revise_clicked\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n            When finishing revising, you will need to return to the main session to continue, by clicking the \"FINISH REVISION\" button at the top of the window:\r\n            <br></br>\r\n            <img className=\"instruction_images\" src={appbar_finish_revision_img} alt=\"appbar_finish_revision\" />\r\n            <br></br>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            Finally, after finishing the last summary sentence, you will be able to submit:\r\n            <img className=\"instruction_images\" src={submit_img} alt=\"submit\" />\r\n          </h4>\r\n        </section>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Instructions\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Annotation_event_handlers.js",["150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],[],"const MachineStateHandler = (summary_json,\r\n                                 StateMachineState, SetStateMachineState,\r\n                                 SetInfoMessage, handleErrorOpen, isPunct,\r\n                                 CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n                                 AlignmentCount, SetAlignmentCount,\r\n                                 approveHighlightHandler,\r\n                                 clickedWordInfo, forceState, \r\n                                 StartReviseStateHandler, ExitReviseHandler,\r\n                                 ReviseChooseAlignHandler,\r\n                                 isBackBtn,\r\n                                 setPrevSummaryJsonRevise, setPrevDocJsonRevise) => {\r\n\r\n\r\n\r\n    // forceState: \"SENTENCE END\"\r\n    if (forceState === \"SENTENCE END\"){\r\n      console.log(`forceState: \\\"SENTENCE END\\\"`);\r\n      SetStateMachineState(\"SENTENCE END\");\r\n      SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n    }\r\n\r\n    // forceState: \"SUMMARY END\"\r\n    else if (forceState === \"SUMMARY END\"){\r\n      console.log(`forceState: \\\"SUMMARY END\\\"`);\r\n      SetStateMachineState(\"SUMMARY END\");\r\n      SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n    }\r\n\r\n    // forceState: \"ANNOTATION\"\r\n    else if (forceState === \"ANNOTATION\"){\r\n      console.log(`forceState: \\\"ANNOTATION\\\"`);\r\n      SetStateMachineState(\"ANNOTATION\");\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n    }\r\n\r\n    // forceState: \"REVISE HOVER\"\r\n    else if (forceState === \"REVISE HOVER\"){\r\n      StartReviseStateHandler(isBackBtn);\r\n      console.log(`forceState: \\\"REVISE HOVER\\\"`);\r\n      SetStateMachineState(\"REVISE HOVER\");\r\n      SetInfoMessage(\"Choose alignment to revise.\");\r\n    }\r\n\r\n    // forceState: \"FINISH REVISION\" --> namely go back to state before revision with all-highlighted updated\r\n    else if (forceState === \"FINISH REVISION\"){\r\n      const prev_state = ExitReviseHandler();\r\n      if ([\"ANNOTATION\", \"SENTENCE START\".includes(prev_state)]) {\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n      } else if (prev_state === \"SENTENCE END\"){\r\n        SetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n      } else if (prev_state === \"SUMMARY END\") {\r\n        SetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n      } else{\r\n        alert(`Coming back from Revision to an unsupported state... state is ${prev_state}`);\r\n      }\r\n    }\r\n\r\n    // \"START\" state --> \"ANNOTATION\" state\r\n    else if (StateMachineState === \"START\"){\r\n        console.log(`Old state: \\\"START\\\"; New state: \\\"ANNOTATION\\\" with SentInd=${CurrSentInd+1}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        SetSummaryShadow(CurrSentInd+1);\r\n        SetCurrSentInd(CurrSentInd+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n    }\r\n    \r\n    // \"ANNOTATION\" state --> \"ANNOTATION\" with next alignment\r\n    else if (StateMachineState === \"ANNOTATION\"){\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      console.log(`Old state: \\\"ANNOTATION\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n    }\r\n\r\n    // \"SENTENCE END\" state --> \"SENTENCE START\" \r\n    else if (StateMachineState === \"SENTENCE END\"){\r\n      // adding last sentence alignment\r\n      console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n      approveHighlightHandler();\r\n      SetAlignmentCount(AlignmentCount+1);\r\n\r\n      // moving to next sentence\r\n      // update of summary sentence shadow is done in App.js in a designated useEffect\r\n      console.log(`Old state: \\\"SENTENCE END\\\"; New state: \\\"SENTENCE START\\\" with SentInd=${CurrSentInd+1}.`);\r\n      SetStateMachineState(\"SENTENCE START\");\r\n      SetCurrSentInd(CurrSentInd+1);\r\n      SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n    }\r\n      // \"SENTENCE START\" state --> \"ANNOTATION\" with next alignment \r\n      else if (StateMachineState === \"SENTENCE START\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"SENTENCE START\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\n        SetStateMachineState(\"ANNOTATION\");\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n  \r\n      }\r\n      // \"SUMMARY END\" state --> \"SUBMIT\" state \r\n      else if (StateMachineState === \"SUMMARY END\"){\r\n        console.log(`Old state: \\\"SUMMARY END\\\"; New state: \\\"SUBMIT\\\"`);\r\n        SetStateMachineState(\"SUBMIT\");\r\n        SetInfoMessage(\"\");\r\n      }\r\n\r\n      // \"REVISE HOVER\" state --> \"REVISE CLICKED\" state \r\n      else if (StateMachineState === \"REVISE HOVER\"){\r\n        console.log(`Old state: \\\"REVISE HOVER\\\"; New state: \\\"REVISE CLICKED\\\"`);\r\n        ReviseChooseAlignHandler(clickedWordInfo);\r\n        SetStateMachineState(\"REVISE CLICKED\");\r\n        SetInfoMessage(\"\");\r\n      }\r\n\r\n      // \"REVISE CLICKED\" state --> \"REVISE HOVER\" state \r\n      else if (StateMachineState === \"REVISE CLICKED\"){\r\n        console.log(`curr AlignmentCount is ${AlignmentCount}`);\r\n        console.log(`Old state: \\\"REVISE CLICKED\\\"; New state: \\\"REVISE HOVER\\\"`);\r\n        SetStateMachineState(\"REVISE HOVER\");\r\n        approveHighlightHandler();\r\n        SetAlignmentCount(AlignmentCount+1);\r\n        SetInfoMessage(\"Choose alignment to revise.\");\r\n        setPrevSummaryJsonRevise([]);\r\n        setPrevDocJsonRevise([]);\r\n      }\r\n  }\r\n\r\n  MachineStateHandler.defaultProps = {\r\n    forceState: '',\r\n    isBackBtn: false\r\n  }\r\n\r\n\r\n\r\n  /************************************************************************************************************************************/\r\n\r\n\r\n  const g_MachineStateHandler = (summary_json,\r\n    StateMachineState, SetStateMachineState,\r\n    SetInfoMessage, handleErrorOpen, isPunct,\r\n    CurrSentInd, SetCurrSentInd, SetSummaryShadow,\r\n    AlignmentCount, SetAlignmentCount,\r\n    approveHighlightHandler,\r\n    clickedWordInfo, forceState, \r\n    StartReviseStateHandler, ExitReviseHandler,\r\n    ReviseChooseAlignHandler,\r\n    isBackBtn,\r\n    setPrevSummaryJsonRevise, setPrevDocJsonRevise,\r\n    g_StateMachineStateIndex, g_setStateMachineStateIndex) => {\r\n\r\n\r\n\r\n// forceState: \"SENTENCE END\"\r\nif (forceState === \"SENTENCE END\"){\r\nconsole.log(`forceState: \\\"SENTENCE END\\\"`);\r\nSetStateMachineState(\"SENTENCE END\");\r\nSetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n}\r\n\r\n// forceState: \"SUMMARY END\"\r\nelse if (forceState === \"SUMMARY END\"){\r\nconsole.log(`forceState: \\\"SUMMARY END\\\"`);\r\nSetStateMachineState(\"SUMMARY END\");\r\nSetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n}\r\n\r\n// forceState: \"ANNOTATION\"\r\nelse if (forceState === \"ANNOTATION\"){\r\nconsole.log(`forceState: \\\"ANNOTATION\\\"`);\r\nSetStateMachineState(\"ANNOTATION\");\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n}\r\n\r\n// forceState: \"REVISE HOVER\"\r\nelse if (forceState === \"REVISE HOVER\"){\r\nStartReviseStateHandler(isBackBtn);\r\nconsole.log(`forceState: \\\"REVISE HOVER\\\"`);\r\nSetStateMachineState(\"REVISE HOVER\");\r\nSetInfoMessage(\"Choose alignment to revise.\");\r\n}\r\n\r\n// forceState: \"FINISH REVISION\" --> namely go back to state before revision with all-highlighted updated\r\nelse if (forceState === \"FINISH REVISION\"){\r\nconst prev_state = ExitReviseHandler();\r\nif ([\"ANNOTATION\", \"SENTENCE START\".includes(prev_state)]) {\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n} else if (prev_state === \"SENTENCE END\"){\r\nSetInfoMessage(\"Finished sentence highlighting. When ready, press \\\"NEXT SENTENCE\\\".\");\r\n} else if (prev_state === \"SUMMARY END\") {\r\nSetInfoMessage(\"Finished summary highlighting. When ready, press \\\"SUBMIT\\\".\");\r\n} else{\r\nalert(`Coming back from Revision to an unsupported state... state is ${prev_state}`);\r\n}\r\n}\r\n\r\n// \"START\" state --> \"ANNOTATION\" state\r\nelse if (StateMachineState === \"START\"){\r\nconsole.log(`Old state: \\\"START\\\"; New state: \\\"ANNOTATION\\\" with SentInd=${CurrSentInd+1}.`);\r\nSetStateMachineState(\"ANNOTATION\");\r\nSetSummaryShadow(CurrSentInd+1);\r\nSetCurrSentInd(CurrSentInd+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n\r\n// g_setStateMachineStateIndex(1.0)\r\n}\r\n\r\n// \"ANNOTATION\" state --> \"ANNOTATION\" with next alignment\r\nelse if (StateMachineState === \"ANNOTATION\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"ANNOTATION\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n}\r\n\r\n// \"SENTENCE END\" state --> \"SENTENCE START\" \r\nelse if (StateMachineState === \"SENTENCE END\"){\r\n// adding last sentence alignment\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\n\r\n// moving to next sentence\r\n// update of summary sentence shadow is done in App.js in a designated useEffect\r\nconsole.log(`Old state: \\\"SENTENCE END\\\"; New state: \\\"SENTENCE START\\\" with SentInd=${CurrSentInd+1}.`);\r\nSetStateMachineState(\"SENTENCE START\");\r\nSetCurrSentInd(CurrSentInd+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n}\r\n// \"SENTENCE START\" state --> \"ANNOTATION\" with next alignment \r\nelse if (StateMachineState === \"SENTENCE START\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"SENTENCE START\\\"; New state: \\\"ANNOTATION\\\" with AlignmentCount=${AlignmentCount}.`);\r\nSetStateMachineState(\"ANNOTATION\");\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Highlight document and summary alignment and then press \\\"CONFIRM\\\".\");\r\n\r\n}\r\n// \"SUMMARY END\" state --> \"SUBMIT\" state \r\nelse if (StateMachineState === \"SUMMARY END\"){\r\nconsole.log(`Old state: \\\"SUMMARY END\\\"; New state: \\\"SUBMIT\\\"`);\r\nSetStateMachineState(\"SUBMIT\");\r\nSetInfoMessage(\"\");\r\n}\r\n\r\n// \"REVISE HOVER\" state --> \"REVISE CLICKED\" state \r\nelse if (StateMachineState === \"REVISE HOVER\"){\r\nconsole.log(`Old state: \\\"REVISE HOVER\\\"; New state: \\\"REVISE CLICKED\\\"`);\r\nReviseChooseAlignHandler(clickedWordInfo);\r\nSetStateMachineState(\"REVISE CLICKED\");\r\nSetInfoMessage(\"\");\r\n}\r\n\r\n// \"REVISE CLICKED\" state --> \"REVISE HOVER\" state \r\nelse if (StateMachineState === \"REVISE CLICKED\"){\r\nconsole.log(`curr AlignmentCount is ${AlignmentCount}`);\r\nconsole.log(`Old state: \\\"REVISE CLICKED\\\"; New state: \\\"REVISE HOVER\\\"`);\r\nSetStateMachineState(\"REVISE HOVER\");\r\napproveHighlightHandler();\r\nSetAlignmentCount(AlignmentCount+1);\r\nSetInfoMessage(\"Choose alignment to revise.\");\r\nsetPrevSummaryJsonRevise([]);\r\nsetPrevDocJsonRevise([]);\r\n}\r\n}\r\n\r\ng_MachineStateHandler.defaultProps = {\r\nforceState: '',\r\nisBackBtn: false\r\n}\r\n\r\n\r\n  export { MachineStateHandler, g_MachineStateHandler }\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\DocWord.js",["222"],[],"import Typography from '@mui/material/Typography';\r\n\r\nconst DocWord = ({ word_json, doc_paragraph_breaks, StateMachineState, DocMouseClickHandlerWrapper, hoverHandlerWrapper, DocOnMouseDownHandler, DocOnMouseUpHandler, setDocOnMouseDownActivated, docOnMouseDownActivated, setHoverActivatedId, ctrlButtonDown, setHoverActivatedDocOrSummary }) => {\r\n    // const XOR = (a,b) => {\r\n    //   return ( ( a && !b ) || ( !a && b ) )\r\n    // }\r\n\r\n    // const is_span_highlighted = () => {\r\n    //   if (ctrlButtonDown) {\r\n    //     return word_json.span_highlighted && !word_json.span_alignment_hover\r\n    //   } \r\n    //   else {\r\n    //     return word_json.span_highlighted\r\n    //   }\r\n    // }\r\n\r\n    const show_word = () => {\r\n      if (word_json.word !== \"\\n\"){\r\n        return word_json.word\r\n      } else {\r\n        return \"\"\r\n      }\r\n    }\r\n  \r\n    // the \"&nbsp;\" is to add space after word\r\n    return (\r\n      <div>\r\n        {/* {(word_json.word !== \"\\n\") && (\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted) ? 'old-aligned-word': ''}\r\n                        ${word_json.boldfaced ? 'boldfaced-word': 'normal-sized-word'}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\") ? 'cursor-span' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        ${(word_json.red_color) ? 'red-color-word': 'text-muted'}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"0\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {word_json.word}\r\n              </nobr>&nbsp;\r\n          </div>\r\n        )}\r\n\r\n        {(word_json.word === \"\\n\") && (\r\n          <span className=\"br-class\"></span>\r\n        )} */}\r\n\r\n          <div\r\n            className={`docWord noselect\r\n                        ${(word_json.span_highlighted && !word_json.span_alignment_hover) ?  'span-highlighted-word': ''} \r\n                        ${(word_json.span_alignment_hover && !ctrlButtonDown) ?  'span-aligned-hover-word': ''} \r\n                        ${(word_json.old_alignments && !word_json.span_highlighted) ? 'old-aligned-word': ''}\r\n                        ${(word_json.red_color && !docOnMouseDownActivated) ? 'red-color-word': ''}\r\n                        ${(word_json.boldfaced && !word_json.red_color) ? 'boldfaced-word': ''}\r\n                        ${(!word_json.boldfaced && !word_json.red_color) ? 'text-muted': ''}\r\n                        ${(word_json.old_alignment_hover && StateMachineState===\"REVISE HOVER\") ? 'old-aligned-hover-word': ''}\r\n                        ${(StateMachineState !== \"REVISE HOVER\") ? 'cursor-span-doc' : ''}\r\n                        ${(word_json.old_alignments && StateMachineState===\"REVISE HOVER\") ? 'cursor-pointer': ''}\r\n                        `}\r\n            \r\n            style={{fontFamily: \"IBM Plex Sans\", lineHeight: \"1\"}}\r\n            onClick={() => DocMouseClickHandlerWrapper(word_json.tkn_id)}\r\n            onMouseEnter={() => {setHoverActivatedId(word_json.tkn_id); setHoverActivatedDocOrSummary(\"doc\"); hoverHandlerWrapper({inOrOut:\"in\", curr_alignment_id:word_json.alignment_id[0], isSummary:false})}}\r\n            onMouseLeave={() => {setHoverActivatedId(-1); hoverHandlerWrapper({inOrOut:\"out\", curr_alignment_id:word_json.alignment_id[0], tkn_id:word_json.tkn_id, isSummary:false})}}\r\n            onMouseDown={() => DocOnMouseDownHandler(word_json.tkn_id)}\r\n            onMouseUp={() => DocOnMouseUpHandler()}\r\n          >\r\n              <nobr>\r\n                {show_word()}\r\n              </nobr>&nbsp;\r\n          </div>\r\n\r\n          {(doc_paragraph_breaks.includes(word_json.tkn_id)) && (\r\n          <span className=\"br-class\"></span>\r\n        )}\r\n\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default DocWord","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\ResponsiveAppBar.js",["223","224","225","226","227","228","229","230"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\BackButton.js",["231"],[],"import { Link } from 'react-router-dom'\r\nimport Button from '@material-ui/core/Button';\r\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\r\nimport ResponsiveAppBar from './ResponsiveAppBar'\r\n\r\nconst BackButton = ({ back_path }) => {\r\n    return (\r\n        <Button component={Link} to={back_path} startIcon={<ArrowBackIosNewIcon />}>\r\n              back\r\n        </Button>\r\n\r\n    )\r\n  }\r\n  \r\n  export default BackButton","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\SummaryWord.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\styled-sliders.js",[],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\GuidedAnnotation_utils.js",["232","233","234","235"],[],"import Alert from 'react-bootstrap/Alert'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ToastHeader from 'react-bootstrap/ToastHeader'\r\nimport ToastBody from 'react-bootstrap/ToastBody'\r\nimport ToastContainer from 'react-bootstrap/ToastContainer'\r\nimport Carousel from 'react-bootstrap/Carousel'\r\n  \r\n  \r\nconst getGuidedAnnotationToastTitle = (g_StateMachineStateIndex) => {\r\nif(g_StateMachineStateIndex===0){return \"START\"}\r\nif(g_StateMachineStateIndex===1.0){return \"CHOOSE SUMMARY SPAN\"}\r\nif(g_StateMachineStateIndex===1.1){return \"BOLDING OPTIONS\"}\r\nif(g_StateMachineStateIndex===1.2){return \"CHOOSE DOCUMENT SPAN\"}\r\n\r\n}\r\n\r\nconst getGuidedAnnotationToastText = (g_StateMachineStateIndex) => {\r\nif(g_StateMachineStateIndex===0){return <p style={{margin:\"0\"}}>To begin, press the \"START\" button</p>}\r\nif(g_StateMachineStateIndex===1.0){return <p style={{margin:\"0\"}}>Choose a summary span from the first sentence to align (by left-clicking at the beginning of the span and leaving the click at its end).<hr></hr>Make sure the span you choose <u>describes at least one scene</u> and that it is <u>not too long</u>.</p>}\r\nif(g_StateMachineStateIndex===1.1){return <p style={{margin:\"0\"}}>Notice how document words related to the words in the highlighted span are in bold, to help you find the alignments.<hr></hr>When nothing is highlighted, all the doc words relating to all the current sentence's words are in bold.<hr></hr>At any given time, you can adust the level of bolding (none, highlighted span or full sentence), by playing with the red slider in the top-right corner of the UI. Try it before continuing.</p>}\r\nif(g_StateMachineStateIndex===1.2){return <p style={{margin:\"0\"}}>Great! Now that you got familiarized with the bolding feature, let's continue with that annotation.<hr></hr>Choose a span from the document aligning to the span you chose from the summary. Make sure you choose a span that covers all the information described in the summary span, and only it.</p>}\r\n}\r\n\r\nconst GuidedAnnotationToast = (toastVisible, setToastVisible, g_StateMachineStateIndex) => {\r\n    return (\r\n      <ToastContainer className=\"p-3\" position=\"middle-center\" style={{zIndex:\"1\"}}>\r\n        <Toast onClose={() => setToastVisible(false)} show={toastVisible} className=\"d-inline-block m-1\" bg='danger'>\r\n          <Toast.Header  style={{ color:\"black\", fontSize:\"x-large\"}}>\r\n            <strong className=\"me-auto\">{getGuidedAnnotationToastTitle(g_StateMachineStateIndex)}</strong>\r\n            <small>{g_StateMachineStateIndex}</small>\r\n          </Toast.Header>\r\n          <Toast.Body style={{color:\"white\", fontSize:\"large\", fontFamily:\"sans-serif\"}}>\r\n            {getGuidedAnnotationToastText(g_StateMachineStateIndex)}\r\n          </Toast.Body>\r\n        </Toast>\r\n      </ToastContainer>\r\n    )}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst summarySpanIsOk = (g_StateMachineStateIndex, tkn_ids) => {\r\n    if(g_StateMachineStateIndex===1.0){\r\n        if (tkn_ids.filter((tkn_id) => {return tkn_id>20}).length !== 0) {\r\n            return \"too long\"\r\n        } else if (Array.from(Array(20).keys()).filter((tkn_id) => {return !tkn_ids.includes(tkn_id)}).length !== 0){\r\n            return \"too short\"\r\n        } else {\r\n            return \"good\"\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst guidingAnnotationAlert = (guidingAnnotationAlertText, guidingAnnotationAlertTitle, guidingAnnotationAlertType, closeGuidingAnnotationAlert) => {\r\n    return (\r\n        <Modal \r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            id={`guidingAnnotationAlert-${guidingAnnotationAlertType}`}\r\n            centered\r\n            show={true} \r\n            onHide={closeGuidingAnnotationAlert}\r\n            >\r\n            <Modal.Header className={`alert-${guidingAnnotationAlertType} alert-heading h4`} style={{ marginBottom:\"0\"}} closeButton>\r\n                <Modal.Title style={{fontSize:\"xx-large\"}}>{guidingAnnotationAlertTitle}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body  style={{fontSize:\"x-large\"}} className={`alert-${guidingAnnotationAlertType}`}>{guidingAnnotationAlertText}</Modal.Body>\r\n      </Modal>\r\n      ); \r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst g_StateMachineStateIndexHandler = (g_StateMachineStateIndex, g_setStateMachineStateIndex) => {\r\n    console.log(`g_StateMachineStateIndex is ${g_StateMachineStateIndex}`)\r\n    if(g_StateMachineStateIndex===0) {\r\n        g_setStateMachineStateIndex(1.0);\r\n    } else if (g_StateMachineStateIndex===1.0) {\r\n        g_setStateMachineStateIndex(1.1)\r\n    } else if (g_StateMachineStateIndex===1.1) {\r\n        g_setStateMachineStateIndex(1.2)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport { getGuidedAnnotationToastTitle, getGuidedAnnotationToastText, GuidedAnnotationToast, summarySpanIsOk, guidingAnnotationAlert, g_StateMachineStateIndexHandler }\r\n","C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial.js",["236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256"],[],"C:\\Users\\aviv\\OneDrive\\Desktop\\highlights-extract-app\\src\\components\\Tutorial_utils.js",[],[],{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":7,"column":8,"nodeType":"263","messageId":"264","endLine":7,"endColumn":17},{"ruleId":"261","severity":1,"message":"265","line":10,"column":8,"nodeType":"263","messageId":"264","endLine":10,"endColumn":24},{"ruleId":"261","severity":1,"message":"266","line":30,"column":8,"nodeType":"263","messageId":"264","endLine":30,"endColumn":9},{"ruleId":"267","severity":1,"message":"268","line":223,"column":62,"nodeType":"269","messageId":"270","endLine":223,"endColumn":64},{"ruleId":"267","severity":1,"message":"268","line":225,"column":69,"nodeType":"269","messageId":"270","endLine":225,"endColumn":71},{"ruleId":"261","severity":1,"message":"271","line":318,"column":11,"nodeType":"263","messageId":"264","endLine":318,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":330,"column":17,"nodeType":"269","messageId":"270","endLine":330,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":333,"column":24,"nodeType":"269","messageId":"270","endLine":333,"endColumn":26},{"ruleId":"261","severity":1,"message":"272","line":336,"column":13,"nodeType":"263","messageId":"264","endLine":336,"endColumn":19},{"ruleId":"261","severity":1,"message":"272","line":341,"column":13,"nodeType":"263","messageId":"264","endLine":341,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":367,"column":17,"nodeType":"269","messageId":"270","endLine":367,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":371,"column":24,"nodeType":"269","messageId":"270","endLine":371,"endColumn":26},{"ruleId":"261","severity":1,"message":"271","line":599,"column":11,"nodeType":"263","messageId":"264","endLine":599,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":608,"column":17,"nodeType":"269","messageId":"270","endLine":608,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":611,"column":24,"nodeType":"269","messageId":"270","endLine":611,"endColumn":26},{"ruleId":"261","severity":1,"message":"272","line":614,"column":13,"nodeType":"263","messageId":"264","endLine":614,"endColumn":19},{"ruleId":"261","severity":1,"message":"272","line":619,"column":13,"nodeType":"263","messageId":"264","endLine":619,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":645,"column":17,"nodeType":"269","messageId":"270","endLine":645,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":649,"column":24,"nodeType":"269","messageId":"270","endLine":649,"endColumn":26},{"ruleId":"273","severity":1,"message":"274","line":764,"column":6,"nodeType":"275","endLine":764,"endColumn":22,"suggestions":"276"},{"ruleId":"273","severity":1,"message":"277","line":770,"column":6,"nodeType":"275","endLine":770,"endColumn":21,"suggestions":"278"},{"ruleId":"273","severity":1,"message":"279","line":782,"column":6,"nodeType":"275","endLine":782,"endColumn":43,"suggestions":"280"},{"ruleId":"273","severity":1,"message":"281","line":796,"column":7,"nodeType":"275","endLine":796,"endColumn":46,"suggestions":"282"},{"ruleId":"273","severity":1,"message":"283","line":855,"column":7,"nodeType":"275","endLine":855,"endColumn":85,"suggestions":"284"},{"ruleId":"273","severity":1,"message":"285","line":906,"column":6,"nodeType":"275","endLine":906,"endColumn":20,"suggestions":"286"},{"ruleId":"273","severity":1,"message":"287","line":914,"column":6,"nodeType":"275","endLine":914,"endColumn":19,"suggestions":"288"},{"ruleId":"273","severity":1,"message":"289","line":927,"column":6,"nodeType":"275","endLine":927,"endColumn":39,"suggestions":"290"},{"ruleId":"273","severity":1,"message":"291","line":942,"column":8,"nodeType":"275","endLine":942,"endColumn":43,"suggestions":"292"},{"ruleId":"273","severity":1,"message":"293","line":950,"column":8,"nodeType":"275","endLine":950,"endColumn":21,"suggestions":"294"},{"ruleId":"273","severity":1,"message":"295","line":1008,"column":8,"nodeType":"275","endLine":1008,"endColumn":80,"suggestions":"296"},{"ruleId":"261","severity":1,"message":"297","line":5,"column":10,"nodeType":"263","messageId":"264","endLine":5,"endColumn":39},{"ruleId":"261","severity":1,"message":"298","line":5,"column":41,"nodeType":"263","messageId":"264","endLine":5,"endColumn":69},{"ruleId":"261","severity":1,"message":"299","line":6,"column":8,"nodeType":"263","messageId":"264","endLine":6,"endColumn":16},{"ruleId":"261","severity":1,"message":"300","line":8,"column":10,"nodeType":"263","messageId":"264","endLine":8,"endColumn":29},{"ruleId":"261","severity":1,"message":"301","line":8,"column":31,"nodeType":"263","messageId":"264","endLine":8,"endColumn":53},{"ruleId":"261","severity":1,"message":"302","line":9,"column":8,"nodeType":"263","messageId":"264","endLine":9,"endColumn":16},{"ruleId":"261","severity":1,"message":"303","line":10,"column":8,"nodeType":"263","messageId":"264","endLine":10,"endColumn":18},{"ruleId":"261","severity":1,"message":"304","line":12,"column":8,"nodeType":"263","messageId":"264","endLine":12,"endColumn":11},{"ruleId":"261","severity":1,"message":"305","line":16,"column":8,"nodeType":"263","messageId":"264","endLine":16,"endColumn":18},{"ruleId":"261","severity":1,"message":"306","line":17,"column":8,"nodeType":"263","messageId":"264","endLine":17,"endColumn":19},{"ruleId":"261","severity":1,"message":"307","line":18,"column":8,"nodeType":"263","messageId":"264","endLine":18,"endColumn":19},{"ruleId":"261","severity":1,"message":"308","line":19,"column":8,"nodeType":"263","messageId":"264","endLine":19,"endColumn":14},{"ruleId":"261","severity":1,"message":"309","line":20,"column":8,"nodeType":"263","messageId":"264","endLine":20,"endColumn":11},{"ruleId":"261","severity":1,"message":"310","line":21,"column":10,"nodeType":"263","messageId":"264","endLine":21,"endColumn":21},{"ruleId":"261","severity":1,"message":"311","line":58,"column":10,"nodeType":"263","messageId":"264","endLine":58,"endColumn":30},{"ruleId":"261","severity":1,"message":"312","line":59,"column":10,"nodeType":"263","messageId":"264","endLine":59,"endColumn":25},{"ruleId":"261","severity":1,"message":"313","line":60,"column":10,"nodeType":"263","messageId":"264","endLine":60,"endColumn":34},{"ruleId":"261","severity":1,"message":"314","line":61,"column":10,"nodeType":"263","messageId":"264","endLine":61,"endColumn":29},{"ruleId":"267","severity":1,"message":"268","line":142,"column":27,"nodeType":"269","messageId":"270","endLine":142,"endColumn":29},{"ruleId":"261","severity":1,"message":"315","line":199,"column":9,"nodeType":"263","messageId":"264","endLine":199,"endColumn":18},{"ruleId":"273","severity":1,"message":"316","line":288,"column":62,"nodeType":"263","endLine":288,"endColumn":69},{"ruleId":"273","severity":1,"message":"317","line":290,"column":4,"nodeType":"275","endLine":290,"endColumn":27,"suggestions":"318"},{"ruleId":"273","severity":1,"message":"319","line":299,"column":4,"nodeType":"275","endLine":299,"endColumn":6,"suggestions":"320"},{"ruleId":"261","severity":1,"message":"309","line":7,"column":8,"nodeType":"263","messageId":"264","endLine":7,"endColumn":11},{"ruleId":"261","severity":1,"message":"321","line":9,"column":8,"nodeType":"263","messageId":"264","endLine":9,"endColumn":19},{"ruleId":"261","severity":1,"message":"322","line":10,"column":10,"nodeType":"263","messageId":"264","endLine":10,"endColumn":17},{"ruleId":"261","severity":1,"message":"323","line":14,"column":7,"nodeType":"263","messageId":"264","endLine":14,"endColumn":12},{"ruleId":"261","severity":1,"message":"324","line":1,"column":8,"nodeType":"263","messageId":"264","endLine":1,"endColumn":18},{"ruleId":"325","severity":1,"message":"326","line":17,"column":32,"nodeType":"327","messageId":"328","endLine":17,"endColumn":33,"suggestions":"329"},{"ruleId":"325","severity":1,"message":"326","line":17,"column":46,"nodeType":"327","messageId":"328","endLine":17,"endColumn":47,"suggestions":"330"},{"ruleId":"325","severity":1,"message":"326","line":24,"column":32,"nodeType":"327","messageId":"328","endLine":24,"endColumn":33,"suggestions":"331"},{"ruleId":"325","severity":1,"message":"326","line":24,"column":45,"nodeType":"327","messageId":"328","endLine":24,"endColumn":46,"suggestions":"332"},{"ruleId":"325","severity":1,"message":"326","line":31,"column":32,"nodeType":"327","messageId":"328","endLine":31,"endColumn":33,"suggestions":"333"},{"ruleId":"325","severity":1,"message":"326","line":31,"column":44,"nodeType":"327","messageId":"328","endLine":31,"endColumn":45,"suggestions":"334"},{"ruleId":"325","severity":1,"message":"326","line":39,"column":32,"nodeType":"327","messageId":"328","endLine":39,"endColumn":33,"suggestions":"335"},{"ruleId":"325","severity":1,"message":"326","line":39,"column":46,"nodeType":"327","messageId":"328","endLine":39,"endColumn":47,"suggestions":"336"},{"ruleId":"325","severity":1,"message":"326","line":60,"column":33,"nodeType":"327","messageId":"328","endLine":60,"endColumn":34,"suggestions":"337"},{"ruleId":"325","severity":1,"message":"326","line":60,"column":40,"nodeType":"327","messageId":"328","endLine":60,"endColumn":41,"suggestions":"338"},{"ruleId":"325","severity":1,"message":"326","line":60,"column":55,"nodeType":"327","messageId":"328","endLine":60,"endColumn":56,"suggestions":"339"},{"ruleId":"325","severity":1,"message":"326","line":60,"column":67,"nodeType":"327","messageId":"328","endLine":60,"endColumn":68,"suggestions":"340"},{"ruleId":"325","severity":1,"message":"326","line":70,"column":31,"nodeType":"327","messageId":"328","endLine":70,"endColumn":32,"suggestions":"341"},{"ruleId":"325","severity":1,"message":"326","line":70,"column":43,"nodeType":"327","messageId":"328","endLine":70,"endColumn":44,"suggestions":"342"},{"ruleId":"325","severity":1,"message":"326","line":70,"column":58,"nodeType":"327","messageId":"328","endLine":70,"endColumn":59,"suggestions":"343"},{"ruleId":"325","severity":1,"message":"326","line":70,"column":70,"nodeType":"327","messageId":"328","endLine":70,"endColumn":71,"suggestions":"344"},{"ruleId":"325","severity":1,"message":"326","line":85,"column":31,"nodeType":"327","messageId":"328","endLine":85,"endColumn":32,"suggestions":"345"},{"ruleId":"325","severity":1,"message":"326","line":85,"column":45,"nodeType":"327","messageId":"328","endLine":85,"endColumn":46,"suggestions":"346"},{"ruleId":"325","severity":1,"message":"326","line":85,"column":60,"nodeType":"327","messageId":"328","endLine":85,"endColumn":61,"suggestions":"347"},{"ruleId":"325","severity":1,"message":"326","line":85,"column":76,"nodeType":"327","messageId":"328","endLine":85,"endColumn":77,"suggestions":"348"},{"ruleId":"325","severity":1,"message":"326","line":93,"column":33,"nodeType":"327","messageId":"328","endLine":93,"endColumn":34,"suggestions":"349"},{"ruleId":"325","severity":1,"message":"326","line":93,"column":49,"nodeType":"327","messageId":"328","endLine":93,"endColumn":50,"suggestions":"350"},{"ruleId":"325","severity":1,"message":"326","line":93,"column":64,"nodeType":"327","messageId":"328","endLine":93,"endColumn":65,"suggestions":"351"},{"ruleId":"325","severity":1,"message":"326","line":93,"column":76,"nodeType":"327","messageId":"328","endLine":93,"endColumn":77,"suggestions":"352"},{"ruleId":"325","severity":1,"message":"326","line":102,"column":33,"nodeType":"327","messageId":"328","endLine":102,"endColumn":34,"suggestions":"353"},{"ruleId":"325","severity":1,"message":"326","line":102,"column":46,"nodeType":"327","messageId":"328","endLine":102,"endColumn":47,"suggestions":"354"},{"ruleId":"325","severity":1,"message":"326","line":102,"column":61,"nodeType":"327","messageId":"328","endLine":102,"endColumn":62,"suggestions":"355"},{"ruleId":"325","severity":1,"message":"326","line":102,"column":69,"nodeType":"327","messageId":"328","endLine":102,"endColumn":70,"suggestions":"356"},{"ruleId":"325","severity":1,"message":"326","line":109,"column":33,"nodeType":"327","messageId":"328","endLine":109,"endColumn":34,"suggestions":"357"},{"ruleId":"325","severity":1,"message":"326","line":109,"column":47,"nodeType":"327","messageId":"328","endLine":109,"endColumn":48,"suggestions":"358"},{"ruleId":"325","severity":1,"message":"326","line":109,"column":62,"nodeType":"327","messageId":"328","endLine":109,"endColumn":63,"suggestions":"359"},{"ruleId":"325","severity":1,"message":"326","line":109,"column":78,"nodeType":"327","messageId":"328","endLine":109,"endColumn":79,"suggestions":"360"},{"ruleId":"325","severity":1,"message":"326","line":118,"column":33,"nodeType":"327","messageId":"328","endLine":118,"endColumn":34,"suggestions":"361"},{"ruleId":"325","severity":1,"message":"326","line":118,"column":49,"nodeType":"327","messageId":"328","endLine":118,"endColumn":50,"suggestions":"362"},{"ruleId":"325","severity":1,"message":"326","line":118,"column":64,"nodeType":"327","messageId":"328","endLine":118,"endColumn":65,"suggestions":"363"},{"ruleId":"325","severity":1,"message":"326","line":118,"column":78,"nodeType":"327","messageId":"328","endLine":118,"endColumn":79,"suggestions":"364"},{"ruleId":"325","severity":1,"message":"326","line":155,"column":26,"nodeType":"327","messageId":"328","endLine":155,"endColumn":27,"suggestions":"365"},{"ruleId":"325","severity":1,"message":"326","line":155,"column":40,"nodeType":"327","messageId":"328","endLine":155,"endColumn":41,"suggestions":"366"},{"ruleId":"325","severity":1,"message":"326","line":162,"column":26,"nodeType":"327","messageId":"328","endLine":162,"endColumn":27,"suggestions":"367"},{"ruleId":"325","severity":1,"message":"326","line":162,"column":39,"nodeType":"327","messageId":"328","endLine":162,"endColumn":40,"suggestions":"368"},{"ruleId":"325","severity":1,"message":"326","line":169,"column":26,"nodeType":"327","messageId":"328","endLine":169,"endColumn":27,"suggestions":"369"},{"ruleId":"325","severity":1,"message":"326","line":169,"column":38,"nodeType":"327","messageId":"328","endLine":169,"endColumn":39,"suggestions":"370"},{"ruleId":"325","severity":1,"message":"326","line":177,"column":26,"nodeType":"327","messageId":"328","endLine":177,"endColumn":27,"suggestions":"371"},{"ruleId":"325","severity":1,"message":"326","line":177,"column":40,"nodeType":"327","messageId":"328","endLine":177,"endColumn":41,"suggestions":"372"},{"ruleId":"325","severity":1,"message":"326","line":198,"column":25,"nodeType":"327","messageId":"328","endLine":198,"endColumn":26,"suggestions":"373"},{"ruleId":"325","severity":1,"message":"326","line":198,"column":32,"nodeType":"327","messageId":"328","endLine":198,"endColumn":33,"suggestions":"374"},{"ruleId":"325","severity":1,"message":"326","line":198,"column":47,"nodeType":"327","messageId":"328","endLine":198,"endColumn":48,"suggestions":"375"},{"ruleId":"325","severity":1,"message":"326","line":198,"column":59,"nodeType":"327","messageId":"328","endLine":198,"endColumn":60,"suggestions":"376"},{"ruleId":"325","severity":1,"message":"326","line":210,"column":25,"nodeType":"327","messageId":"328","endLine":210,"endColumn":26,"suggestions":"377"},{"ruleId":"325","severity":1,"message":"326","line":210,"column":37,"nodeType":"327","messageId":"328","endLine":210,"endColumn":38,"suggestions":"378"},{"ruleId":"325","severity":1,"message":"326","line":210,"column":52,"nodeType":"327","messageId":"328","endLine":210,"endColumn":53,"suggestions":"379"},{"ruleId":"325","severity":1,"message":"326","line":210,"column":64,"nodeType":"327","messageId":"328","endLine":210,"endColumn":65,"suggestions":"380"},{"ruleId":"325","severity":1,"message":"326","line":225,"column":25,"nodeType":"327","messageId":"328","endLine":225,"endColumn":26,"suggestions":"381"},{"ruleId":"325","severity":1,"message":"326","line":225,"column":39,"nodeType":"327","messageId":"328","endLine":225,"endColumn":40,"suggestions":"382"},{"ruleId":"325","severity":1,"message":"326","line":225,"column":54,"nodeType":"327","messageId":"328","endLine":225,"endColumn":55,"suggestions":"383"},{"ruleId":"325","severity":1,"message":"326","line":225,"column":70,"nodeType":"327","messageId":"328","endLine":225,"endColumn":71,"suggestions":"384"},{"ruleId":"325","severity":1,"message":"326","line":233,"column":25,"nodeType":"327","messageId":"328","endLine":233,"endColumn":26,"suggestions":"385"},{"ruleId":"325","severity":1,"message":"326","line":233,"column":41,"nodeType":"327","messageId":"328","endLine":233,"endColumn":42,"suggestions":"386"},{"ruleId":"325","severity":1,"message":"326","line":233,"column":56,"nodeType":"327","messageId":"328","endLine":233,"endColumn":57,"suggestions":"387"},{"ruleId":"325","severity":1,"message":"326","line":233,"column":68,"nodeType":"327","messageId":"328","endLine":233,"endColumn":69,"suggestions":"388"},{"ruleId":"325","severity":1,"message":"326","line":242,"column":25,"nodeType":"327","messageId":"328","endLine":242,"endColumn":26,"suggestions":"389"},{"ruleId":"325","severity":1,"message":"326","line":242,"column":38,"nodeType":"327","messageId":"328","endLine":242,"endColumn":39,"suggestions":"390"},{"ruleId":"325","severity":1,"message":"326","line":242,"column":53,"nodeType":"327","messageId":"328","endLine":242,"endColumn":54,"suggestions":"391"},{"ruleId":"325","severity":1,"message":"326","line":242,"column":61,"nodeType":"327","messageId":"328","endLine":242,"endColumn":62,"suggestions":"392"},{"ruleId":"325","severity":1,"message":"326","line":249,"column":25,"nodeType":"327","messageId":"328","endLine":249,"endColumn":26,"suggestions":"393"},{"ruleId":"325","severity":1,"message":"326","line":249,"column":39,"nodeType":"327","messageId":"328","endLine":249,"endColumn":40,"suggestions":"394"},{"ruleId":"325","severity":1,"message":"326","line":249,"column":54,"nodeType":"327","messageId":"328","endLine":249,"endColumn":55,"suggestions":"395"},{"ruleId":"325","severity":1,"message":"326","line":249,"column":70,"nodeType":"327","messageId":"328","endLine":249,"endColumn":71,"suggestions":"396"},{"ruleId":"325","severity":1,"message":"326","line":258,"column":25,"nodeType":"327","messageId":"328","endLine":258,"endColumn":26,"suggestions":"397"},{"ruleId":"325","severity":1,"message":"326","line":258,"column":41,"nodeType":"327","messageId":"328","endLine":258,"endColumn":42,"suggestions":"398"},{"ruleId":"325","severity":1,"message":"326","line":258,"column":56,"nodeType":"327","messageId":"328","endLine":258,"endColumn":57,"suggestions":"399"},{"ruleId":"325","severity":1,"message":"326","line":258,"column":70,"nodeType":"327","messageId":"328","endLine":258,"endColumn":71,"suggestions":"400"},{"ruleId":"261","severity":1,"message":"303","line":1,"column":8,"nodeType":"263","messageId":"264","endLine":1,"endColumn":18},{"ruleId":"261","severity":1,"message":"401","line":2,"column":8,"nodeType":"263","messageId":"264","endLine":2,"endColumn":14},{"ruleId":"261","severity":1,"message":"309","line":3,"column":8,"nodeType":"263","messageId":"264","endLine":3,"endColumn":11},{"ruleId":"261","severity":1,"message":"402","line":4,"column":8,"nodeType":"263","messageId":"264","endLine":4,"endColumn":15},{"ruleId":"261","severity":1,"message":"308","line":7,"column":8,"nodeType":"263","messageId":"264","endLine":7,"endColumn":14},{"ruleId":"261","severity":1,"message":"301","line":9,"column":10,"nodeType":"263","messageId":"264","endLine":9,"endColumn":32},{"ruleId":"261","severity":1,"message":"403","line":10,"column":8,"nodeType":"263","messageId":"264","endLine":10,"endColumn":14},{"ruleId":"261","severity":1,"message":"404","line":12,"column":10,"nodeType":"263","messageId":"264","endLine":12,"endColumn":17},{"ruleId":"261","severity":1,"message":"405","line":13,"column":10,"nodeType":"263","messageId":"264","endLine":13,"endColumn":16},{"ruleId":"261","severity":1,"message":"406","line":4,"column":8,"nodeType":"263","messageId":"264","endLine":4,"endColumn":24},{"ruleId":"261","severity":1,"message":"407","line":1,"column":8,"nodeType":"263","messageId":"264","endLine":1,"endColumn":13},{"ruleId":"261","severity":1,"message":"408","line":4,"column":8,"nodeType":"263","messageId":"264","endLine":4,"endColumn":19},{"ruleId":"261","severity":1,"message":"409","line":5,"column":8,"nodeType":"263","messageId":"264","endLine":5,"endColumn":17},{"ruleId":"261","severity":1,"message":"410","line":7,"column":8,"nodeType":"263","messageId":"264","endLine":7,"endColumn":16},{"ruleId":"261","severity":1,"message":"411","line":2,"column":27,"nodeType":"263","messageId":"264","endLine":2,"endColumn":33},{"ruleId":"261","severity":1,"message":"412","line":2,"column":35,"nodeType":"263","messageId":"264","endLine":2,"endColumn":40},{"ruleId":"261","severity":1,"message":"413","line":2,"column":42,"nodeType":"263","messageId":"264","endLine":2,"endColumn":48},{"ruleId":"261","severity":1,"message":"414","line":3,"column":8,"nodeType":"263","messageId":"264","endLine":3,"endColumn":16},{"ruleId":"261","severity":1,"message":"266","line":13,"column":8,"nodeType":"263","messageId":"264","endLine":13,"endColumn":9},{"ruleId":"261","severity":1,"message":"415","line":29,"column":10,"nodeType":"263","messageId":"264","endLine":29,"endColumn":23},{"ruleId":"261","severity":1,"message":"416","line":53,"column":9,"nodeType":"263","messageId":"264","endLine":53,"endColumn":14},{"ruleId":"261","severity":1,"message":"417","line":61,"column":9,"nodeType":"263","messageId":"264","endLine":61,"endColumn":25},{"ruleId":"261","severity":1,"message":"271","line":182,"column":11,"nodeType":"263","messageId":"264","endLine":182,"endColumn":26},{"ruleId":"267","severity":1,"message":"268","line":191,"column":17,"nodeType":"269","messageId":"270","endLine":191,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":194,"column":24,"nodeType":"269","messageId":"270","endLine":194,"endColumn":26},{"ruleId":"261","severity":1,"message":"272","line":197,"column":13,"nodeType":"263","messageId":"264","endLine":197,"endColumn":19},{"ruleId":"261","severity":1,"message":"272","line":202,"column":13,"nodeType":"263","messageId":"264","endLine":202,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":228,"column":17,"nodeType":"269","messageId":"270","endLine":228,"endColumn":19},{"ruleId":"267","severity":1,"message":"268","line":232,"column":24,"nodeType":"269","messageId":"270","endLine":232,"endColumn":26},{"ruleId":"273","severity":1,"message":"285","line":348,"column":6,"nodeType":"275","endLine":348,"endColumn":20,"suggestions":"418"},{"ruleId":"273","severity":1,"message":"287","line":356,"column":6,"nodeType":"275","endLine":356,"endColumn":19,"suggestions":"419"},{"ruleId":"273","severity":1,"message":"289","line":369,"column":6,"nodeType":"275","endLine":369,"endColumn":39,"suggestions":"420"},{"ruleId":"273","severity":1,"message":"291","line":384,"column":8,"nodeType":"275","endLine":384,"endColumn":43,"suggestions":"421"},{"ruleId":"273","severity":1,"message":"422","line":389,"column":8,"nodeType":"275","endLine":389,"endColumn":10,"suggestions":"423"},{"ruleId":"273","severity":1,"message":"424","line":446,"column":8,"nodeType":"275","endLine":446,"endColumn":80,"suggestions":"425"},"no-native-reassign",["426"],"no-negated-in-lhs",["427"],"no-unused-vars","'StartPage' is defined but never used.","Identifier","unusedVar","'GuidedAnnotation' is defined but never used.","'_' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'which_match_mtx' is assigned a value but never used.","'isSpan' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'g_CurrSentInd', 'g_MachineStateHandlerWrapper', and 'g_StateMachineState'. Either include them or remove the dependency array.","ArrayExpression",["428"],"React Hook useEffect has a missing dependency: 'g_SetSummaryShadowAndUpdateHighlights'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has missing dependencies: 'g_boldStateHandler' and 'g_sliderBoldStateActivated'. Either include them or remove the dependency array.",["430"],"React Hook useEffect has a missing dependency: 'g_oldAlignmentStateHandler'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has missing dependencies: 'g_DocOnMouseDownID', 'g_StateMachineState', 'g_SummaryOnMouseDownID', 'g_checkIfLemmasMatch', 'g_doc_json', 'g_hoverActivatedDocOrSummary', 'g_isRedLettered', and 'g_summary_json'. Either include them or remove the dependency array. You can also do a functional update 'g_setDocJson(g => ...)' if you only need 'g_doc_json' in the 'g_setDocJson' call.",["432"],"React Hook useEffect has missing dependencies: 'CurrSentInd', 'MachineStateHandlerWrapper', and 'StateMachineState'. Either include them or remove the dependency array.",["433"],"React Hook useEffect has a missing dependency: 'SetSummaryShadowAndUpdateHighlights'. Either include it or remove the dependency array.",["434"],"React Hook useEffect has missing dependencies: 'boldStateHandler' and 'sliderBoldStateActivated'. Either include them or remove the dependency array.",["435"],"React Hook useEffect has a missing dependency: 'oldAlignmentStateHandler'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'doc_json' and 't_doc_json'. Either include them or remove the dependency array.",["437"],"React Hook useEffect has missing dependencies: 'DocOnMouseDownID', 'StateMachineState', 'SummaryOnMouseDownID', 'checkIfLemmasMatch', 'doc_json', 'hoverActivatedDocOrSummary', 'isRedLettered', and 'summary_json'. Either include them or remove the dependency array. You can also do a functional update 'setDocJson(d => ...)' if you only need 'doc_json' in the 'setDocJson' call.",["438"],"'getGuidedAnnotationToastTitle' is defined but never used.","'getGuidedAnnotationToastText' is defined but never used.","'MuiAlert' is defined but never used.","'ArrowBackIosTwoTone' is defined but never used.","'ArrowForwardIosTwoTone' is defined but never used.","'SendIcon' is defined but never used.","'Typography' is defined but never used.","'Fab' is defined but never used.","'CardHeader' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'Box' is defined but never used.","'borderColor' is defined but never used.","'DocMouseclickStartID' is assigned a value but never used.","'DocMouseclicked' is assigned a value but never used.","'SummaryMouseclickStartID' is assigned a value but never used.","'SummaryMouseclicked' is assigned a value but never used.","'get_range' is assigned a value but never used.","The ref value 'containerRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'containerRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'callbackFunction'. Either include it or remove the dependency array.",["439"],"React Hook useEffect has missing dependencies: 'doc_json' and 'isTutorial'. Either include them or remove the dependency array.",["440"],"'ButtonGroup' is defined but never used.","'spacing' is defined but never used.","'pages' is assigned a value but never used.","'BackButton' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","TemplateElement","unnecessaryEscape",["441","442"],["443","444"],["445","446"],["447","448"],["449","450"],["451","452"],["453","454"],["455","456"],["457","458"],["459","460"],["461","462"],["463","464"],["465","466"],["467","468"],["469","470"],["471","472"],["473","474"],["475","476"],["477","478"],["479","480"],["481","482"],["483","484"],["485","486"],["487","488"],["489","490"],["491","492"],["493","494"],["495","496"],["497","498"],["499","500"],["501","502"],["503","504"],["505","506"],["507","508"],["509","510"],["511","512"],["513","514"],["515","516"],["517","518"],["519","520"],["521","522"],["523","524"],["525","526"],["527","528"],["529","530"],["531","532"],["533","534"],["535","536"],["537","538"],["539","540"],["541","542"],["543","544"],["545","546"],["547","548"],["549","550"],["551","552"],["553","554"],["555","556"],["557","558"],["559","560"],["561","562"],["563","564"],["565","566"],["567","568"],["569","570"],["571","572"],["573","574"],["575","576"],["577","578"],["579","580"],["581","582"],["583","584"],"'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Slider' is defined but never used.","'padding' is defined but never used.","'styled' is defined but never used.","'ResponsiveAppBar' is defined but never used.","'Alert' is defined but never used.","'ToastHeader' is defined but never used.","'ToastBody' is defined but never used.","'Carousel' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'Snackbar' is defined but never used.","'error_message' is assigned a value but never used.","'Alert' is assigned a value but never used.","'handleErrorClose' is assigned a value but never used.",["585"],["586"],["587"],["588"],"React Hook useEffect has a missing dependency: 'doc_json'. Either include it or remove the dependency array.",["589"],"React Hook useEffect has missing dependencies: 'DocOnMouseDownID', 'StateMachineState', 'SummaryOnMouseDownID', 'checkIfLemmasMatch', 'doc_json', 'hoverActivatedDocOrSummary', 'isRedLettered', 'setDocJson', 'setSummaryJson', and 'summary_json'. Either include them or remove the dependency array. If 'setDocJson' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["590"],"no-global-assign","no-unsafe-negation",{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"messageId":"617","fix":"618","desc":"619"},{"messageId":"620","fix":"621","desc":"622"},{"messageId":"617","fix":"623","desc":"619"},{"messageId":"620","fix":"624","desc":"622"},{"messageId":"617","fix":"625","desc":"619"},{"messageId":"620","fix":"626","desc":"622"},{"messageId":"617","fix":"627","desc":"619"},{"messageId":"620","fix":"628","desc":"622"},{"messageId":"617","fix":"629","desc":"619"},{"messageId":"620","fix":"630","desc":"622"},{"messageId":"617","fix":"631","desc":"619"},{"messageId":"620","fix":"632","desc":"622"},{"messageId":"617","fix":"633","desc":"619"},{"messageId":"620","fix":"634","desc":"622"},{"messageId":"617","fix":"635","desc":"619"},{"messageId":"620","fix":"636","desc":"622"},{"messageId":"617","fix":"637","desc":"619"},{"messageId":"620","fix":"638","desc":"622"},{"messageId":"617","fix":"639","desc":"619"},{"messageId":"620","fix":"640","desc":"622"},{"messageId":"617","fix":"641","desc":"619"},{"messageId":"620","fix":"642","desc":"622"},{"messageId":"617","fix":"643","desc":"619"},{"messageId":"620","fix":"644","desc":"622"},{"messageId":"617","fix":"645","desc":"619"},{"messageId":"620","fix":"646","desc":"622"},{"messageId":"617","fix":"647","desc":"619"},{"messageId":"620","fix":"648","desc":"622"},{"messageId":"617","fix":"649","desc":"619"},{"messageId":"620","fix":"650","desc":"622"},{"messageId":"617","fix":"651","desc":"619"},{"messageId":"620","fix":"652","desc":"622"},{"messageId":"617","fix":"653","desc":"619"},{"messageId":"620","fix":"654","desc":"622"},{"messageId":"617","fix":"655","desc":"619"},{"messageId":"620","fix":"656","desc":"622"},{"messageId":"617","fix":"657","desc":"619"},{"messageId":"620","fix":"658","desc":"622"},{"messageId":"617","fix":"659","desc":"619"},{"messageId":"620","fix":"660","desc":"622"},{"messageId":"617","fix":"661","desc":"619"},{"messageId":"620","fix":"662","desc":"622"},{"messageId":"617","fix":"663","desc":"619"},{"messageId":"620","fix":"664","desc":"622"},{"messageId":"617","fix":"665","desc":"619"},{"messageId":"620","fix":"666","desc":"622"},{"messageId":"617","fix":"667","desc":"619"},{"messageId":"620","fix":"668","desc":"622"},{"messageId":"617","fix":"669","desc":"619"},{"messageId":"620","fix":"670","desc":"622"},{"messageId":"617","fix":"671","desc":"619"},{"messageId":"620","fix":"672","desc":"622"},{"messageId":"617","fix":"673","desc":"619"},{"messageId":"620","fix":"674","desc":"622"},{"messageId":"617","fix":"675","desc":"619"},{"messageId":"620","fix":"676","desc":"622"},{"messageId":"617","fix":"677","desc":"619"},{"messageId":"620","fix":"678","desc":"622"},{"messageId":"617","fix":"679","desc":"619"},{"messageId":"620","fix":"680","desc":"622"},{"messageId":"617","fix":"681","desc":"619"},{"messageId":"620","fix":"682","desc":"622"},{"messageId":"617","fix":"683","desc":"619"},{"messageId":"620","fix":"684","desc":"622"},{"messageId":"617","fix":"685","desc":"619"},{"messageId":"620","fix":"686","desc":"622"},{"messageId":"617","fix":"687","desc":"619"},{"messageId":"620","fix":"688","desc":"622"},{"messageId":"617","fix":"689","desc":"619"},{"messageId":"620","fix":"690","desc":"622"},{"messageId":"617","fix":"691","desc":"619"},{"messageId":"620","fix":"692","desc":"622"},{"messageId":"617","fix":"693","desc":"619"},{"messageId":"620","fix":"694","desc":"622"},{"messageId":"617","fix":"695","desc":"619"},{"messageId":"620","fix":"696","desc":"622"},{"messageId":"617","fix":"697","desc":"619"},{"messageId":"620","fix":"698","desc":"622"},{"messageId":"617","fix":"699","desc":"619"},{"messageId":"620","fix":"700","desc":"622"},{"messageId":"617","fix":"701","desc":"619"},{"messageId":"620","fix":"702","desc":"622"},{"messageId":"617","fix":"703","desc":"619"},{"messageId":"620","fix":"704","desc":"622"},{"messageId":"617","fix":"705","desc":"619"},{"messageId":"620","fix":"706","desc":"622"},{"messageId":"617","fix":"707","desc":"619"},{"messageId":"620","fix":"708","desc":"622"},{"messageId":"617","fix":"709","desc":"619"},{"messageId":"620","fix":"710","desc":"622"},{"messageId":"617","fix":"711","desc":"619"},{"messageId":"620","fix":"712","desc":"622"},{"messageId":"617","fix":"713","desc":"619"},{"messageId":"620","fix":"714","desc":"622"},{"messageId":"617","fix":"715","desc":"619"},{"messageId":"620","fix":"716","desc":"622"},{"messageId":"617","fix":"717","desc":"619"},{"messageId":"620","fix":"718","desc":"622"},{"messageId":"617","fix":"719","desc":"619"},{"messageId":"620","fix":"720","desc":"622"},{"messageId":"617","fix":"721","desc":"619"},{"messageId":"620","fix":"722","desc":"622"},{"messageId":"617","fix":"723","desc":"619"},{"messageId":"620","fix":"724","desc":"622"},{"messageId":"617","fix":"725","desc":"619"},{"messageId":"620","fix":"726","desc":"622"},{"messageId":"617","fix":"727","desc":"619"},{"messageId":"620","fix":"728","desc":"622"},{"messageId":"617","fix":"729","desc":"619"},{"messageId":"620","fix":"730","desc":"622"},{"messageId":"617","fix":"731","desc":"619"},{"messageId":"620","fix":"732","desc":"622"},{"messageId":"617","fix":"733","desc":"619"},{"messageId":"620","fix":"734","desc":"622"},{"messageId":"617","fix":"735","desc":"619"},{"messageId":"620","fix":"736","desc":"622"},{"messageId":"617","fix":"737","desc":"619"},{"messageId":"620","fix":"738","desc":"622"},{"messageId":"617","fix":"739","desc":"619"},{"messageId":"620","fix":"740","desc":"622"},{"messageId":"617","fix":"741","desc":"619"},{"messageId":"620","fix":"742","desc":"622"},{"messageId":"617","fix":"743","desc":"619"},{"messageId":"620","fix":"744","desc":"622"},{"messageId":"617","fix":"745","desc":"619"},{"messageId":"620","fix":"746","desc":"622"},{"messageId":"617","fix":"747","desc":"619"},{"messageId":"620","fix":"748","desc":"622"},{"messageId":"617","fix":"749","desc":"619"},{"messageId":"620","fix":"750","desc":"622"},{"messageId":"617","fix":"751","desc":"619"},{"messageId":"620","fix":"752","desc":"622"},{"messageId":"617","fix":"753","desc":"619"},{"messageId":"620","fix":"754","desc":"622"},{"messageId":"617","fix":"755","desc":"619"},{"messageId":"620","fix":"756","desc":"622"},{"messageId":"617","fix":"757","desc":"619"},{"messageId":"620","fix":"758","desc":"622"},{"messageId":"617","fix":"759","desc":"619"},{"messageId":"620","fix":"760","desc":"622"},{"messageId":"617","fix":"761","desc":"619"},{"messageId":"620","fix":"762","desc":"622"},{"messageId":"617","fix":"763","desc":"619"},{"messageId":"620","fix":"764","desc":"622"},{"desc":"601","fix":"765"},{"desc":"603","fix":"766"},{"desc":"605","fix":"767"},{"desc":"607","fix":"768"},{"desc":"769","fix":"770"},{"desc":"771","fix":"772"},"Update the dependencies array to be: [g_CurrSentInd, g_MachineStateHandlerWrapper, g_StateMachineState, g_summary_json]",{"range":"773","text":"774"},"Update the dependencies array to be: [g_CurrSentInd, g_SetSummaryShadowAndUpdateHighlights]",{"range":"775","text":"776"},"Update the dependencies array to be: [g_StateMachineState, g_boldStateHandler, g_sliderBoldStateActivated, g_summary_json]",{"range":"777","text":"778"},"Update the dependencies array to be: [g_StateMachineState, g_AlignmentCount, g_oldAlignmentStateHandler]",{"range":"779","text":"780"},"Update the dependencies array to be: [g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId, g_StateMachineState, g_DocOnMouseDownID, g_doc_json, g_SummaryOnMouseDownID, g_summary_json, g_isRedLettered, g_hoverActivatedDocOrSummary, g_checkIfLemmasMatch]",{"range":"781","text":"782"},"Update the dependencies array to be: [CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",{"range":"783","text":"784"},"Update the dependencies array to be: [CurrSentInd, SetSummaryShadowAndUpdateHighlights]",{"range":"785","text":"786"},"Update the dependencies array to be: [StateMachineState, boldStateHandler, sliderBoldStateActivated, summary_json]",{"range":"787","text":"788"},"Update the dependencies array to be: [StateMachineState, AlignmentCount, oldAlignmentStateHandler]",{"range":"789","text":"790"},"Update the dependencies array to be: [CurrSentInd, doc_json, t_doc_json]",{"range":"791","text":"792"},"Update the dependencies array to be: [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",{"range":"793","text":"794"},"Update the dependencies array to be: [callbackFunction, containerRef, options]",{"range":"795","text":"796"},"Update the dependencies array to be: [doc_json, isTutorial]",{"range":"797","text":"798"},"removeEscape",{"range":"799","text":"800"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"801","text":"802"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"803","text":"800"},{"range":"804","text":"802"},{"range":"805","text":"800"},{"range":"806","text":"802"},{"range":"807","text":"800"},{"range":"808","text":"802"},{"range":"809","text":"800"},{"range":"810","text":"802"},{"range":"811","text":"800"},{"range":"812","text":"802"},{"range":"813","text":"800"},{"range":"814","text":"802"},{"range":"815","text":"800"},{"range":"816","text":"802"},{"range":"817","text":"800"},{"range":"818","text":"802"},{"range":"819","text":"800"},{"range":"820","text":"802"},{"range":"821","text":"800"},{"range":"822","text":"802"},{"range":"823","text":"800"},{"range":"824","text":"802"},{"range":"825","text":"800"},{"range":"826","text":"802"},{"range":"827","text":"800"},{"range":"828","text":"802"},{"range":"829","text":"800"},{"range":"830","text":"802"},{"range":"831","text":"800"},{"range":"832","text":"802"},{"range":"833","text":"800"},{"range":"834","text":"802"},{"range":"835","text":"800"},{"range":"836","text":"802"},{"range":"837","text":"800"},{"range":"838","text":"802"},{"range":"839","text":"800"},{"range":"840","text":"802"},{"range":"841","text":"800"},{"range":"842","text":"802"},{"range":"843","text":"800"},{"range":"844","text":"802"},{"range":"845","text":"800"},{"range":"846","text":"802"},{"range":"847","text":"800"},{"range":"848","text":"802"},{"range":"849","text":"800"},{"range":"850","text":"802"},{"range":"851","text":"800"},{"range":"852","text":"802"},{"range":"853","text":"800"},{"range":"854","text":"802"},{"range":"855","text":"800"},{"range":"856","text":"802"},{"range":"857","text":"800"},{"range":"858","text":"802"},{"range":"859","text":"800"},{"range":"860","text":"802"},{"range":"861","text":"800"},{"range":"862","text":"802"},{"range":"863","text":"800"},{"range":"864","text":"802"},{"range":"865","text":"800"},{"range":"866","text":"802"},{"range":"867","text":"800"},{"range":"868","text":"802"},{"range":"869","text":"800"},{"range":"870","text":"802"},{"range":"871","text":"800"},{"range":"872","text":"802"},{"range":"873","text":"800"},{"range":"874","text":"802"},{"range":"875","text":"800"},{"range":"876","text":"802"},{"range":"877","text":"800"},{"range":"878","text":"802"},{"range":"879","text":"800"},{"range":"880","text":"802"},{"range":"881","text":"800"},{"range":"882","text":"802"},{"range":"883","text":"800"},{"range":"884","text":"802"},{"range":"885","text":"800"},{"range":"886","text":"802"},{"range":"887","text":"800"},{"range":"888","text":"802"},{"range":"889","text":"800"},{"range":"890","text":"802"},{"range":"891","text":"800"},{"range":"892","text":"802"},{"range":"893","text":"800"},{"range":"894","text":"802"},{"range":"895","text":"800"},{"range":"896","text":"802"},{"range":"897","text":"800"},{"range":"898","text":"802"},{"range":"899","text":"800"},{"range":"900","text":"802"},{"range":"901","text":"800"},{"range":"902","text":"802"},{"range":"903","text":"800"},{"range":"904","text":"802"},{"range":"905","text":"800"},{"range":"906","text":"802"},{"range":"907","text":"800"},{"range":"908","text":"802"},{"range":"909","text":"800"},{"range":"910","text":"802"},{"range":"911","text":"800"},{"range":"912","text":"802"},{"range":"913","text":"800"},{"range":"914","text":"802"},{"range":"915","text":"800"},{"range":"916","text":"802"},{"range":"917","text":"800"},{"range":"918","text":"802"},{"range":"919","text":"800"},{"range":"920","text":"802"},{"range":"921","text":"800"},{"range":"922","text":"802"},{"range":"923","text":"800"},{"range":"924","text":"802"},{"range":"925","text":"800"},{"range":"926","text":"802"},{"range":"927","text":"800"},{"range":"928","text":"802"},{"range":"929","text":"800"},{"range":"930","text":"802"},{"range":"931","text":"800"},{"range":"932","text":"802"},{"range":"933","text":"800"},{"range":"934","text":"802"},{"range":"935","text":"800"},{"range":"936","text":"802"},{"range":"937","text":"800"},{"range":"938","text":"802"},{"range":"939","text":"800"},{"range":"940","text":"802"},{"range":"941","text":"800"},{"range":"942","text":"802"},{"range":"943","text":"800"},{"range":"944","text":"802"},{"range":"945","text":"784"},{"range":"946","text":"786"},{"range":"947","text":"788"},{"range":"948","text":"790"},"Update the dependencies array to be: [doc_json]",{"range":"949","text":"950"},"Update the dependencies array to be: [docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, setDocJson, doc_json, SummaryOnMouseDownID, setSummaryJson, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",{"range":"951","text":"952"},[41887,41903],"[g_CurrSentInd, g_MachineStateHandlerWrapper, g_StateMachineState, g_summary_json]",[42169,42184],"[g_CurrSentInd, g_SetSummaryShadowAndUpdateHighlights]",[43161,43198],"[g_StateMachineState, g_boldStateHandler, g_sliderBoldStateActivated, g_summary_json]",[43957,43996],"[g_StateMachineState, g_AlignmentCount, g_oldAlignmentStateHandler]",[47333,47411],"[g_docOnMouseDownActivated, g_summaryOnMouseDownActivated, g_hoverActivatedId, g_StateMachineState, g_DocOnMouseDownID, g_doc_json, g_SummaryOnMouseDownID, g_summary_json, g_isRedLettered, g_hoverActivatedDocOrSummary, g_checkIfLemmasMatch]",[49445,49459],"[CurrSentInd, MachineStateHandlerWrapper, StateMachineState, summary_json]",[49727,49740],"[CurrSentInd, SetSummaryShadowAndUpdateHighlights]",[50705,50738],"[StateMachineState, boldStateHandler, sliderBoldStateActivated, summary_json]",[51493,51528],"[StateMachineState, AlignmentCount, oldAlignmentStateHandler]",[51847,51860],"[CurrSentInd, doc_json, t_doc_json]",[55119,55191],"[docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, doc_json, SummaryOnMouseDownID, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]",[14758,14781],"[callbackFunction, containerRef, options]",[15012,15014],"[doc_json, isTutorial]",[851,852],"",[851,851],"\\",[865,866],[865,865],[1131,1132],[1131,1131],[1144,1145],[1144,1144],[1399,1400],[1399,1399],[1411,1412],[1411,1411],[1720,1721],[1720,1720],[1734,1735],[1734,1734],[2758,2759],[2758,2758],[2765,2766],[2765,2765],[2780,2781],[2780,2780],[2792,2793],[2792,2792],[3276,3277],[3276,3276],[3288,3289],[3288,3288],[3303,3304],[3303,3303],[3315,3316],[3315,3315],[3984,3985],[3984,3984],[3998,3999],[3998,3998],[4013,4014],[4013,4013],[4029,4030],[4029,4029],[4480,4481],[4480,4480],[4496,4497],[4496,4496],[4511,4512],[4511,4511],[4523,4524],[4523,4523],[4942,4943],[4942,4942],[4955,4956],[4955,4955],[4970,4971],[4970,4970],[4978,4979],[4978,4978],[5212,5213],[5212,5212],[5226,5227],[5226,5226],[5241,5242],[5241,5241],[5257,5258],[5257,5257],[5619,5620],[5619,5619],[5635,5636],[5635,5635],[5650,5651],[5650,5650],[5664,5665],[5664,5664],[6793,6794],[6793,6793],[6807,6808],[6807,6807],[7043,7044],[7043,7043],[7056,7057],[7056,7056],[7281,7282],[7281,7281],[7293,7294],[7293,7293],[7566,7567],[7566,7566],[7580,7581],[7580,7580],[8492,8493],[8492,8492],[8499,8500],[8499,8499],[8514,8515],[8514,8514],[8526,8527],[8526,8526],[8989,8990],[8989,8989],[9001,9002],[9001,9001],[9016,9017],[9016,9016],[9028,9029],[9028,9028],[9625,9626],[9625,9625],[9639,9640],[9639,9639],[9654,9655],[9654,9654],[9670,9671],[9670,9670],[10071,10072],[10071,10071],[10087,10088],[10087,10087],[10102,10103],[10102,10102],[10114,10115],[10114,10114],[10473,10474],[10473,10473],[10486,10487],[10486,10486],[10501,10502],[10501,10501],[10509,10510],[10509,10509],[10701,10702],[10701,10701],[10715,10716],[10715,10715],[10730,10731],[10730,10730],[10746,10747],[10746,10746],[11050,11051],[11050,11050],[11066,11067],[11066,11066],[11081,11082],[11081,11081],[11095,11096],[11095,11095],[18851,18865],[19133,19146],[20111,20144],[20899,20934],[21122,21124],"[doc_json]",[24102,24174],"[docOnMouseDownActivated, summaryOnMouseDownActivated, hoverActivatedId, StateMachineState, DocOnMouseDownID, setDocJson, doc_json, SummaryOnMouseDownID, setSummaryJson, summary_json, isRedLettered, hoverActivatedDocOrSummary, checkIfLemmasMatch]"]